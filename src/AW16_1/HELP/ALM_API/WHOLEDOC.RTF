{\rtf1\ansi \deff0\deflang1024{\fonttbl{\f0\froman Times New Roman;}{\f1\froman Symbol;}{\f2\fswiss Arial;}{\f3\fswiss MS Sans Serif;}{\f4\fnil Small Fonts;}{\f5\fdecor ZapfDingbats;}{\f6\fswiss Helvetica;}
{\f7\fnil AGaramond;}{\f8\fnil B Helvetica Bold;}{\f9\fmodern Courier;}{\f10\fnil BI Helvetica BoldOblique;}{\f11\froman Arrus Blk BT;}{\f12\fswiss Helvetica-Narrow;}{\f13\froman Tms Rmn;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;
\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue127;\red0\green127\blue127;\red0\green127\blue0;\red127\green0\blue127;\red127\green0\blue0;
\red127\green127\blue0;\red127\green127\blue127;\red192\green192\blue192;}{\stylesheet{\s231\li720\ri720\tldot\tx8280\tqr\tx8640 \f3\fs20\cf8\lang1033 \sbasedon0\snext0 toc 2;}{\s242\tqc\tx4320\tqr\tx8640 \f3\fs20\lang1033 \sbasedon0\snext242 footer;}{
\s243\tqc\tx4320\tqr\tx8640 \f3\fs20\lang1033 \sbasedon0\snext243 header;}{\s244 \f3\fs16\up6\lang1033 \sbasedon0\snext0 footnote reference;}{\s245 \f3\fs20\lang1033 \sbasedon0\snext245 footnote text;}{\s246\li720 \i\f3\fs20\lang1033 
\sbasedon0\snext255 heading 9;}{\s247\li720 \i\f3\fs20\lang1033 \sbasedon0\snext255 heading 8;}{\s248\li720 \i\f3\fs20\lang1033 \sbasedon0\snext255 heading 7;}{\s249\li720 \f3\fs20\ul\lang1033 \sbasedon0\snext255 heading 6;}{\s250\li720 
\b\f3\fs20\lang1033 \sbasedon0\snext255 heading 5;}{\s251\li360 \f3\ul\lang1033 \sbasedon0\snext0 heading 4;}{\s252\li360 \b\f3\lang1033 \sbasedon0\snext255 heading 3;}{\s253\sb120 \b\f2\lang1033 \sbasedon0\snext0 heading 2;}{\s254\sb240 
\b\f6\ul\lang1033 \snext254 heading 1;}{\s255\li720 \f3\fs20\lang1033 \sbasedon0\snext255 Normal Indent;}{\f3\fs20\lang1033 \snext0 Normal;}{\s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \sbasedon0\snext0 Help Topic Heading;}{\s3 \b\i\f3\lang1033 
\sbasedon0\snext3 Help See Also;}{\s4\li360\sb120 \f6\fs20\lang1033 \sbasedon0\snext4 Topic Text;}{\s5\sb240 \b\f6\fs20\lang1033 \sbasedon0\snext4 Topic Heading;}{\s6\li180\sb120 \b\f6\fs28\lang1033 \sbasedon0\snext5 Topic Caption;}{
\s7\fi-1800\li1800\ri360\sb120\tx1980 \fs20 \snext8 syntax;}{\s8\fi-1800\li1800\sb240 \fs20 \sbasedon0\snext8 comments;}{\s9\fi-360\li720\ri360\sb120 \f6\fs20\lang1033 \sbasedon4\snext9 Topic Text Item;}{\s10\li720\ri720\sb120 \f6\fs20\lang1033 
\sbasedon4\snext10 Topic Text Indent;}{\s11\li360\sb120\keepn\brdrb\brdrs\brdrw15\brsp20 \tx2160 \b\f2\fs20 \sbasedon0\snext11 param head;}{\s12\fi-3960\li4320\ri360\sb120\tx2160\tx4320 \f2\fs20 \sbasedon0\snext12 param desc;}{\s13\li1800\sb120 \fs20 
\snext13 func desc;}{\s14\fi-2880\li3960\ri432\sb240\keepn\brdrb\brdrs\brdrw15\brsp20 \tx6480 \b\f2\fs20 \sbasedon0\snext15 table head;}{\s15\fi-2880\li3960\ri432\sb120 \f2\fs20 \sbasedon0\snext15 table entry;}{\s16\fi-2880\li360\ri432\sb240\keepn\brdrb
\brdrs\brdrw15\brsp20 \tx3240 \b\f2\fs20 \sbasedon14\snext16 comment table head;}{\s17\fi-2880\li3240\ri432\sb120 \f2\fs20 \sbasedon15\snext17 comment table entry;}{\s18\fi-5040\li5760\sb120\tx3600 \f2\fs20\lang1033 \sbasedon0\snext18 Protocol;}{
\s19\fi-2520\li2880\ri360\sb120\tx2160\tx4320 \f2\fs20 \sbasedon12\snext19 param desc2;}{\s20\li180\sb120\box\brdrsh\brdrdb\brdrw30\brsp200\brdrcf13 \pvpara\posy0\dxfrtext187\dfrmtxtx187\dfrmtxty0\nowrap \b\f6\fs28\lang1033 
\sbasedon6\snext20 Topic Caption1;}{\s21\li720\ri432 \f3\fs20\lang1033 \sbasedon0\snext21 HelpBreeze TOC;}{\s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \sbasedon0\snext22 Description;}{\s23\li1440\ri288\sa144\brdrb
\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 \sbasedon0\snext23 ColTitle;}{\s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 \sbasedon0\snext24 ThreeColumn;}{
\s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 \sbasedon24\snext25 TwoColumn;}{\s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 \sbasedon0\snext26 Computer;}{
\s27\ri432\sb360\sa240\keep \b\caps\f10\fs36\lang1033 \sbasedon0\snext27 Header 1;}{\s28\ri432\sb360\sa240\keep \b\f10\fs36\lang1033 \sbasedon27\snext28 Header 2;}{\s29\ri432 \f11\fs60\lang1033 \sbasedon0\snext29 Chapt. Title;}{
\s30\ri432\sb360\sa240\keep \b\f8\fs28\lang1033 \sbasedon28\snext30 Header 3;}{\s31\li2880\ri432\sb240\sa600 \b\f11\fs48\cf6\lang1033 \sbasedon29\snext31 Section Title;}{\s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 
\f7\fs22\lang1033 \sbasedon22\snext32 Description Head;}{
\s33\fi-1440\li1440\ri432\sb240\tqr\tx1260\tx1440\tlul\tx1728\tx1890\tqr\tlul\tx1980\tlul\tx2304\tqr\tlul\tx2592\tlul\tx2880\tqc\tlul\tx3168\tx3240\tx3456\tqr\tx3600\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 
\sbasedon26\snext33 Computer Head;}{\s34\ri432 \f11\fs48\expnd-7\lang1033 \sbasedon29\snext34 Chapt. Title Num;}{\s35\fi-2160\li2160\ri432\sb240\sa600\tx2160 \b\f11\fs48\cf6\lang1033 \sbasedon31\snext35 Section Title 2;}{
\s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \sbasedon22\snext36 Bullet;}{\s37\fi-1267\li1440\ri288\sa144\brdrb\brdrs\brdrw30\brsp20 \tqr\tx540\tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 
\sbasedon23\snext37 ColTitle Head;}{\s38\fi-1440\li1440\ri432\sb240\tqr\tx1260\tqr\tx1350\tx1440\tx2736\tx3024\tx3456\tx5184 \b\f12\fs18\lang1033 \sbasedon32\snext38 Field Head;}{\s39\qr\ri432\keep\tx1728\tx1980 \b\f8\fs18\lang1033 
\sbasedon0\snext39 Header 4;}{\s40\fi-1530\li990\ri432\sb240\tx720\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \sbasedon32\snext40 Bullet Head;}{\s41\li720\ri14\sb240\sa120\keepn \b\f3\fs28\cf2\lang1033 
\sbasedon2\snext41 Help Topic Heading 2;}{\s42\ri432\sb240\sa240\keepn \b\f3\fs28\cf2\lang1033 \sbasedon0\snext0 Help Popup Heading;}{\s43\li1440\sb240\sa120 \b\f3\fs28\cf2\lang1033 \sbasedon2\snext43 Alphabet Heading;}{
\s44\fi-3456\li3456\ri432\sa72\keep\tx1728\tx3456\tx5184 \f7\fs22\lang1033 \sbasedon24\snext44 ThreeColumn2;}}{\info{\author John Christensen}{\doccomm <project = e:\\helpalm\\wholealm.hpj>}{\operator John Christensen}{\creatim\yr1994\mo8\dy24\hr15\min42}
{\revtim\yr1994\mo11\dy28\hr12\min4}{\version6}{\edmins232}{\nofpages618}{\nofwords127000}{\nofchars724483}{\vern16433}}\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\gutter0 \widowctrl\ftnbj {\*\template E:\\WINWORD\\HLPBRZ.DOT}\sectd 
\pgnrestart\linex0\colsx0\endnhere {\header \pard\plain \qr\sb120\brdrb\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f3\fs20\lang1033 {\f80\fs18 AppWare Bus APIs
\par }}\pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_contents}{\*\bkmkend idx_contents}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_contents}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Contents}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Contents}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} DB(`btn_up')}} Contents
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\ul\cf11 About this Book}{\v\cf1 idx_about_this_book}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {
\cf1 gotobutton idx_about_this_b}{\cf1 ook}}{\fldrslt }}{\cf1 
\par }{\uldb\cf11 Chapter 1}{\v idx_chapter_1}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1 gotobutton idx_chapter_1}}{\fldrslt }}{\cf1 
\tab }- Overview
\par {\uldb\cf11 Chapter 2}{\v idx_chapter_2}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_chapter_2}}{\fldrslt }}{\cf1 \tab }
- Constructing Object Types
\par {\uldb\cf11 Chapter 3}{\v idx_chapter_3}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_chapter_3}}{\fldrslt }}{\cf1 \tab }
- Constructing Functions
\par {\uldb\cf11 Chapter 4}{\v idx_chapter_4}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_chapter_4}}{\fldrslt }}{\cf1 \tab }
- Events and the Event Queue
\par {\uldb\cf11 Chapter 5}{\v idx_chapter_}{\v 5}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 gotobutton idx_chapter_5}}{\fldrslt }}\tab 
- Protocols
\par {\uldb\cf11 Chapter 6}{\v idx_chapter_6}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 gotobutton idx_chapter_6}}{\fldrslt }}{\cf6 
\tab }- Supporting the UPSF Format
\par {\uldb\cf11 Chapter 7}{\v idx_chapter_7}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 gotobutton idx_chapter_7}}{\fldrslt }}\tab 
- The ALM Builder Utility
\par {\uldb\cf11 Chapter 8}{\v idx_chapter_8}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 gotobutton idx_chapter_8}}{\fldrslt }}{\cf6  
\tab }- AppWare Bus APIs for Microsoft Windows
\par {\uldb\cf11 Chapter 9}{\v idx_object_apis_and_pro}{\v tocols}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_object_apis_and_}}{\fldrslt }}
{\cf1 \tab }- Object APIs and Protocols
\par {\uldb\cf11 Chapter 10}{\v idx_window_item_protocol}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_window_item_prot}}{\fldrslt }}{\cf1 
\tab }- Window Item Protocol
\par {\uldb\cf11 Appendix A}{\v idx_appendix_a}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_appendix_a}}{\fldrslt }}{\cf1 \tab }
- ALM Human Interface Guidelines
\par {\uldb\cf11 Appendix B}{\v idx_appendix_b}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 gotobutton idx_appendix_b}}{\fldrslt }}{\cf6 
\tab }- Debugging Support
\par {\uldb\cf11 Appendix C}{\v idx_appendix_c}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_appendix_c}}{\fldrslt }}{\cf6  \tab }
- ALM Utility Functions
\par \pard \s21\li720\ri432 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\*\bkmkstart idx_appware_alm_buil}{\*\bkmkend idx_appware_alm_buil}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_appware_alm_builder_help_index} ${\footnote \pard\plain 
\s245 \f3\fs20\lang1033 {\fs16\up6 $} AppWare ALM Builder Help Index} K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AppWare ALM Builder Help Index} !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} DB(`btn_up')}
 AppWare ALM Builder Help Index
\par \pard\plain \s4\li360\sb120 \f6\fs20\lang1033 {\plain \b\f6\ul\cf11\lang1033 \{bml bitmaps\\novell2.bmp\}}{\plain \b\v\f6\lang1033 idx_about_this_book}{\field{\*\fldinst {\plain \b\f6\lang1033 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\plain \b\f6\cf6\lang1033 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\plain \b\f6\cf1\lang1033 gotobutton idx_about_this_book}}{\fldrslt }}{\plain \b\f6\cf1\lang1033 
\par }\pard \s4\li360\sb120 {\plain \b\f6\cf2\lang1033 Step-by-step Instructions:
\par }\pard\plain \li720 \f3\fs20\lang1033 {\uldb\cf11 Alphabetic Listing}{\v idx_alphabetic_listing}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_alphabetic_listi}}{\fldrslt }}{\cf1 
\par }\pard\plain \s4\li720\sb120 \f6\fs20\lang1033 {\uldb\cf11 Chapter Listing}{\v idx_contents}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton Do}{\cf6 Jump <+>}}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf1 gotobutton idx_contents}}{\fldrslt }}{\cf1 
\par }\pard \s4\li360\sb120 {\plain \b\f6\cf2\lang1033 Reference Information:
\par }\pard \s4\li720\sb120 {\uldb\cf11 AppWare Bus API's}{\v idx_appware_bus_apis}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_appware_bus_apis}}{\fldrslt }}{\cf1 
\par }{\uldb\cf11 Object APIs and Protocols}{\v idx_object_apis_and_protocols}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_object_apis_and_}
}{\fldrslt }}{\cf1 
\par }{\uldb\cf11 Window Item Protocol}{\v idx_window_item_protocol}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_window_item_prot}
}{\fldrslt }}{\cf1 
\par }{\uldb\cf11 Debugging Support}{\v idx_appendix_b}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton }{\cf6 DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_appendix_b}}{\fldrslt }}{\cf1 

\par }\pard \s4\li360\sb120 {\plain \b\f6\cf2\lang1033 Background Information:
\par }\pard \s4\li720\sb120 {\uldb\cf11 Overview}{\v idx_chapter_1}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1 gotobutton idx_chapter_1}
}{\fldrslt }}{\cf1 
\par }{\uldb\cf11 Constructing Object Types}{\v idx_chapter_2}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1 gotobutton idx_chapter_2}
}{\fldrslt }}{\cf1 
\par }{\uldb\cf11 Constructing Functions}{\v idx_chapter_3}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1 gotobutton idx_chapter_3}
}{\fldrslt }}{\cf1 
\par }{\uldb\cf11 Events and the Event Queue}{\v idx_chapter_4}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1 gotobutton idx_chapter_4}
}{\fldrslt }}{\cf1 
\par }{\uldb\cf11 Supporting}{\uldb\cf11  the UPSF Format}{\v idx_chapter_6}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1 
gotobutton idx_chapter_6}}{\fldrslt }}{\cf1 
\par }{\uldb\cf11 The ALM Builder Utility}{\v idx_chapter_7}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1 gotobutton idx_chapter_7}
}{\fldrslt }}{\cf1 
\par }{\uldb\cf11 Introduction to ALM Debugging}{\v idx_n2_introduction_to_alm_debugging}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
gotobutton idx_n2_introduction_}}{\fldrslt }}
\par {\uldb\cf11 Introduction to AppWare Bus Functions}{\v idx_n1_introduction_to_appware_bus_functions}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 gotobutton idx_n1}{\cf6 _introduction_}}{\fldrslt }}
\par {\uldb\cf11 Introduction to Protocols}{\v idx_n3_introduction_to_protocols}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
gotobutton idx_n3_introduction_}}{\fldrslt }}
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 
\par \pard\plain \s5\sb240 \b\f6\fs20\lang1033 For Help on Help, Press F1
\par \pard\plain \s4\li720\sb120 \f6\fs20\lang1033 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs36\cf2\up6\lang1033 {\*\bkmkstart idx_alphabetic_listi}{\*\bkmkend idx_alphabetic_listi}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_alphabetic_listing}} 
{\plain \f3\fs36\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Alphabetic Listing}} {\plain \f3\fs36\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Alphabetic Listing}} {\plain 
\f3\fs36\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} DB(`btn_up')}} Alphabetic Listing
\par \pard\plain \s43\li1440\sb240\sa120 \b\f3\fs28\cf2\lang1033 A  
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 AAppConvertOSTime}{\v idx_aappconvertostime}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 gotobutton idx_aappconvertostim}}{\fldrslt }}
\par {\uldb\cf11 AAppGetIcon}{\v idx_aappgeticon}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 gotobutton idx_aappgeticon}}{\fldrslt }}

\par {\uldb\cf11 AAppGetPriorityMode}{\v idx_aappgetprioritymode}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
gotobutton idx_aappgetprioritym}}{\fldrslt }}
\par {\uldb\cf11 AAppGetTime}{\v idx_aappgettime}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aappgettime}}{\fldrslt }}
\par {\uldb\cf11 AAppIsDesignTime}{\v idx_aappisdesigntime}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aappisdesigntime}}{\fldrslt }}
\par {\uldb\cf11 AAppPostShutdown}{\v idx_aapppostshutdown}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aapppostshutdown}}{\fldrslt }}
\par {\uldb\cf11 AAppSave}{\v idx_aappsave}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aappsave}}{\fldrslt }}
\par {\uldb\cf11 AAppSetPriorit}{\uldb\cf11 yMode}{\v idx_aappsetprioritymode}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aappsetprioritym}
}{\fldrslt }}
\par {\ul\cf11 About this Book}{\v\cf1 idx_about_this_book}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_about_this_book}}{\fldrslt }}{
\cf1 
\par }{\uldb\cf11 ADB_EVAL}{\v idx_adb_eval}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_adb_eval}}{\fldrslt }}
\par {\uldb\cf11 ADBG_ASSERT}{\v idx_adbg_assert}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 gotobutton idx_adbg_assert}}{\fldrslt }}

\par {\uldb\cf11 ADBG_ASSERT_E}{\v idx_adbg_assert_e}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobut}{\cf6 ton idx_adbg_assert_e}}{\fldrslt }}
\par {\uldb\cf11 ADBG_ASSERT_I}{\v idx_adbg_assert_i}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_adbg_assert_i}}{\fldrslt }}
\par {\uldb\cf11 ADBG_ASSERT_RES_E}{\v idx_adbg_assert_res_e}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_adbg_assert_res_}}{\fldrslt }}

\par {\uldb\cf11 ADBG_ASSERT_RES_I}{\v idx_n1_adbg_assert_res_i}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_n1_adbg_assert_r}}{\fldrslt }}

\par {\uldb\cf11 ADBG_ASSERT_RES_W}{\v idx_n2_adbg_assert_res_w}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_n2_adbg_assert_r}}{\fldrslt }}

\par {\uldb\cf11 ADBG_ASSE}{\uldb\cf11 RT_W}{\v idx_adbg_assert_w}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_adbg_assert_w}}{\fldrslt }}

\par {\uldb\cf11 ADBG_DEBUG}{\v idx_adbg_debug}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 gotobutton idx_adbg_debug}}{\fldrslt }}
\par {\uldb\cf11 ADBG_EVAL}{\v idx_adbg_eval}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 gotobutton idx_adbg_eval}}{\fldrslt }}
\par {\uldb\cf11 ADBG_PRINT}{\v idx_adbg_print}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 gotobutton idx_adbg_print}}{\fldrslt }}
\par {\uldb\cf11 ADBG_PRINT_E}{\v idx_adbg_print_e}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_adbg_print_e}}{\fldrslt }}
\par {\uldb\cf11 ADBG}{\uldb\cf11 _PRINT_I}{\v idx_adbg_print_i}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_adbg_print_i}}{\fldrslt }}

\par {\uldb\cf11 ADBG_PRINT_RES_E}{\v idx_adbg_print_res_e}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_adbg_print_res_e}}{\fldrslt }}
\par {\uldb\cf11 ADBG_PRINT_RES_I}{\v idx_adbg_print_res_i}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_adbg_print_res_i}}{\fldrslt }}
\par {\uldb\cf11 ADBG_PRINT_RES_W}{\v idx_adbg_print_res_w}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_adbg_print_res_w}}{\fldrslt }}
\par {\uldb\cf11 ADBG_PRINT_W}{\v idx_adbg_print_w}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_adbg_print_w}}{\fldrslt }}
\par {\uldb\cf11 ADbgPrint, ADbgPrintRes}{\v idx_adbgprint__adbgprintres}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
gotobutton idx_adbgprint__adbgp}}{\fldrslt }}
\par {\uldb\cf11 ADbgPrint}{\v idx_adbgprint}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_adbgprint}}{\fldrslt }}
\par {\uldb\cf11 ADbgPrintRes}{\v idx_adbgprintres}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_adbgprintres}}{\fldrslt }}
\par {\uldb\cf11 Administration Function Prototype}{\v idx_n1_administration_function_prototype}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+}{\cf6 >}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_n1_administratio}}{\fldrslt }}
\par {\uldb\cf11 Administration Functions}{\v idx_administration_functions}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_administration_f}
}{\fldrslt }}
\par {\uldb\cf11 Administration Messages}{\v idx_administration_messages}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_administration_m}
}{\fldrslt }}
\par {\uldb\cf11 AEVENT_CALLFUNCTION}{\v idx_aevent_callfunction}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aevent_callfunct}}{\fldrslt }}

\par {\uldb\cf11 AEVENT_OBJECTCHANGED}{\v idx_aevent_objectchanged}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton D}{\cf6 oJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aevent_objectcha}
}{\fldrslt }}
\par {\uldb\cf11 AEVENT_OBJECTTOTEXT}{\v idx_aevent_objecttotext}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aevent_objecttot}}{\fldrslt }}

\par {\uldb\cf11 AEVENT_OS_ACTIVATEAPP}{\v idx_aevent_os_activateapp}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aevent_os_activa}
}{\fldrslt }}
\par {\uldb\cf11 AEVENT_SHUTDOWN}{\v idx_aevent_shutdown}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aevent_shutdown}}{\fldrslt }}
\par {\uldb\cf11 AEVENT_SIGNAL}{\v idx_aevent_signal}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aev}{\cf6 ent_signal}}{\fldrslt }}
\par {\uldb\cf11 AEVENT_STARTUP}{\v idx_aevent_startup}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aevent_startup}}{\fldrslt }}
\par {\uldb\cf11 AEVENT_TEXTTOOBJECT}{\v idx_aevent_texttoobject}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aevent_texttoobj}}{\fldrslt }}

\par {\uldb\cf11 AEvtCallMethod}{\v idx_aevtcallmethod}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aevtcallmethod}}{\fldrslt }}
\par {\uldb\cf11 AEvtCheckForMethod}{\v idx_aevtcheckformethod}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aevtcheckformeth}}{\fldrslt }}

\par {\uldb\cf11 AEvtGetObjectChangedPrior}{\uldb\cf11 ity}{\v idx_aevtgetobjectchangedpriority}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_aevtgetobjectcha}}{\fldrslt }}
\par {\uldb\cf11 AEvtInfo}{\v idx_aevtinfo}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aevtinfo}}{\fldrslt }}
\par {\uldb\cf11 AEvtPost}{\v idx_aevtpost}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aevtpost}}{\fldrslt }}
\par {\uldb\cf11 AEvtPostSignalAtMark}{\v idx_aevtpostsignalatmark}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aevtpostsignalat}
}{\fldrslt }}
\par {\uldb\cf11 AEvtPostSignalAtTail}{\v idx_n1_aevtpostsignalattail}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macro}{\cf6 button DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_n1_aevtpostsigna}
}{\fldrslt }}
\par {\uldb\cf11 AEvtPostStandard}{\v idx_aevtpoststandard}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aevtpoststandard}}{\fldrslt }}
\par {\uldb\cf11 AFuncGetOutput}{\v idx_afuncgetoutput}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_afuncgetoutput}}{\fldrslt }}
\par {\uldb\cf11 AFuncGetOutput Example}{\v idx_afuncgetoutput_example}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_afuncgetoutput_e}
}{\fldrslt }}
\par {\uldb\cf11 AFuncGetParameter}{\v idx_afuncgetparameter}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutto}{\cf6 n idx_afuncgetparamete}
}{\fldrslt }}
\par {\uldb\cf11 AFuncGetTypedParameter}{\v idx_afuncgettypedparameter}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_afuncgettypedpar}
}{\fldrslt }}
\par {\uldb\cf11 AFuncReportResult}{\v idx_afuncreportresult}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_afuncreportresul}}{\fldrslt }}

\par {\uldb\cf11 AFuncSetParameter}{\v idx_afuncsetparameter}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_afuncsetparamete}}{\fldrslt }}

\par {\uldb\cf11 ALM Builder Utility Overview}{\v idx_alm_builder_utility_overview}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotob}{\cf6 
utton idx_alm_builder_util}}{\fldrslt }}
\par {\uldb\cf11 ALM Functions}{\v idx_alm_functions}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_alm_functions}}{\fldrslt }}
\par {\uldb\cf11 ALM Utility Function Descriptions}{\v idx_alm_utility_function_descriptions}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_alm_utility_func}}{\fldrslt }}{\cf6 
\par }{\uldb\cf11 AMemAllocate}{\v idx_amemallocate}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_amemallocate}}{\fldrslt }}
\par {\uldb\cf11 AMemFree}{\v idx_amemfree}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_amemfree}}{\fldrslt }}
\par {\uldb\cf11 AMemGetSize}{\v idx_ame}{\v mgetsize}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_amemgetsize}}{\fldrslt }}
\par {\uldb\cf11 AMemLock}{\v idx_amemlock}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_amemlock}}{\fldrslt }}
\par {\uldb\cf11 AMemSetSize}{\v idx_amemsetsize}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_amemsetsize}}{\fldrslt }}
\par {\uldb\cf11 AMemUnlock}{\v idx_amemunlock}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_amemunlock}}{\fldrslt }}
\par {\uldb\cf11 AOBJ_ASLEEP}{\v idx_aobj_asleep}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobj_asleep}}{\fldrslt }}
\par {\uldb\cf11 AOBJ_ASSIGNOBJECT}{\v idx_a}{\v obj_assignobject}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobj_assignobjec}}{\fldrslt }}

\par {\uldb\cf11 AOBJ_AWAKENED}{\v idx_aobj_awakened}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobj_awakened}}{\fldrslt }}
\par {\uldb\cf11 AOBJ_BUILDSIGNALS}{\v idx_aobj_buildsignals}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobj_buildsignal}}{\fldrslt }}

\par {\uldb\cf11 AOBJ_CHECKOBJECT}{\v idx_aobj_checkobject}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobj_checkobject}}{\fldrslt }}
\par {\uldb\cf11 AOBJ_CREATED}{\v idx_aobj_created}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutto}{\cf6 n DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobj_created}}{\fldrslt }}
\par {\uldb\cf11 AOBJ_DESTROYED}{\v idx_aobj_destroyed}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobj_destroyed}}{\fldrslt }}
\par {\uldb\cf11 AOBJ_EDITOBJECT}{\v idx_aobj_editobject}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobj_editobject}}{\fldrslt }}
\par {\uldb\cf11 AOBJ_EXPORTOBJECT}{\v idx_aobj_exportobject}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobj_exportobjec}}{\fldrslt }}

\par {\uldb\cf11 AOBJ_IMPORTOBJECT}{\v idx_aobj_importobject}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobj_importobjec}}{\fldrslt }}

\par {\uldb\cf11 AOBJ_POSTWRITE}{\v idx_aobj_postwrite}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobj_postwrite}}{\fldrslt }}
\par {\uldb\cf11 AOBJ_PREWRITE}{\v idx_aobj_prewrite}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobj_prewrite}}{\fldrslt }}
\par {\uldb\cf11 AOBJ_QUERYPROTOCOL}{\v idx_aobj_queryprotocol}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobj_queryprotoc}}{\fldrslt }}

\par {\uldb\cf11 AOBJ_READ}{\v idx_aobj_read}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobj_read}}{\fldrslt }}
\par {\uldb\cf11 AOBJ_REPORTREQUIREDFILES}{\v idx_aobj_reportrequiredfiles}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_reportrequi}
}{\fldrslt }}{\cf1 
\par }{\uldb\cf11 AOBJ_VALIDATEOBJECTIDS}{\v idx_aobj_validateobjectids}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobj_validateobj}
}{\fldrslt }}
\par {\uldb\cf11 AObjAddData}{\v idx_aobjadddata}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjadddata}}{\fldrslt }}
\par {\uldb\cf11 AObjAddRequiredFiles}{\v idx_aobjaddrequiredfiles}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjaddrequiredf}
}{\fldrslt }}{\cf1 
\par }{\uldb\cf11 AObjAssign}{\v idx_aobjassign}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobut}{\cf6 ton idx_aobjassign}}{\fldrslt }}
\par {\uldb\cf11 AObjCheckType}{\v idx_aobjchecktype}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjchecktype}}{\fldrslt }}
\par {\uldb\cf11 AObjConvertFromText}{\v idx_aobjconvertfromtext}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjconvertfromt}}{\fldrslt }}

\par {\uldb\cf11 AObjConvertToText}{\v idx_aobjconverttotext}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjconverttotex}}{\fldrslt }}

\par {\uldb\cf11 AObjCopyDatas}{\v idx_aobjcopydatas}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjcopydatas}}{\fldrslt }}{\cf1 
\par }{\uldb\cf11 AObjCreate}{\v idx_aobjcreate}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjcreate}}{\fldrslt }}
\par {\uldb\cf11 AObjCreateWithProtocol}{\v idx_aobjcreatewithprotocol}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjcreatewithpr}
}{\fldrslt }}
\par {\uldb\cf11 AObjDeleteData}{\v idx_aobjdeletedata}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjdeletedata}}{\fldrslt }}
\par {\uldb\cf11 AObjDestroy}{\v idx_aobjdestroy}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjdestroy}}{\fldrslt }}
\par {\uldb\cf11 AObjEdit}{\v idx_aobjedit}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobj}{\cf6 edit}}{\fldrslt }}
\par {\uldb\cf11 AObjGetDataCount}{\v idx_aobjgetdatacount}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjgetdatacount}}{\fldrslt }}
\par {\uldb\cf11 AObjGetDataSize}{\v idx_aobjgetdatasize}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjgetdatasize}}{\fldrslt }}
\par {\uldb\cf11 AObjGetName}{\v idx_aobjgetname}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjgetname}}{\fldrslt }}
\par {\uldb\cf11 AObjGetNextObject}{\v idx_aobjgetnextobject}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjgetnextobjec}}{\fldrslt }}

\par {\uldb\cf11 AObjGetNextOwner}{\v idx_aobjgetnextowner}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjgetnextowner}}{\fldrslt }}
\par {\uldb\cf11 AObjGetObjectCount}{\v idx_aobjgetobjectcount}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjgetobjectcou}}{\fldrslt }}

\par {\uldb\cf11 AObjGetRuntimeInfo}{\v idx_aobjgetruntimeinfo}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjgetruntimein}}{\fldrslt }}

\par {\uldb\cf11 AObjGetType}{\v idx_aobjgettype}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjgettype}}{\fldrslt }}
\par {\uldb\cf11 AObjInsertData}{\v idx_aobjinsertdata}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobut}{\cf6 ton idx_aobjinsertdata}}{\fldrslt }}

\par {\uldb\cf11 AObjLockData}{\v idx_aobjlockdata}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjlockdata}}{\fldrslt }}
\par {\uldb\cf11 AObjMessage}{\v idx_aobjmessage}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjmessage}}{\fldrslt }}
\par {\uldb\cf11 AObjOwnerInfo}{\v idx_aobjownerinfo}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjownerinfo}}{\fldrslt }}
\par {\uldb\cf11 AObjQueryProtocol}{\v idx_aobjqueryprotocol}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjqueryprotoco}}{\fldrslt }}

\par {\uldb\cf11 AObjReadDatas}{\v idx_aobjreaddatas}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjreaddatas}}{\fldrslt }}{\cf1 
\par }{\uldb\cf11 AObjRegisterOwner}{\v idx_aobjregisterowner}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjregisterowne}}{\fldrslt }}

\par {\uldb\cf11 AObjReportError}{\v idx_aobjreporterror}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjreporterror}}{\fldrslt }}
\par {\uldb\cf11 AObjResizeData}{\v idx_aobjresizedata}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjresizedata}}{\fldrslt }}
\par {\uldb\cf11 AObjRestoreDatas}{\v idx_aobjrestoredatas}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton i}{\cf1 dx_aobjrestoredatas}}{\fldrslt }}
{\cf1 
\par }{\uldb\cf11 AObjSetData}{\v idx_aobjsetdata}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjsetdata}}{\fldrslt }}
\par {\uldb\cf11 AObjSetDataCount}{\v idx_aobjsetdatacount}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjsetdatacount}}{\fldrslt }}
\par {\uldb\cf11 AObjSetName}{\v idx_aobjsetname}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjsetname}}{\fldrslt }}
\par {\uldb\cf11 AObjSetRuntimeInfo}{\v idx_aobjsetruntimeinfo}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjsetruntimein}}{\fldrslt }}

\par {\uldb\cf11 AObjSignalRecord}{\v idx_aobjsignalrecord}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjsignalrecord}}{\fldrslt }}
\par {\uldb\cf11 AObjUnlockData}{\v idx_aobjunlockdata}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjunlockdata}}{\fldrslt }}
\par {\uldb\cf11 AObjUnregisterOwner}{\v idx_aobjunregisterowner}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjunregisterow}}{\fldrslt }}

\par {\uldb\cf11 AObjValidateID}{\v idx_aobjvalidateid}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjvalidateid}}{\fldrslt }}
\par {\uldb\cf11 AObjWriteDatas}{\v idx_aobjwritedatas}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 g}{\cf1 otobutton idx_aobjwritedatas}}{\fldrslt }}{\cf1 

\par }{\uldb\cf11 Appendix A}{\v idx_appendix_a}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_appendix_a}}{\fldrslt }}
\par {\uldb\cf11 Appendix B}{\v idx_appendix_b}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 gotobutton idx_appendix_b}}{\fldrslt }}
\par {\uldb\cf11 Appendix C}{\v idx_appendix_c}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_appendix_c}}{\fldrslt }}{\cf6  }
\par {\uldb\cf11 Application-activation Event}{\v idx_application_activation_event}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_application_acti}}{\fldrslt }}
\par {\uldb\cf11 AppWare Bus APIs}{\v idx_appware_bus_ap}{\v is}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_appware_bus_apis}}{\fldrslt }}

\par {\uldb\cf11 AppWare Bus Applications}{\v idx_appware_bus_applications}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_appware_bus_appl}
}{\fldrslt }}
\par {\uldb\cf11 AppWare Bus Data Structure Definitions}{\v idx_n1_appware_bus_data_structure_definitions}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_n1_appware_bus_d}}{\fldrslt }}
\par {\uldb\cf11 AppWare Bus Data Types}{\v idx_appware_bus_data_types}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
gotobutton idx_appware_bus_da}{\cf6 ta}}{\fldrslt }}
\par {\uldb\cf11 AppWare Bus Event Descriptions}{\v idx_n1_appware_bus_event_descriptions}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_n1_appware_bus_e}}{\fldrslt }}
\par {\uldb\cf11 AppWare Bus Events}{\v idx_appware_bus_events}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_appware_bus_even}}{\fldrslt }}

\par {\uldb\cf11 AppWare Bus Function Categories}{\v idx_n1_appware_bus_function_categories}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_n1_appware_bus_f}}{\fldrslt }}
\par {\uldb\cf11 AppWare Bus Function Types}{\v idx_appware_bus_function_types}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 m}{\cf6 acrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_appware_bus_func}}{\fldrslt }}
\par {\uldb\cf11 AppWare Bus Functions}{\v idx_n2_appware_bus_functions}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_n2_appware_bus_f}
}{\fldrslt }}
\par {\uldb\cf11 AppWare Bus Macros}{\v idx_appware_bus_macros}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_appware_bus_macr}}{\fldrslt }}

\par {\uldb\cf11 AppWare Bus Memory Management}{\v idx_appware_bus_memory_management}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_appware_bus_memo}}{\fldrslt }}
\par {\uldb\cf11 AppWare Events}{\v idx_appw_events}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 m}{\cf6 acrobutton DoJump <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1 gotobutton idx_appw_events}
}{\fldrslt }}{\cf1 
\par }{\uldb\cf11 AppWare Loadable Modules}{\v idx_appware_loadable_modules}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_appware_loadable}
}{\fldrslt }}
\par {\uldb\cf11 AppWare Signals}{\v idx_apw_signals}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1 gotobutton idx_apw_signals}}{\fldrslt }}
{\cf1 
\par }{\uldb\cf11 APQueryInfo}{\v idx_apqueryinfo}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_apqueryinfo}}{\fldrslt }}
\par {\uldb\cf11 ATypeAddData}{\v idx_atypeadddata}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_atypeadddata}}{\fldrslt }}
\par {\uldb\cf11 ATypeD}{\uldb\cf11 eleteData}{\v idx_atypedeletedata}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_atypedeletedata}
}{\fldrslt }}
\par {\uldb\cf11 ATypeGetCount}{\v idx_atypegetcount}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_atypegetcount}}{\fldrslt }}
\par {\uldb\cf11 ATypeGetCountCfg}{\v idx_atypegetcountcfg}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_atypegetcountcfg}}{\fldrslt }}
\par {\uldb\cf11 ATypeGetDataCount}{\v idx_atypegetdatacount}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_atypegetdatacoun}}{\fldrslt }}

\par {\uldb\cf11 ATypeGetDataSize}{\v idx_atypegetdatasize}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_atypegetdatasize}}{\fldrslt }}
\par {\uldb\cf11 ATypeGetIcon}{\v idx_atypegeticon}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_atypegeticon}}{\fldrslt }}
\par {\uldb\cf11 ATypeGetName}{\v idx_atypegetname}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_atypegetname}}{\fldrslt }}
\par {\uldb\cf11 ATypeGetNext}{\v idx_atypegetnext}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_atypegetnext}}{\fldrslt }}
\par {\uldb\cf11 ATypeGetNextCfg}{\v idx_atypegetnextcfg}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_atypegetnextcfg}}{\fldrslt }}
\par {\uldb\cf11 ATypeGet}{\uldb\cf11 RuntimeInfo}{\v idx_atypegetruntimeinfo}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_atypegetruntimei}
}{\fldrslt }}
\par {\uldb\cf11 ATypeInsertData}{\v idx_atypeinsertdata}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_atypeinsertdata}}{\fldrslt }}
\par {\uldb\cf11 ATypeLockData}{\v idx_atypelockdata}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_atypelockdata}}{\fldrslt }}
\par {\uldb\cf11 ATypeQueryProtocol}{\v idx_atypequeryprotocol}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_atypequeryprotoc}}{\fldrslt }}

\par {\uldb\cf11 ATypeResizeData}{\v idx_atyperesizedata}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_atyperesizedata}}{\fldrslt }}
\par {\uldb\cf11 ATypeSetData}{\v idx_atypesetdata}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_atypesetdata}}{\fldrslt }}
\par {\uldb\cf11 ATypeSetDataCount}{\v idx_atypesetdatacount}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_atypesetdatacoun}}{\fldrslt }}

\par {\uldb\cf11 ATypeSetRuntimeInfo}{\v idx_atypesetruntimeinfo}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_atypesetruntimei}}{\fldrslt }}

\par {\uldb\cf11 ATypeUnlockData}{\v idx_atypeunlockdata}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobu}{\cf6 tton idx_atypeunlockdata}}{\fldrslt }}

\par {\uldb\cf11 Audience Level}{\v idx_audience_level}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_audience_level}}{\fldrslt }}
\par {\uldb\cf11 AUpsfCloseScope}{\v idx_aupsfclosescope}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aupsfclosescope}}{\fldrslt }}
\par {\uldb\cf11 AUpsfCreateScope}{\v idx_aupsfcreatescope}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aupsfcreatescope}}{\fldrslt }}
\par {\uldb\cf11 AUpsfExportField}{\v idx_aupsfexportfield}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aupsfexportfield}}{\fldrslt }}
\par {\uldb\cf11 AUpsfFieldCount}{\v idx}{\v _aupsffieldcount}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aupsffieldcount}}{\fldrslt }}

\par {\uldb\cf11 AUpsfFieldInfo}{\v idx_aupsffieldinfo}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aupsffieldinfo}}{\fldrslt }}
\par {\uldb\cf11 AUpsfImportField}{\v idx_aupsfimportfield}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aupsfimportfield}}{\fldrslt }}
\par {\uldb\cf11 AUpsfLogComment}{\v idx_aupsflogcomment}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aupsflogcomment}}{\fldrslt }}
\par {\uldb\cf11 AUpsfOpenScope}{\v idx_aupsfopenscope}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutt}{\cf6 on DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aupsfopenscope}}{\fldrslt }}

\par {\uldb\cf11 AUtlCreateBrushIndirect}{\v idx_autlcreatebrushindirect}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_autlcreatebrushi}
}{\fldrslt }}
\par {\uldb\cf11 AUtlCreateFontIndirect}{\v idx_autlcreatefontindirect}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_autlcreatefontin}
}{\fldrslt }}
\par {\uldb\cf11 AUtlCreateSolidBrush}{\v idx_autlcreatesolidbrush}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_autlcreatesolidb}
}{\fldrslt }}
\par {\uldb\cf11 AUtlDeleteBrush}{\v idx_autldeletebrush}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJ}{\cf6 ump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_autldeletebrush}}{\fldrslt }}

\par {\uldb\cf11 AUtlDeleteFont}{\v idx_autldeletefont}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_autldeletefont}}{\fldrslt }}
\par \pard\plain \s43\li1440\sb240\sa120 \b\f3\fs28\cf2\lang1033 B 
\par C 
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Call-function Event}{\v idx_call_function_event}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {
\cf6 gotobutton idx_call_function_ev}}{\fldrslt }}
\par {\uldb\cf11 Chapter 1}{\v idx_chapter_1}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_chapter_1}}{\fldrslt }}{\cf1 
\par }{\uldb\cf11 Chapter 10}{\v idx_window_item_protocol}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_window_item_prot}}{\fldrslt }}
\par {\uldb\cf11 Chapter 2}{\v idx_chapter_2}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_chapter_2}}{\fldrslt }}{\cf1 
\par }{\uldb\cf11 Chapter 3}{\v idx_chapter_3}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_chapter_3}}{\fldrslt }}{\cf1 
\par }{\uldb\cf11 Chapter 4}{\v idx_chapter_4}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_chapter_4}}{\fldrslt }}{\cf1 
\par }{\uldb\cf11 Chapter 5}{\v idx_chapter_5}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 gotobutton idx_chapter_5}}{\fldrslt }}\tab 

\par {\uldb\cf11 Chapter 6}{\v idx_chapter_6}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 gotobutton idx_chapter_6}}{\fldrslt }}{\cf6 
\tab }
\par {\uldb\cf11 Chapter 7}{\v idx_chapter_7}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 gotobutton idx_chapter_7}}{\fldrslt }}\tab 

\par {\uldb\cf11 Chapter 8}{\v idx_chapter_8}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 gotobutton idx_chapter_8}}{\fldrslt }}{\cf6  }

\par {\uldb\cf11 Chapter 9}{\v idx_object_apis_and_protocols}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_object_apis_and_}}{\fldrslt }}{
\cf1 \tab }
\par {\uldb\cf11 Class-based Protocols}{\v idx_class_based_protocols}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_class_based_prot}
}{\fldrslt }}
\par {\uldb\cf11 Compilation Options}{\v idx_compilation_options}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 g}{\cf6 
otobutton idx_compilation_opti}}{\fldrslt }}
\par {\uldb\cf11 Creating}{\v idx_creating}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_creating}}{\fldrslt }}
\par {\uldb\cf11 Custom-event Creation}{\v idx_custom_event_creation}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_custom_event_cre}
}{\fldrslt }}
\par \pard\plain \s43\li1440\sb240\sa120 \b\f3\fs28\cf2\lang1033 D 
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Data and Memory Management}{\v idx_data_and_memory_management}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf6 gotobutton idx_data_and_memory_}}{\fldrslt }}
\par {\uldb\cf11 Data Persistence}{\v idx_data_persistence}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_data_persist}{\cf6 ence}}{\fldrslt }}

\par \pard \s21\li720\ri-90 {\uldb\cf11 Debugging DLL Procedures and Macros}{\v idx_debugging_dll_procedures_and_macros}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 gotobutton idx_debugging_dll_pr}}{\fldrslt }}
\par \pard \s21\li720\ri432 {\uldb\cf11 Debugging Support}{\v idx_debugging_support}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_debugging_suppor}}{\fldrslt }}
\par {\uldb\cf11 Defining Class-based Protocols}{\v idx_defining_class_based_protocols}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_defining_class_b}}{\fldrslt }}
\par {\uldb\cf11 Delayed Event Posting}{\v idx_delayed_event_posting}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutt}{\cf6 on DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_delayed_event_po}
}{\fldrslt }}
\par {\uldb\cf11 Design Issues}{\v idx_design_issues}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 gotobutton idx_design_issues}
}{\fldrslt }}
\par {\uldb\cf11 Design-time Objects}{\v idx_design_time_objects}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_design_time_obje}}{\fldrslt }}

\par {\uldb\cf11 Direct Invocation of Event Handlers}{\v idx_direct_invocation_of_event_handlers}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_direct_invocatio}}{\fldrslt }}
\par {\uldb\cf11 Duplicate Event Removal}{\v idx_duplicate_event_removal}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_duplicate_event_}
}{\fldrslt }}
\par \pard\plain \s43\li1440\sb240\sa120 \b\f3\fs28\cf2\lang1033 E 
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Editing}{\v idx_editing}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_editing}
}{\fldrslt }}
\par {\uldb\cf11 Errors and Warnings}{\v idx_errors_and_warnings}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
gotobutton idx_errors_and_warni}}{\fldrslt }}
\par {\uldb\cf11 Event and Signal APIs}{\v idx_event_and_signal_apis}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_event_and_signal}
}{\fldrslt }}
\par {\uldb\cf11 Event Editing}{\v idx_event_editing}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_event_}{\cf6 editing}}{\fldrslt }}
\par {\uldb\cf11 Event Handlers}{\v idx_event_handlers}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_event_handlers}}{\fldrslt }}
\par {\uldb\cf11 Event IDs}{\v idx_event_ids}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_event_ids}}{\fldrslt }}
\par {\uldb\cf11 Event Insertion}{\v idx_event_insertion}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_event_insertion}}{\fldrslt }}
\par {\uldb\cf11 Event Priority}{\v idx_event_priority}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_event_priority}}{\fldrslt }}
\par {\uldb\cf11 Event Processing}{\v idx_event_processing}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 m}{\cf6 acrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_event_processing}}{\fldrslt }}

\par {\uldb\cf11 Event Queue Operation}{\v idx_event_queue_operation}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_event_queue_oper}
}{\fldrslt }}
\par {\uldb\cf11 Event Removal}{\v idx_event_removal}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_event_removal}}{\fldrslt }}
\par {\uldb\cf11 Event Removal}{\v idx_n1_event_removal}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_n1_event_removal}}{\fldrslt }}
\par {\uldb\cf11 Event-based Protocols}{\v idx_event_based_protocols}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotob}{\cf6 utton idx_event_based_prot}
}{\fldrslt }}
\par {\uldb\cf11 Event-posting Protocol}{\v idx_event_posting_protocol}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_event_posting_pr}
}{\fldrslt }}
\par {\uldb\cf11 Events and Microsoft Windows Messages}{\v idx_events_and_microsoft_windows_messages}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_events_and_micro}}{\fldrslt }}
\par {\uldb\cf11 Exporting Data Types}{\v idx_exporting_data_types}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_exporting_data_t}
}{\fldrslt }}
\par {\uldb\cf11 Exporting Fields}{\v idx_exporting_fields}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 mac}{\cf6 robutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_exporting_fields}}{\fldrslt }}

\par \pard\plain \s43\li1440\sb240\sa120 \b\f3\fs28\cf2\lang1033 F 
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Flows and Function Chains}{\v idx_flows_and_function_chains}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf6 gotobutton idx_flows_and_functi}}{\fldrslt }}
\par {\uldb\cf11 Function Configuration}{\v idx_function_configuration}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_function_configu}
}{\fldrslt }}
\par {\uldb\cf11 Function Editing}{\v idx_function_editing}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_function_editing}}{\fldrslt }}
\par {\uldb\cf11 Function Errors}{\v idx_function_errors}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobu}{\cf6 tton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_function_errors}}{\fldrslt }}

\par {\uldb\cf11 Function Execution}{\v idx_function_execution}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_function_executi}}{\fldrslt }}

\par {\uldb\cf11 Function Flows}{\v idx_function_flows}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_function_flows}}{\fldrslt }}
\par {\uldb\cf11 Function Flows (Guidelines)}{\v idx_n1_function_flows}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_n1_function_flow}
}{\fldrslt }}
\par {\uldb\cf11 Function IDs}{\v idx_function_ids}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_fun}{\cf6 ction_ids}}{\fldrslt }}
\par {\uldb\cf11 Function Parameters}{\v idx_n1_function_parameters}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_n1_function_para}
}{\fldrslt }}
\par {\uldb\cf11 Function Parameters}{\v idx_function_parameters}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_function_paramet}}{\fldrslt }}

\par {\uldb\cf11 Functions (Guidelines)}{\v idx_functions}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_functions}}{\fldrslt }}
\par \pard\plain \s43\li1440\sb240\sa120 \b\f3\fs28\cf2\lang1033 G 
\par H 
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Hidden Object Types}{\v idx_hidden_object_types}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {
\cf6 gotobutton idx_hidden_object_ty}}{\fldrslt }}
\par \pard\plain \s43\li1440\sb240\sa120 \b\f3\fs28\cf2\lang1033 I 
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Icon Design}{\v idx_icon_design}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_icon_design}}{\fldrslt }}
\par {\uldb\cf11 Importing Data Types}{\v idx_importing_data_types}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_importing_data_t}
}{\fldrslt }}
\par {\uldb\cf11 Importing Fields}{\v idx_importing_fields}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_importing_fields}}{\fldrslt }}
\par {\uldb\cf11 Input Constants}{\v idx_input_constants}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_input_constants}}{\fldrslt }}
\par {\uldb\cf11 Input Parameters}{\v idx_input_parameters}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_input_parameters}}{\fldrslt }}
\par {\uldb\cf11 Input Parameters (Guidelines)}{\v idx_n1_input_parameters}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_n1_input_paramet}
}{\fldrslt }}
\par {\uldb\cf11 Input Retrieval}{\v idx_input_retrieval}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_input_retrieval}}{\fldrslt }}
\par {\uldb\cf11 Introduction to ALM Debugging}{\v idx_n2_introduction_to_alm_debugging}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
gotobutton idx_n2_introduction_}}{\fldrslt }}
\par {\uldb\cf11 Introduction to AppWare Bus Functions}{\v id}{\v x_n1_introduction_to_appware_bus_functions}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_n1_introduction_}}{\fldrslt }}
\par {\uldb\cf11 Introduction to Protocols}{\v idx_n3_introduction_to_protocols}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_n3_introduction_
}}{\fldrslt }}
\par \pard\plain \s43\li1440\sb240\sa120 \b\f3\fs28\cf2\lang1033 J 
\par K 
\par L 
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Layouts for Object-editing Dialogs}{\v idx_layouts_for_object_editing_dialogs}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}
}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_layouts_for_obje}}{\fldrslt }}
\par {\uldb\cf11 List of ALM Utility Functions}{\v idx_list_of_alm_utility_functions}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
gotobutton idx_list_of_alm_util}}{\fldrslt }}
\par {\uldb\cf11 Locking Data Blocks}{\v idx_locking_data_blocks}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_locking_data_blo}}{\fldrslt }}

\par \pard\plain \s43\li1440\sb240\sa120 \b\f3\fs28\cf2\lang1033 M 
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Memory Blocks}{\v idx_memory_blocks}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_memory_blocks}}{\fldrslt }}
\par {\uldb\cf11 Miscellaneous AppWare Bus Functions}{\v idx_miscellaneous_appware_bus_functions}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_miscellaneous_ap}}{\fldrslt }}
\par \pard\plain \s43\li1440\sb240\sa120 \b\f3\fs28\cf2\lang1033 N 
\par O 
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Object data}{\v idx_object_data}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_object_data}}{\fldrslt }}
\par {\uldb\cf11 Object Data-block Management}{\v idx_object_data_block_management}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_object_data_bloc}}{\fldrslt }}
\par {\uldb\cf11 Object Identifiers}{\v idx_object_identifiers}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_object_identifie}}{\fldrslt }}

\par {\uldb\cf11 Object Ownership}{\v idx_object_ownership}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_object_ownership}}{\fldrslt }}
\par \pard \s21\li720 {\uldb\cf11 Object Type Data-block Management}{\v idx_object_type_data_block_manage}{\v ment}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {
\cf6 gotobutton idx_object_type_data}}{\fldrslt }}
\par \pard \s21\li720\ri432 {\uldb\cf11 Object Type IDs}{\v idx_object_type_ids}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_object_type_ids}
}{\fldrslt }}
\par {\uldb\cf11 Object Types}{\v idx_object_types}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_object_types}}{\fldrslt }}
\par {\uldb\cf11 Object Versions and the Read Message}{\v idx_object_versions_and_the_read_message}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_object_versions_}}{\fldrslt }}
\par {\uldb\cf11 Object-changed Event}{\v idx_object_changed_even}{\v t}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_object_changed_e}
}{\fldrslt }}
\par {\uldb\cf11 Object-type Configuration}{\v idx_object_type_configuration}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_object_type_conf}
}{\fldrslt }}
\par {\uldb\cf11 Object-type Editing}{\v idx_object_type_editing}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_object_type_edit}}{\fldrslt }}

\par {\uldb\cf11 Objects}{\v idx_objects}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_objects}}{\fldrslt }}
\par {\uldb\cf11 Objects and Object Types}{\v idx_objects_and_object_types}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_objects_and_obje}
}{\fldrslt }}
\par {\uldb\cf11 Online Help}{\v idx_online_help}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_online_help}}{\fldrslt }}
\par {\uldb\cf11 Opening the Configuration Dialog}{\v idx_opening_the_configuration_dialog}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_opening_the_conf}}{\fldrslt }}
\par {\uldb\cf11 Operations}{\v idx_operations}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_operations}}{\fldrslt }}
\par {\uldb\cf11 Output Parameters}{\v idx_output_parameters}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutt}{\cf6 on idx_output_parameter}
}{\fldrslt }}
\par {\uldb\cf11 Output Parameters (Guidelines)}{\v idx_n1_output_parameters}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_n1_output_parame}
}{\fldrslt }}
\par {\uldb\cf11 Overview of Functions}{\v idx_overview_of_functions}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_overview_of_func}
}{\fldrslt }}
\par {\uldb\cf11 Overview of Object Types}{\v idx_overview_of_object_types}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_overview_of_obje}
}{\fldrslt }}
\par \pard\plain \s43\li1440\sb240\sa120 \b\f3\fs28\cf2\lang1033 P 
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Parameter Attributes}{\v idx_parameter_attributes}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton }{\cf6 DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf6 gotobutton idx_parameter_attrib}}{\fldrslt }}
\par {\uldb\cf11 Parameter Indexes}{\v idx_parameter_indexes}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_parameter_indexe}}{\fldrslt }}

\par {\uldb\cf11 Parameter Organization}{\v idx_parameter_organization}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_parameter_organi}
}{\fldrslt }}
\par {\uldb\cf11 Posting Events in the Event Record}{\v idx_posting_events_in_the_event_record}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_posting_events_i}}{\fldrslt }}
\par {\uldb\cf11 Posting Priority}{\v idx_posting_priority}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_posting_priority}}{\fldrslt }}
\par {\uldb\cf11 Posting the Object-changed Event}{\v idx_posting_the_object_changed_event}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_posting_the_obje}}{\fldrslt }}
\par \pard\plain \s43\li1440\sb240\sa120 \b\f3\fs28\cf2\lang1033 Q 
\par R 
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Range Limiting}{\v idx_range_limiting}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_range_limiting}}{\fldrslt }}
\par {\uldb\cf11 Removing}{\v idx_removing}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_removing}}{\fldrslt }}
\par {\uldb\cf11 Required Object Types}{\v idx_required_object_types}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton Do}{\cf6 Jump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_required_object_}
}{\fldrslt }}
\par {\uldb\cf11 Responding to Events}{\v idx_responding_to_events}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_responding_to_ev}
}{\fldrslt }}
\par {\uldb\cf11 Responding to the Object-changed Event}{\v idx_responding_to_the_object_changed_event}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_responding_to_th}}{\fldrslt }}
\par {\uldb\cf11 Return Values}{\v idx_return_values}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_return_values}}{\fldrslt }}
\par {\uldb\cf11 Routing}{\v idx_routing}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 g}{\cf6 otobutton idx_routing}}{\fldrslt }}
\par {\uldb\cf11 Runtime Control of Debugging Information}{\v idx_runtime_control_of_debugging_information}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 gotobutton idx_runtime_control_}}{\fldrslt }}
\par {\uldb\cf11 Runtime Data}{\v idx_runtime_data}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_runtime_data}}{\fldrslt }}
\par {\uldb\cf11 Runtime Objects}{\v idx_runtime_objects}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_runtime_objects}}{\fldrslt }}
\par {\uldb\cf11 Runtime Persistence}{\v idx_runtime_persistence}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobut}{\cf6 ton idx_runtime_persiste}
}{\fldrslt }}
\par \pard\plain \s43\li1440\sb240\sa120 \b\f3\fs28\cf2\lang1033 S 
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Setting Outputs}{\v idx_setting_outputs}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_setting_outputs}}{\fldrslt }}
\par {\uldb\cf11 Shutdown Event}{\v idx_shutdown_event}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_shutdown_event}}{\fldrslt }}
\par {\uldb\cf11 Signal Event}{\v idx_signal_event}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_signal_event}}{\fldrslt }}
\par {\uldb\cf11 Signals}{\v idx_n1_signals}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_n1_signals}}{\fldrslt }}
\par {\uldb\cf11 Startup Event}{\v idx_startup_event}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_startup_event}}{\fldrslt }}
\par {\uldb\cf11 System Events}{\v idx_system_events}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_system_events}}{\fldrslt }}
\par \pard\plain \s43\li1440\sb240\sa120 \b\f3\fs28\cf2\lang1033 T 
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Temporary Objects}{\v idx_temporary_objects}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_temporary_object}}{\fldrslt }}
\par {\uldb\cf11 Text-interchange Events}{\v idx_text_interchange_events}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_text_interchange}
}{\fldrslt }}
\par {\uldb\cf11 The Administration Function}{\v idx_the_administration_function}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_the_administrati}}{\fldrslt }}
\par {\uldb\cf11 The ALM Builder Utility}{\v idx_the_alm_builder_utility}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_the_alm_builder_}
}{\fldrslt }}
\par {\uldb\cf11 The AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_the_appware_bus}}{\fldrslt }}
\par {\uldb\cf11 The Awake and Asleep Messages}{\v idx_the_awake_and_asleep_messages}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_the_awake_and_as}}{\fldrslt }}
\par {\uldb\cf11 The Check Object Message}{\v idx_the_check_object_message}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_the_check_object}
}{\fldrslt }}
\par {\uldb\cf11 The Configuration File}{\v idx_the_configuration_file}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_the_configuratio}
}{\fldrslt }}
\par {\uldb\cf11 The Create and Destroy Messages}{\v idx_the_create_and_destroy_messages}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_the_create_and_d}}{\fldrslt }}
\par {\uldb\cf11 The details and the modifiers Fields}{\v idx_the_details_and_the_modifiers_fields}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_the_details_and}{\cf6 _}}{\fldrslt }}
\par {\uldb\cf11 The Edit Object Message}{\v idx_the_edit_object_message}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_the_edit_object_}
}{\fldrslt }}
\par {\uldb\cf11 The Event System}{\v idx_the_event_system}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_the_event_system}}{\fldrslt }}
{\field{\*\fldinst {\cf6 gotobutton idx_the_function_ent}}{\fldrslt }}
\par {\uldb\cf11 The Function Entry Point}{\v idx_n1_the_function_entry_point}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_n1_the_function_}
}{\fldrslt }}
\par {\uldb\cf11 The how Field}{\v idx_the_how_field}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobu}{\cf6 tton idx_the_how_field}}{\fldrslt }}
\par {\uldb\cf11 The Import and Export Messages}{\v idx_the_import_and_export_messages}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_the_import_and_e}}{\fldrslt }}
\par {\uldb\cf11 The Message Record}{\v idx_the_message_record}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_the_message_reco}}{\fldrslt }}

\par {\uldb\cf11 The Object Assignment Message}{\v idx_the_object_assignment_message}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_the_object_assig}}{\fldrslt }}
\par {\uldb\cf11 The Prewrite and Postwrite Messages}{\v idx_the_prewrite_and_postwrite_messag}{\v es}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_the_prewrite_and}}{\fldrslt }}
\par {\uldb\cf11 The Query Protocol Message (Implementation of)}{\v idx_the_query_protocol_message}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_the_query_protoc}}{\fldrslt }}
\par {\uldb\cf11 The Query Protocol Message (Responding to)}{\v idx_n1_the_query_protocol_message}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_n1_the_query_pro}}{\fldrslt }}
\par {\uldb\cf11 The sourceObject Field}{\v idx_the_sourceobject_field}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton id}{\cf6 x_the_sourceobject}
}{\fldrslt }}
\par {\uldb\cf11 The targetObject Field}{\v idx_the_targetobject_field}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_the_targetobject}
}{\fldrslt }}
\par {\uldb\cf11 The Validate Object IDs Message}{\v idx_the_validate_object_ids_message}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_the_validate_obj}}{\fldrslt }}
\par {\uldb\cf11 The variation Field}{\v idx_the_variation_field}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_the_variation_fi}}{\fldrslt }}

\par {\uldb\cf11 The what Field}{\v idx_the_what_field}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotob}{\cf6 utton idx_the_what_field}}{\fldrslt }}

\par {\uldb\cf11 The when Field}{\v idx_the_when_field}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_the_when_field}}{\fldrslt }}
\par {\uldb\cf11 Type Data}{\v idx_type_data}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_type_data}}{\fldrslt }}
\par {\uldb\cf11 Types and Structure Definitions}{\v idx_types_and_structure_definitions}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_types_and_struct}}{\fldrslt }}
\par \pard\plain \s43\li1440\sb240\sa120 \b\f3\fs28\cf2\lang1033 U 
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 UPSF Administration Function Example}{\v idx_upsf_administration_function_example}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <}{
\cf6 +>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_upsf_administrat}}{\fldrslt }}
\par {\uldb\cf11 UPSF Arrays}{\v idx_upsf_arrays}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_upsf_arrays}}{\fldrslt }}
\par {\uldb\cf11 UPSF Concepts}{\v idx_upsf_concepts}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_upsf_concepts}}{\fldrslt }}
\par {\uldb\cf11 UPSF Data Types}{\v idx_upsf_data_types}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_upsf_data_types}}{\fldrslt }}
\par {\uldb\cf11 UPSF Examples}{\v idx_upsf_examples}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_upsf_examples}}{\fldrslt }}
\par {\uldb\cf11 UPSF Exporting Example}{\v idx_upsf_exp}{\v orting_example}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_upsf_exporting_e}
}{\fldrslt }}
\par {\uldb\cf11 UPSF Fields}{\v idx_upsf_fields}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_upsf_fields}}{\fldrslt }}
\par {\uldb\cf11 UPSF Importing Examples}{\v idx_upsf_importing_examples}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_upsf_importing_e}
}{\fldrslt }}
\par {\uldb\cf11 UPSF Scopes}{\v idx_upsf_scopes}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_upsf_scopes}}{\fldrslt }}
\par {\uldb\cf11 UPSF Support}{\v idx_upsf_support}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+}{\cf6 >}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_upsf_support}}{\fldrslt }}
\par {\uldb\cf11 Using Scopes During Export}{\v idx_using_scopes_during_export}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_using_scopes_dur}
}{\fldrslt }}
\par {\uldb\cf11 Using Scopes During Import}{\v idx_n1_using_scopes_during_import}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_n1_using_scopes_}}{\fldrslt }}
\par {\uldb\cf11 Using the Configuration Dialog}{\v idx_using_the_configuration_dialog}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_using_the_config}}{\fldrslt }}
\par \pard\plain \s43\li1440\sb240\sa120 \b\f3\fs28\cf2\lang1033 V 
\par W 
\par X 
\par Y 
\par Z 
\par 
\par \pard\plain \s42\ri432\sb240\sa240 \b\f3\fs28\cf2\lang1033 \page {\plain \f3\fs16\up6\lang1033 {\*\bkmkstart idx_about_this_book}{\*\bkmkend idx_about_this_book}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_about_this_book}}
 About This Book
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\ul\cf11 Audience}{\v\cf1 i}{\v\cf1 dx_audience}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_audience}}{\fldrslt }}{\cf1 
\par }{\ul\cf11 Organization}{\v\cf1 idx_organization}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_organization}}{\fldrslt }}{\cf1 

\par }{\ul\cf11 References}{\v\cf1 idx_references}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_references}}{\fldrslt }}{\cf1 
\par }{\ul\cf11 Acronyms and Abbreviations}{\v\cf1 idx_acronyms_and_abbreviations}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_acronyms_and_abb}}{\fldrslt }}{\cf1 
\par }\pard\plain \s42\ri432\sb240\sa240 \b\f3\fs28\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_audience}{\*\bkmkend idx_audience}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_audience}} Audience
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 This reference guide is designed for developers who are creating ALMs for the Microsoft Windows version of the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1 .}
 It contains the necessary background information you should have before you begin designing an ALM. It is also intended for developers who need to access or manipulate the data for the Button, Date, Number, Text, Time, or Window objects and developers wh
o need to implement the window item protocol. 
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 To use this reference guide successfully, you should understand how to use Novell\rquote 
s AppWare to create AppWare applications. In addition, you have to have an understanding of Novell\rquote s AppWare architecture. In addition, it would be helpful if you have prior experience with C, C++, and object-oriented programming. 
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
\par \pard\plain \s42\ri432\sb240\sa240 \b\f3\fs28\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_organization}{\*\bkmkend idx_organization}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_organization}} Organization

\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 This reference guide is organized as follows. 
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }{\uldb\cf11 Chapter 1}{\v idx_chapter_1}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_chapter_1}}{\fldrslt }}{\cf1  }contains introductory AppWare Bus and ALM information.
\par {\cf5 \{bmc rr.bmp\}\tab }{\uldb\cf11 Chap}{\uldb\cf11 ter 2}{\v idx_chapter_2}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_chapter_2}}{\fldrslt }}{\cf1  }has the necessary information for ALM object construction.
\par {\cf5 \{bmc rr.bmp\}\tab }{\uldb\cf11 Chapter 3}{\v idx_chapter_3}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_chapter_3}
}{\fldrslt }}{\cf1  }has the necessary information for ALM function construction.
\par {\cf5 \{bmc rr.bmp\}\tab }{\uldb\cf11 Chapter 4}{\v idx_chapter_4}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_chapter_4}
}{\fldrslt }}{\cf1  }discusses events and the event queue. 
\par {\cf5 \{bmc rr.bmp\}\tab }{\uldb\cf11 Chapter 5}{\v idx_chapter_5}{\field{\*\fldinst {\cf1 m}{\cf1 acrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_chapter_5}
}{\fldrslt }}{\cf1  }contains information about protocols.
\par {\cf5 \{bmc rr.bmp\}\tab }{\uldb\cf11 Chapter 6}{\v idx_chapter_6}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_chapter_6}
}{\fldrslt }}{\cf1  }has the necessary information for creating objects that support the creation of applications that can be transferred between platforms.
\par {\cf5 \{bmc rr.bmp\}\tab }{\uldb\cf11 Chapter 7}{\v idx_chapter_7}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_chapter_7}
}{\fldrslt }}{\cf1  }describes the use of the ALM Builder utility to create ALM configuration files. 
\par {\cf5 \{bmc rr.bmp\}\tab }{\uldb\cf11 Chapter 8}{\v idx_chapter_8}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_chapter_8}
}{\fldrslt }}{\cf1  }has descriptions of the AppWare Bus APIs.
\par {\cf5 \{bmc rr.bmp\}\tab }{\uldb\cf11 Chapter 9}{\v idx_chapter_9}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_chapter_9}
}{\fldrslt }}{\cf1  }is a selection of general object API descriptions, organized alphabetically. 
\par {\cf5 \{bmc rr.bmp\}\tab }{\uldb\cf11 Chapter 10}{\v idx_chapter_10}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_chapter_10}
}{\fldrslt }}{\cf1  }contains a description of the window item protocol. 
\par {\cf5 \{bmc rr.bmp\}\tab }{\uldb\cf11 Appendix A}{\v idx_appendix_a}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_appendix_a}
}{\fldrslt }}{\cf1  }contains guidelines for ALM design.
\par {\cf5 \{bmc rr.bmp\}\tab }{\uldb\cf11 Appendix B}{\v idx_appendix_b}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_appendix_b}
}{\fldrslt }}{\cf1  }contains code-debugging information.
\par {\cf5 \{bmc rr.bmp\}\tab }{\uldb\cf11 Appendix C}{\v idx_appendix_c}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_appendix_c}
}{\fldrslt }}{\cf1  }contains descriptions of the ALM utility functions.
\par \pard \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 
\par \pard\plain \s42\ri432\sb240\sa240 \b\f3\fs28\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_references}{\*\bkmkend idx_references}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_references}} References
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }For more information about the {\pard\plain 
\s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \v\f7\fs22\lang1033 {\xe {\v Microsoft Windows SDK}}}Microsoft Windows SDK, please refer to the documentation that was provided with your {\pard\plain 
\s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \v\f7\fs22\lang1033 {\xe {\v Compiler}}}compiler. 
\par {\cf5 \{bmc rr.bmp\}\tab }For more information about {\pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \v\f7\fs22\lang1033 {\xe {\v ID\:registration service}}}ID registration, refer to the {\i 
Technical Support Quick Reference}. 
\par {\cf5 \{bmc rr.bmp\}\tab }Online {\pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \v\f7\fs22\lang1033 {\xe {\v Help files\:online}}}help files are also available. 
\par \pard \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 
\par \pard\plain \s42\ri432\sb240\sa240 \b\f3\fs28\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_acronyms_and_abb}{\*\bkmkend idx_acronyms_and_abb}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_acronyms_and_abbreviations}} Acronyms and Abbreviations
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 ALM\tab AppWare Loadable Module
\par API\tab application programming interface
\par \pard \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 ASCII\tab American Standard Code for Information Interchange
\par \pard \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 B/W\tab black and white
\par <CR>\tab carriage return
\par DLL\tab Dynamic-link Library
\par GDI\tab graphical device interface
\par HWI\tab handled window item
\par ID\tab identifier
\par <LF>\tab line feed
\par LWI\tab lite window item
\par SDK\tab Software Development Kit
\par UPSF\tab Universal Program Structure File
\par YMD\tab year, month, and day
\par 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 {\plain \f3\fs16\cf2\up6\lang1033 \page {\*\bkmkstart idx_chapter_1}{\*\bkmkend idx_chapter_1}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_chapter_1}}{\plain 
\f3\fs16\cf2\up6\lang1033  }{\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} chap:0001}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Chapter 1}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Chapter 1}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_contents')')}}
 Chapter 1
\par \pard\plain \s29\ri432 \f11\fs60\lang1033 Overview
\par \pard\plain \s2\sb240\sa120 \b\f3\fs36\cf2\lang1033 Introduction to AppWare
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 This chapter is intended as a general explanation of the concepts you should learn if you are to understand the remainder of t
his document. It consists of information about the AppWare Bus, AppWare Loadable Modules, and AppWare Bus applications. 
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 The AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_the_appware_bus}}{\fldrslt }}
\par {\uldb\cf11 AppWare Loadable Modules}{\v idx_appware_loadable_modules}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_appware_loadable}
}{\fldrslt }}
\par {\uldb\cf11 AppWare Bus Applications}{\v idx_appware_bus_applications}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_appware_bus_appl}
}{\fldrslt }}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\fs16\up6 {\*\bkmkstart idx_the_appware_bus}{\*\bkmkend idx_the_appware_bus}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_the_appware_bus}} {\fs16\up6 ${\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} The AppWare Bus}} {\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws97:0005}} {\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} The AppWare Bus}} {
\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_contents')')}} The AppWare Bus
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
The AppWare Bus is designed to allow the creation of robust, custom applications without the need to code in a third-generation language such as C or C++. It also allows for the creation of applications that can run on multiple hardware or operating-syste
m platforms. The AppWare Bus accomplishes this by providing an architecture that allows large-grained software modules to be combined and customized in order to create new applications. Software modules that can be combined by way of
 the AppWare Bus are called AppWare Loadable Modules, or ALMs.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
The combination of ALMs to create new applications does not require programming in third-generation languages. Rather, it is accomplished through the use of graphical programming tools such as AppWare. Applications created on one platform by AppWare can b
e transferred to other platforms through an automated export-and-import process. No manual reconstruction of the application is necessary.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 The AppWare Bus is described by the software specific
ation that defines how to construct ALMs. That specification is described within this manual. ALMs built according to the AppWare Bus specification can be combined by AppWare to create new applications.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
The AppWare Bus includes a software engine that implements the ALM bus specification on a particular platform. On the Microsoft Windows platform, the bus engine consists of a single DLL, almkrnl.dll. The almkrnl DLL is used by all {\uldb\cf11 
AppWare Bus applications}{\v idx_appware_bus_applications}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_appware_bus_appl}
}{\fldrslt }}{\cf1  }that run on the Microsoft Windows platform. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\fs16\up6 {\*\bkmkstart idx_appware_loadable}{\*\bkmkend idx_appware_loadable}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_appware_loadable_modules}} {\fs16\up6 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AppWare Loadable Modules}} {\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws97:0010}} {\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K}
 AppWare Loadable Modules}} {\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_contents')')}} AppWare Loadable Modules
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
The term Appware Loadable Module refers to a package of one or more software modules. The package provides services that can be used by AppWare applications. Specific ALM services are exposed to an application builder as {\uldb\cf11 ALM object types}{\v 
idx_overview_of_object_types}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_overview_of_obje}}{\fldrslt }}{\cf1  }and {\uldb\cf11 
ALM functions}{\v idx_alm_}{\v functions}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_alm_functions}}{\fldrslt }}{\cf1 .}
 Although an ALM can consist of any combination of object types and functions, the most common case is an ALM that consists of a single object type and several functions. For example, the Button ALM consists of a Button object type and several Button func
tions.
\par ALMs on the Microsoft Windows platform consist of two basic pieces: configuration information that describes an ALM, and Dynamic-link Libraries (DLLs) that imple
ment the ALM's functionality. Configuration information is stored in configuration files. The configuration file describes the objects and functions that compose an ALM. You create configuration files with the {\uldb\cf11 ALM Builder utility}{\v 
idx_the_alm_builder_utility}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_alm_builder}}{\fldrslt }}{\cf1 .}
 You create DLLs using the C or C++ development environment you prefer. For more information about configuration files, refer to {\uldb\cf11 Chapter 7}{\v idx_chapter_7}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_chapter_7}}{\fldrslt }}{\cf1 .}
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Overview of Object Types}{\v idx_overview_of_object_types}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf6 gotobutton idx_overview_of_obje}}{\fldrslt }}
\par {\uldb\cf11 Overview of Functions}{\v idx_overview_of_functions}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_overview_of_func}
}{\fldrslt }}{\cf6 
\par }\pard \s21\li720\ri432 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_overview_of_obje}{\*\bkmkend idx_overview_of_obje}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_overview_of_object_types}} {
\caps\fs16\up6 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Overview of Object Types}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws98:0000}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 K} Overview of Object Types}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_appware_loadable_modules')')}} Overview of Object Types
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 An ALM object type provides customizable functionality to an {\uldb\cf11 AppWare application}{\v idx_appware_bus_applications}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_appware_bus_appl}}{\fldrslt }}{\cf1 .}
 This functionality can be as simple as a push button or as complex as a relational database. An object type is used within an AppWare application by the creation of one or more instances of the type. Instances of an object type are referred to as objects
.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
Each object type in an AppWare application can create and store the data to be associated with a particular object. This capability is used for two general purposes. First, when an application is being designed within Ap
pWare, the object stores attribute information that customizes its behavior for the specific application. For example, a push-button object might store its size, color, and title. Second, an object can store state information and data that is created as a
n application is running.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_overview_of_func}{\*\bkmkend idx_overview_of_func}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_overview_of_functions}} {\caps\fs16\up6 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Overview of Functions}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws98:0005}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K}
 Overview of Functions}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_appware_loadable_modules')')}} Overview of Functions
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 Like an object type, functions provide functionality to an {\uldb\cf11 AppWare application}{\v idx_appware_bus_applications}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_appware_bus_appl}}{\fldrslt }}{\cf1 .} Unlike 
an object type, a function cannot store data that is specific to the function. A function is generally designed to perform an operation on one or more objects it accesses as {\uldb\cf11 input parameters}{\v idx_input_parameters}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_input_parameters}}{\fldrslt }}{\cf1 .} Results of the operation can be expressed through {\uldb\cf11 
output parameters}{\v idx_output_parameters}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_output_parameter}}{\fldrslt }}{\cf1 ,}
 modifications of the input parameters, or {\uldb\cf11 functi}{\uldb\cf11 on flows}{\v idx_function_flows}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf1 gotobutton idx_function_flows}}{\fldrslt }}{\cf1 .}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\fs16\up6 {\*\bkmkstart idx_appware_bus_appl}{\*\bkmkend idx_appware_bus_appl}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_appware_bus_applications}} {\fs16\up6 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AppWare Bus Applications}} {\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws97:0015}} {\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K}
 AppWare Bus Applications}} {\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_contents')')}} AppWare Bus Applications
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
AppWare Bus applications are defined by the combination of objects and functions that are necessary to implement the application's functionality. Object attributes are customized by the application builder to perform as required by the application. The f
unctions are arranged in sequences, called function chains, and the function chains are executed at appropriate times during the execution of the application. 
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 AppWare Events}{\v idx_appw_events}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst 
{\cf1 gotobutton idx_appw_events}}{\fldrslt }}{\cf1 
\par }{\uldb\cf11 AppWare Signals}{\v idx_apw_signals}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1 gotobutton idx_apw_signals}
}{\fldrslt }}{\cf1 
\par }{\uldb\cf11 Flows and Function Chains}{\v idx_flows_and_function_chains}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_flows_and_functi}
}{\fldrslt }}
\par {\uldb\cf11 The ALM Builder Utility}{\v idx_the_alm_builder_utility}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton i}{\cf6 dx_the_alm_builder_
}}{\fldrslt }}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\up6\lang1033 {\*\bkmkstart idx_appw_events}{\*\bkmkend idx_appw_events}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_appw_events}} {\plain 
\f3\fs16\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AppWare Events}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws99:0000}} {\plain \f3\fs16\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Events}} {\plain \f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}   EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_appware_bus_applications')')}} AppWare Events
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The execution of an {\uldb\cf11 AppWare application}{\v idx_appware_bus_applications}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_appware_bus_appl}}{\fldrslt }}{\cf1  }is controlled by events. Events are managed by the AppWare Bus event queue. They can be generated by the {
\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1 ,}
 by objects, and by functions. Events are often generated as a result of a user's interaction wit
h an application, such as pushing a button or selecting an item in a list. Events can also be generated as a result of internal activity within an object or function, such as updating a database record or adding a row to a table. In addition, events are u
sed as a means of communication between objects.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\up6\lang1033 {\*\bkmkstart idx_apw_signals}{\*\bkmkend idx_apw_signals}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_apw_signals}} {\plain 
\f3\fs16\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AppWare Signals}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws99:0005}} {\plain \f3\fs16\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Signals}} {\plain \f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}   EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_appware_bus_applications')')}} AppWare Signals
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
Many of the events that occur while an application is executing are invisible to the application builder. Other events, called .i.signals;signals, are explicity exposed to the ap
plication builder. Signals are used by the application builder to trigger the execution of one or more functions that are arranged in a function chain. Signal events are always associated with a specific object. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_flows_and_functi}{\*\bkmkend idx_flows_and_functi}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_flows_and_function_chains}} {
\caps\fs16\up6 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Flows and Function Chains}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws99:0010}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 K} Flows and Function Chains}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_appware_bus_applications')')}} Flows and Function Chains
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 Most {\uldb\cf11 ALM functions}{\v idx_alm_functions}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_alm_functions}}{\fldrslt }}{\cf1  }
have one or more flows. If a function has a single flow, the flow generally indicates that the function is done executing. Multiple flows indicat
e different results that might occur when a function is executed. For example, a function that performs a comparison could have a flow for an equal result and a flow for a not-equal result. A function chain is created by connecting the appropriate flow of
 one function with the next function to be executed. Branches can be created in function chains by the connection of multiple flows to different functions. The following figure illustrates a function chain that is executed by a button-pressed signal.

\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 {\cf5 \{bm}{\cf5 r fncchain.bmp\}}{\cf1 
\par }\pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_the_alm_builder_}{\*\bkmkend idx_the_alm_builder_}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_the_alm_builder_utility}} {
\caps\fs16\up6 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} The ALM Builder Utility}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws99:0015}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 K} The ALM Builder Utility}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_appware_bus_applications')')}} The ALM Builder Utility
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 When an application is constructed, the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
and AppWare have to be aware of the ALMs that are available to the environment. For example, AppWare has to be made aware of the object types and functions that are available and the icons that are used to represent them. This information is provided thro
ugh ALM configuration files. You create ALM configuration files by using the {\uldb\cf11 ALM Builder}{\v idx_alm_builder_utility_overview}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>
}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_alm_builder_util}}{\fldrslt }}{\cf1  }utility. The ALM Builder utility is a Microsoft Windows application, and it is provided along with the AppWare product. The use of ALM Builder is described in {
\uldb\cf11 Chapter 7}{\v idx_chapter_7}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_chapter_7}}{\fldrslt }}{\cf1 .}
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_chapter_2}{\*\bkmkend idx_chapter_2}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_chapter_2}} {\plain 
\f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} chap:0002}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Chapter 2}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Chapter 2}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_contents')')}} Chapter 2
\par \pard\plain \s29\ri432 \f11\fs60\lang1033 Constructing Object Types
\par \pard\plain \s2\sb240\sa120 \b\f3\fs36\cf2\lang1033 Introduction to Object Construction
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 This chapter discusses the concepts you need to understand in order to construct an object type in compliance with the {\uldb\cf11 AppWare Bus}{\v 
idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1 .}
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Object Types}{\v idx_object_types}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_object_types}}{\fldrslt }}
\par {\uldb\cf11 Objects}{\v idx_objects}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_objects}}{\fldrslt }}
\par {\uldb\cf11 Data and Memory Management}{\v idx_data_and_memory_management}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJu}{\cf6 mp <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_data_and_memory_}}{\fldrslt }}
\par {\uldb\cf11 The Administration Function}{\v idx_the_administration_function}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_the_administrati}}{\fldrslt }}
\par {\uldb\cf11 Signals}{\v idx_n1_signals}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_n1_signals}}{\fldrslt }}
\par {\uldb\cf11 Responding to Events}{\v idx_responding_to_events}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_responding_to_ev}
}{\fldrslt }}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\fs16\up6 {\*\bkmkstart idx_object_types}{\*\bkmkend idx_object_types}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_object_types}}{\fs16\up6  ${\footnote \pard\plain 
\s245 \f3\fs20\lang1033 {\fs16\up6 $} Object Types}} {\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws100:0005}} {\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Object Types}} {\fs16\up6 !{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_contents')')}} Object Types
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 An ALM object type provides high-level services for an AppWare Bus application.
 In the AppWare application, available object types are represented as icons within the Object & Function Palette. An object type is incorporated in an AppWare Bus application when a user drags its icon from the Object & Function Palette into the project 
area. 
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Object Type IDs}{\v idx_object_type_ids}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_object_type_ids}}{\fldrslt }}
\par {\uldb\cf11 Object-type Configuration}{\v idx_object_type_configuration}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_object_type_con}{
\cf6 f}}{\fldrslt }}
\par {\uldb\cf11 Hidden Object Types}{\v idx_hidden_object_types}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_hidden_object_ty}}{\fldrslt }}

\par \pard \s21\li720\ri432 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_object_type_ids}{\*\bkmkend idx_object_type_ids}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_object_type_ids}} {\caps\fs16\up6 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Object Type IDs}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws101:0000}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K}
 Object Type IDs}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_object_types')')}} Object Type IDs
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
Every ALM object type is identified by a unique, four-character type identifier (type ID). The type ID has to be different from all other object-type IDs that are known to a particular installation of the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1 .} To help ensure the global uniqueness
 of type IDs, Novell provides a type ID registration service. For more information about registration, refer to the {\i Technical Support Quick Reference}. 
\par Type IDs are part of the configuration information you enter when you use the {\uldb\cf11 ALM Builder utility}{\v idx_the_alm_builder_utility}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_alm_builder}}{\fldrslt }}{\cf1  }
to define a new object type. They are entered as a sequence of four characters, such as Nmbr for the Number object. The ASCII codes for these characters a
re stored in the four bytes of a long integer value. The first (left-most) character is stored in the high-order byte.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
When a developer debugs ALM code, it is sometimes desirable to view type ID values. This is best done by viewing the type ID as a long value shown in hexadecimal format. For example, the type ID Nmbr would be shown as 0x4e6d6272. Notice that the ASCII cod
e for "N" appears in the high-order byte, and "r" appears in the low-order byte.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 In general, C compilers do not support the specificatio
n of a long value that uses four characters. The AppWare Bus API defines the MAKETYPEID macro to facilitate the definition of object IDs. Its use is illustrated in the following sample code:
\par \pard\plain \s26\li1440\ri432\tlhyph\tx576\tqdec\tlhyph\tx864\tlhyph\tx1728\tx1890\tqdec\tlhyph\tx1980\tlhyph\tx2304\tqdec\tlhyph\tx2592\tlul\tx2880\tqc\tlul\tx3168\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896\tldot\tx5760\tldot\tx6336
\f9\fs18\lang1033 #define OTYPE_NUMBER\tab MAKETYPEID('N', 'm', b','r')
\par 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_object_type_conf}{\*\bkmkend idx_object_type_conf}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_object_type_configuration}} {
\caps\fs16\up6 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Object-type Configuration}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws101:0005}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 K} Object-type Configuration}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_object_types')')}} Object-type Configuration
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 Every object type provided by an ALM has to be described in an ALM configuration file. You create configuration files by using the {\uldb\cf11 
ALM Builder utility}{\v idx_the_alm_builder_utility}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 got}{\cf1 obutton idx_the_alm_builder}
}{\fldrslt }}{\cf1 .} Configuration information for an object type includes the following items:
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }Unique type ID
\par {\cf5 \{bmc rr.bmp\}\tab }Type name
\par {\cf5 \{bmc rr.bmp\}\tab }Type icon
\par \pard \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 {\cf5 \{bmc rr.bmp\}\tab }Administration function DLL and entry point
\par \pard \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 {\cf5 \{bmc rr.bmp\}\tab }Object-type help file
\par {\cf5 \{bmc rr.bmp\}\tab }Event responses
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 Refer to {\uldb\cf11 Chapter 7}{\v idx_chapter_7}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_chapter_7}}{\fldrslt }}{\cf1  }for details on using the {\uldb\cf11 ALM Builder utility}{\v idx_the_alm_builder_utility}{\field{\*\fldinst {\cf1 macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 mac}{\cf6 robutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_alm_builder}}{\fldrslt }}{\cf1  }to configure an object type.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_hidden_object_ty}{\*\bkmkend idx_hidden_object_ty}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_hidden_object_types}} {\caps\fs16\up6 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Hidden Object Types}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws101:0010}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K}
 Hidden Object Types}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_object_types')')}} Hidden Object Types
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 Object types that are defined in a configuration file created by the {\uldb\cf11 ALM Builder utility}{\v idx_the_alm_builder_utility}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_alm_builder}}{\fldrslt }}{\cf1  }
are generally made visible in AppWare's Object & Function palette. However, an object type can be configured optionally as hidden. A hidden object type will not appear in the Object & Function palette, and an AppWare
 user cannot insert a hidden object type into a project.
\par Where necessary, you can use hidden object types in an ALM when you only want to expose {\uldb\cf11 ALM functions}{\v idx_alm_functions}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}
}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_alm_functions}}{\fldrslt }}{\cf1  }to the application designer, but you also need an object type for storage of state information and responses to system events such as {\uldb\cf11 AEVENT_STARTUP}{\v 
idx_aevent_startup}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevent_startu}{\cf1 p}}{\fldrslt }}{\cf1 .}
 If an ALM function requires a hidden type, you have to specify the required type in the function's configuration information.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 Since ALM function code is not executed at design time, hidden object types are not made part of an AppWare
 project file. If a project uses any functions that require a hidden type, the hidden type is added to the project when it is compiled.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\fs16\up6 {\*\bkmkstart idx_objects}{\*\bkmkend idx_objects}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_objects}} {\fs16\up6 ${\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 $} Objects}} {\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws100:0010}} {\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Objects}} {\fs16\up6 !{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_contents')')}} Objects
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 You can incorporate an object type into an {\uldb\cf11 AppWare application}{\v idx_appware_bus_applications}{\field{\*\fldinst {\cf1 macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 mac}{\cf6 robutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_appware_bus_appl}}{\fldrslt }}{\cf1  }
by using AppWare to create one or more instances of a type within a project. An instance of an object type is called an object.
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Design-time Objects}{\v idx_design_time_objects}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {
\cf6 gotobutton idx_design_time_obje}}{\fldrslt }}
\par {\uldb\cf11 Runtime Objects}{\v idx_runtime_objects}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_runtime_objects}}{\fldrslt }}
\par {\uldb\cf11 Temporary Objects}{\v idx_temporary_objects}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 g}{\cf6 otobutton idx_temporary_object}
}{\fldrslt }}
\par {\uldb\cf11 Object Identifiers}{\v idx_object_identifiers}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_object_identifie}}{\fldrslt }}

\par \pard \s21\li720\ri432 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_design_time_obje}{\*\bkmkend idx_design_time_obje}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_design_time_objects}} {\caps\fs16\up6 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Design-time Objects}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws102:0000}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K}
 Design-time Objects}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_objects')')}} Design-time Objects
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
Objects that are created while an application developer is designing an application are called design-time objects. Design-time objects are stored in project files. Some AppWare Bus API functions can only operate on design-time objects and are marked as b
eing available at design time. For example, the {\uldb\cf11 AObjGetName}{\v idx_aobj}{\v getname}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_aobjgetname}}{\fldrslt }}{\cf1  }function is available only at design time.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_runtime_objects}{\*\bkmkend idx_runtime_objects}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_runtime_objects}} {\caps\fs16\up6 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Runtime Objects}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws102:0005}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K}
 Runtime Objects}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_objects')')}} Runtime Objects
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
When a project file is compiled and run, a copy of each design-time object is created. These copies are called runtime objects. Runtime objects are saved within the executable file that is created when a project is compiled into an application. Some API f
unctions can only operate on runtime objects and are marked as being available at run time. For example, the {\uldb\expnd-3\cf11 AEvtPostSignalAtTail}{\v\expnd-3 idx_n1_aevtpostsignalattail}{\field{\*\fldinst {\expnd-3\cf1 macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\expnd-3\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\expnd-3\cf1 gotobutton idx_n1_aevtpostsigna}}{\fldrslt }}{\cf1  }function is available only at run time.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_temporary_object}{\*\bkmkend idx_temporary_object}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_temporary_objects}} {\caps\fs16\up6 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Temporary Objects}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws102:0010}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K}
 Temporary Objects}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_objects')')}} Temporary Objects
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 Temporary objects are a subset of runtime objects. They are created whenever a call is made at run time to the {\uldb\cf11 AObjCreate}{\v idx_aobjcreate}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjcreate}}{\fldrslt }}{\cf1  }
function. Temporary objects are typically created to hold the values of an ALM function's {\uldb\cf11 out}{\uldb\cf11 put parameters}{\v idx_output_parameters}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_output_parameter}}{\fldrslt }}{\cf1 .}
 However, they can be created any time an object needs to be dynamically created at run time. Temporary objects are not saved on disk; instead, they are destroyed when an application terminates execution.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_object_identifie}{\*\bkmkend idx_object_identifie}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_object_identifiers}} {\caps\fs16\up6 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Object Identifiers}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws102:0015}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K}
 Object Identifiers}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_objects')')}} Object Identifiers
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 Individual objects are identified by object identifiers (object IDs). Object IDs are allocated by the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 m}{\cf6 acrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
whenever an object is created. An object ID is a four-byte value that is declared by the AppWare Bus API as OBJECTID. The type LPOBJECTID declares a far pointer to an object ID.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
AppWare Bus API functions that reference objects do so by using object IDs. If an object you are implementing has to reference a second object, the first object should store the object ID of the second object. For example, the Menu object stores the objec
t ID of each Menu Item object in its menu.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\fs16\up6 {\*\bkmkstart idx_data_and_memory_}{\*\bkmkend idx_data_and_memory_}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_data_and_memory_management}} {\fs16\up6 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Data and Memory Management}} {\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws100:0015}} {\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K}
 Data and Memory Management}} {\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_contents')')}} Data and Memory Management
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
provides a set of memory management routines to assist an object type in the management of persistent data and runtime-only data. Data can be associated with both an object type and individual object instances.
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Object data}{\v idx_object_data}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_object_data}}{\fldrslt }}
\par {\uldb\cf11 Locking Data Blocks}{\v id}{\v x_locking_data_blocks}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_locking_data_blo}
}{\fldrslt }}
\par {\uldb\cf11 Type Data}{\v idx_type_data}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_type_data}}{\fldrslt }}
\par {\uldb\cf11 Data Persistence}{\v idx_data_persistence}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_data_persistence}}{\fldrslt }}
\par {\uldb\cf11 Runtime Persistence}{\v idx_runtime_persistence}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_runtime_persiste}}{\fldrslt }}

\par {\uldb\cf11 Runtime Data}{\v idx_runtime_data}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton D}{\cf6 oJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_runtime_data}}{\fldrslt }}
\par {\uldb\cf11 Memory Blocks}{\v idx_memory_blocks}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_memory_blocks}}{\fldrslt }}{\cf6 
\par }\pard \s21\li720\ri432 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_object_data}{\*\bkmkend idx_object_data}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_object_data}} {\caps\fs16\up6 ${\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Object data}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws103:0000}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Object data}} {
\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_data_and_memory_management')')}} Object data
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
allows you to store data for an individual object as an array of one or more data blocks. An object is initialized by the AppWare Bus with zero data blocks. The ALM is responsible for allocating the data blocks it requir
es. Each data block can be sized from zero to the amount of available memory (up to two gigabytes) on the machine. An object can have up to 10,922 data blocks. Within these ranges, you should adhere to the following guidelines:
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }A few moderately sized blocks are more efficient than many small blocks.
\par {\cf5 \{bmc rr.bmp\}\tab }Avoid repeatedly growing or shrinking a block by small amounts.
\par \pard \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 {\cf5 \{bmc rr.bmp\}\tab }Manage arrays of small to moderately sized elements within a single block rather than using a block for each element of the array.
\par \pard \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 {\cf5 \{bmc rr.bmp\}\tab }If all data in a block is to be overwritten when a block is resized, either use {\uldb\cf11 AObjSetData}{\v idx_aobjsetdata}{\field{\*\fldinst {
\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjsetdata}}{\fldrslt }}{\cf1  }or use {\uldb\cf11 AObjResizeData}{\v idx_aobjresizedata}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjresizedata}}{\fldrslt }}{\cf1  }
to resize the block to zero and then resize the block to the appropriate size. This avoids unnecessary copying of the data.
\par \pard \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 {\cf5 \{bmc rr.bmp\}\tab }If you allocate a data block greater than 64K bytes, you should use huge pointers to access the data in the block.
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The following table lists the functions that are used to manage object data blocks.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Function\tab \tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 {\uldb\cf11 AObjAddData}{\v idx_aobjadddata}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}
}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjadddata}}{\fldrslt }}{\cf1  }\tab Creates a new object data block.
\par {\uldb\cf11 AObjDeleteData}{\v idx_aobjdeletedata}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjdeletedata}}{\fldrslt }}{\cf1 
 }\tab Destroys an existing object data block.
\par {\uldb\cf11 AObjGetDataCount}{\v idx_aobjget}{\v datacount}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjgetdatacount}
}{\fldrslt }}{\cf1  }\tab Retrieves the number of data blocks assigned to the specified object.
\par {\uldb\cf11 AObjGetDataSize}{\v idx_aobjgetdatasize}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjgetdatasize}}{\fldrslt }}{
\cf1 \tab }Retrieves the current size of the specified object data block. 
\par {\uldb\cf11 AObjInsertData}{\v idx_aobjinsertdata}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjinsertdata}}{\fldrslt }}{\cf1 
\tab }Inserts a new object data block at the specified index. 
\par {\uldb\cf11 AObjLockData}{\v idx_aobjlockdata}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjlockdata}}{\fldrslt }}{\cf1 \tab }
Retrieves a pointer to the specified object data block and increments the lock count for the data by one. 
\par {\uldb\cf11 AObjResizeData}{\v idx_aobjresizedata}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjresizedata}}{\fldrslt }}{\cf1 
 }\tab Resizes the specified data block.
\par {\uldb\cf11 AObjSetData}{\v idx_aobjsetdata}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjsetdata}}{\fldrslt }}{\cf1 \tab }
Changes the size and the data of an existing object data block.
\par {\uldb\cf11 AObjSetDataCount}{\v idx_aobjsetdatacount}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjsetdatacount}}{\fldrslt }}
{\cf1  }\tab Sets the number of data blocks for the specified object.
\par {\uldb\cf11 AObjUnlockData}{\v idx_aobjunlockdata}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjunlockdata}}{\fldrslt }}{\cf1 
\tab }Decrements the lock count of the specified object data block.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_locking_data_blo}{\*\bkmkend idx_locking_data_blo}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_locking_data_blocks}} {\caps\fs16\up6 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Locking Data Blocks}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws103:0005}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K}
 Locking Data Blocks}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_data_and_memory_management')')}} Locking Data Blocks
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 To obtain the pointer to the data in a data block, you have to lock the data block with a call to {\uldb\cf11 AObjLockDat}{\uldb\cf11 a}{\v idx_aobjlockdata}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjlockdata}}{\fldrslt }}{\cf1 .}
 AObjLockData will increment the lock count on the data block and return a pointer to the data. While the lock count is greater then zero, the data in the block cannot be resized or deleted. You should call {\uldb\cf11 AObjUnlockData}{\v 
idx_aobjunlockdata}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjunlockdata}}{\fldrslt }}{\cf1  }
to decrement the lock count when you no longer need to access a block's data. A data block can only be resized or deleted if its lock count is zero.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_type_data}{\*\bkmkend idx_type_data}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_type_data}} {\caps\fs16\up6 ${\footnote \pard\plain 
\s245 \f3\fs20\lang1033 {\fs16\up6 $} Type Data}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws103:0010}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Type Data}} {\caps\fs16\up6 !
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_data_and_memory_management')')}} Type Data
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 In addition to storing data with individual objects, the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
allows you to store data with an object type. Object-type data is arranged as an array of data blocks in a manner exactly like that used for object data blocks. When you manipulate type data blocks, you should follow the same guidelines that are used for 
object data blocks.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 It is important to remember that type data blocks are associated with a type, and object data blocks are associated with a specific object. Therefore, their indexing is separate.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 The following table lists the functions that are used to manage object-type data blocks.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Function\tab \tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 {\uldb\cf11 ATypeAddData}{\v idx_atypeadddata}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}
}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_atypeadddata}}{\fldrslt }}{\cf1 \tab }Creates a new object-type data block. \tab 
\par {\uldb\cf11 ATypeDeleteData}{\v idx_atypedeletedata}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrob}{\cf6 utton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_atypedeletedata}
}{\fldrslt }}{\cf1 \tab }Destroys an existing object-type data block.
\par {\uldb\cf11 ATypeGetDataCount}{\v idx_atypegetdatacount}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_atypegetdatacoun}
}{\fldrslt }}{\cf1 \tab }Retrieves the number of data blocks for the specified object type.
\par {\uldb\cf11 ATypeGetDataSize}{\v idx_atypegetdatasize}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_atypegetdatasize}}{\fldrslt }}
{\cf1 \tab }Retrieves the current size of the specified object-type data block. 
\par {\uldb\cf11 ATypeGetIcon}{\v idx_atypegeticon}{\field{\*\fldinst {\cf1 macrobutton}{\cf1  NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_atypegeticon}}{\fldrslt }}{
\cf1 \tab }Gets the icon associated with the given object type.
\par {\uldb\cf11 ATypeInsertData}{\v idx_atypeinsertdata}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_atypeinsertdata}}{\fldrslt }}{
\cf1  }\tab Inserts a new object-type data block at the specified index.
\par {\uldb\cf11 ATypeLockData}{\v idx_atypelockdata}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_atypelockdata}}{\fldrslt }}{\cf1  }
\tab Retrieves a pointer to the specified object-type data block and increments the lock count for the data by one.
\par {\uldb\cf11 ATypeResizeData}{\v idx_atyperesizedata}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_atyperesizedata}}{\fldrslt }}{
\cf1  }\tab Resizes the specified data block.
\par {\uldb\cf11 ATypeSetData}{\v idx_atypesetdata}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_atypesetdata}}{\fldrslt }}{\cf1 \tab }
Changes the size and the data of an existing object-type data block.
\par {\uldb\cf11 ATypeSetDataCount}{\v idx_atypesetdatacount}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_atypesetdatacoun}
}{\fldrslt }}{\cf1 \tab }Sets the number of data blocks for the specified object type. 
\par {\uldb\cf11 ATypeUnlockData}{\v idx_atypeunlockdata}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_atypeunlockdata}}{\fldrslt }}{
\cf1 \tab }Decrements the lock count of the specified object-type data block.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_data_persistence}{\*\bkmkend idx_data_persistence}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_data_persistence}} {\caps\fs16\up6 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Data Persistence}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws103:0015}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K}
 Data Persistence}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_data_and_memory_management')')}} Data Persistence
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 Data blocks that are allocated at design time are stored on disk within a project file. This storage is handled transparently by the {\uldb\cf11 AppWare Bus}{\v 
idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1 .}
 When a project is compiled and saved as an execu
table, all object and object-type data blocks are copied and stored with the objects and the object types in the executable file. Object and object-type data blocks that are created or modified during run time are not saved to disk except in the case of p
ersistent objects as discussed in the following section.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_runtime_persiste}{\*\bkmkend idx_runtime_persiste}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_runtime_persistence}} {\caps\fs16\up6 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Runtime Persistence}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws103:0020}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K}
 Runtime Persistence}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_data_and_memory_management')')}} Runtime Persistence
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
AppWare allows an application designer to mark an object as persistent. If an object is marked as persistent, its runtime state is stored in a persistent data file that is associated with the specific {\uldb\cf11 AppWare application}{\v 
idx_appware_bus_applications}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_appware_bus_appl}}{\fldrslt }}{\cf1  }
being created. When an application is executed, the data for the object is initialized from the persistent data file rather than the application's executable file. Some object-type implementations, because of the nature of the runtime data they store, can
not easily support initialization with data that was created at run time. The {\uldb\cf11 ALM Builder util}{\uldb\cf11 ity}{\v idx_the_alm_builder_utility}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_alm_builder}}{\fldrslt }}{\cf1  }
allows you to specify whether or not an object type supports persistent objects. This information is used by AppWare to control whether or not an application designer can make a specific object persistent.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_runtime_data}{\*\bkmkend idx_runtime_data}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_runtime_data}} {\caps\fs16\up6 ${\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Runtime Data}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws103:0025}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Runtime Data}} {
\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_data_and_memory_management')')}} Runtime Data
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
Object-type data blocks and object data blocks are good data-management mechanisms for persistent data. However, many object-type implementations require additional data at run time that does not need to be persistent. The {\uldb\cf11 AppWare Bus}{\v 
idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
allows runtime information in the form of a four-byte value to be stored with an object type and with an object. The interpretation of the runtime data value is totally up to the implementation of the object type. It is often a pointer to memory that is a
llocated at run time. The runtime data value is often initialized in response to the {\uldb\cf11 AOBJ_AW}{\uldb\cf11 AKENED}{\v idx_aobj_awakened}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_awakened}}{\fldrslt }}{\cf1  }message. The Awake and Asleep Messages section, which is later in this chapter, has more information about the {\uldb\cf11 AOBJ_AWAKENED}{\v 
idx_aobj_awakened}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_awakened}}{\fldrslt }}{\cf1  }message. 
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 The AppWare Bus API functions that manage runtime data are listed in the following table.\line  
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Function\tab \tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 {\uldb\cf11 AObjGetRuntimeInfo}{\v idx_aobjgetruntimeinfo}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjgetruntimein}}{\fldrslt }}{\cf1 \tab }Retrieves the runtime data value for an object. 
\par {\uldb\cf11 AObjSetRuntimeInfo}{\v idx_aobjsetruntimeinfo}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjsetruntimein}
}{\fldrslt }}{\cf1 \tab }Sets the runtime data value for an object.
\par {\uldb\cf11 ATypeGetRuntimeInfo}{\v idx_atypegetruntimeinfo}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_atypegetruntimei}
}{\fldrslt }}{\cf1 \tab }Retrieves the runtime data value for an object type.
\par {\uldb\cf11 ATypeSetRuntimeInfo}{\v idx_atypesetruntimeinfo}{\field{\*\fldinst {\cf1 macrobutton Next}{\cf1 Field }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_atypesetruntimei}
}{\fldrslt }}{\cf1 \tab }Sets the runtime data value for an object type.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_memory_blocks}{\*\bkmkend idx_memory_blocks}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_memory_blocks}} {\caps\fs16\up6 ${\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Memory Blocks}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws103:0030}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Memory Blocks}} {
\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_data_and_memory_management')')}} Memory Blocks
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
Memory blocks are used to allocate data that is not associated with a particular object or object type. Data in memory blocks is not stored to disk. Memory blocks are often used as variable size buffers for passing data between the {\uldb\cf11 AppWare Bus
}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
and ALMs. For example, the list of signals that are supported by an object is returned to the AppWare Bus within an appropriately sized memory block.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 The AppWare Bus API functions that manage memory blocks are listed in the following table.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Function\tab Description
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 {\uldb\cf11 AMemAllocate}{\v idx_amemallocate}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}
}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_amemallocate}}{\fldrslt }}{\cf1 
\par }\pard \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184  \tab Allocates a memory block of the specified size.
\par \pard \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 {\uldb\cf11 AMemFree}{\v idx_amemfree}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_amemfree}}{\fldrslt }}{\cf1 \tab }Releases the specified memory block. 
\par {\uldb\cf11 AMemGetSize}{\v idx_amemgetsize}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_amemgetsize}}{\fldrslt }}{\cf1  }
Returns the size of the specified memory block.
\par {\uldb\cf11 AMemLock}{\v idx_amemlock}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_amemlock}}{\fldrslt }}{\cf1  }\tab 
Retrieves a pointer to the specified memory block's data.
\par {\uldb\cf11 AMemSetSize}{\v idx_amemsetsize}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_amemsetsize}}{\fldrslt }}{\cf1  }
Resizes the specified memory block.
\par {\uldb\cf11 AMemUnlock}{\v idx_amemunlock}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 m}{\cf6 acrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_amemunlock}}{\fldrslt }}{\cf1 \tab 
}Decrements the lock count of the specified memory block. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\fs16\up6 {\*\bkmkstart idx_the_administrati}{\*\bkmkend idx_the_administrati}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_the_administration_function}} {\fs16\up6 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} The Administration Function}} {\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws100:0020}} {\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K}
 The Administration Function}} {\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_contents')')}} The Administration Function
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 Communication between the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }and an object or an object type takes place through {\uldb\cf11 AppWare events}{\v idx_appw_events}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_appw_events}}{\fldrslt }}{\cf1  }
or a single DLL entry point called the administration function. The administration function receives messages from the AppWare Bus{\cf1 .}
 It must respond appropriately to messages it wants to handle and return a value that indicates the result of processing the message. For more information about {\uldb\cf11 AppWare events}{\v idx_appw_events}{\field{\*\fldinst {\cf1 macrobutton NextField 
}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_appw_events}}{\fldrslt }}{\cf1 ,} refer to {\uldb\cf11 Chapter 4}{\v idx_chapter_4}{\field{\*\fldinst {\cf1 macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_chapter_4}}{\fldrslt }}{\cf1 .}
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 The administration function has to be an exported entry point of a Microsoft Windows DLL. Its prototype declaration is as follows:
\par \pard\plain \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 long ALMCALLBACK AdminFunc(
\par \tab OBJECTID\tab \tab \tab oiObject,
\par \tab pAObjMessage\tab \tab pMessageRec);
\par 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The type modifier ALMCALLBACK is defined by the AppWare Bus{\cf1  }
API. The oiObject parameter contains the object ID for the message recipient. If the message is intended for the object type, oiObject is zero. 
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 The administration function receives two basic message types: requests and notifications. Request messages request that the object or object type perform some acti
on or return some information to the AppWare Bus{\cf1 .} Notification messages notify objects or object types of specific occurrences such as reading an object from disk. The messages defined by the AppWare Bus{\cf1  }
are listed in the following table. All messages in the table are sent to the object type's administration function.
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Function\tab \tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 {\uldb\cf11 AOBJ_ASLEEP}{\v idx_aobj_asleep}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}
}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_asleep}}{\fldrslt }}{\cf1 \tab }Sent when a project is closed or an application stops execution.
\par {\uldb\cf11 AOBJ_ASSIGNOBJECT}{\v idx_aobj_assignobject}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_assignobjec}
}{\fldrslt }}{\cf1 \tab }Sent when the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }receives a call to the {\uldb\cf11 AObjAssign}{\v idx_aobjassign}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf1 gotobutton idx_aobjassign}}{\fldrslt }}{\cf1  }function or when the AppWare Bus needs to assign one object to another object.
\par {\uldb\cf11 AOBJ_AWAKENED}{\v idx_aobj_awakened}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobut}{\cf6 ton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_awakened}}{\fldrslt }}{
\cf1 \tab }Sent when the AppWare Bus reads an existing object and its data from a project file, an executable, or a persistent object file.
\par {\uldb\cf11 AOBJ_REPORTREQUIREDFILES}{\v idx_aobj_reportrequiredfiles}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_aobj_reportrequi}}{\fldrslt }}{\cf1 \tab }Sent when an executable is being created.
\par {\uldb\cf11 AOBJ_BUILDSIGNALS}{\v idx_aobj_buildsignals}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_buildsignal}
}{\fldrslt }}{\cf1 \tab }Sent whenever AppWare requires a list of the valid signals for the specified object.
\par {\uldb\cf11 AOBJ_CHECKOBJECT}{\v idx_aobj_checkobject}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_checkobject}}{\fldrslt }}
{\cf1 \tab }Sent at compilation time and at the request of an AppBuilder user.
\par {\uldb\cf11 AOBJ_CREATED}{\v idx_aobj_created}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_created}}{\fldrslt }}{\cf1 \tab }
Sent when the AppWare Bus creates a new object.\tab 
\par {\uldb\cf11 AOBJ_DESTROYED}{\v idx_aobj_destroyed}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_destroyed}}{\fldrslt }}{\cf1 
\tab }Sent when the AppWare Bus deletes an object from a project and when it destroys a temporary object during application execution.
\par {\uldb\cf11 AOBJ_EDITOBJECT}{\v idx_aobj_editobject}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_editobject}}{\fldrslt }}{
\cf1 \tab }Sent when an object's data has to be edited.
\par {\uldb\cf11 AOBJ_EXPORTOBJECT}{\v idx_aobj_exportobject}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_exportobjec}
}{\fldrslt }}{\cf1 \tab }Sent when an object's data is to be exported.
\par {\uldb\cf11 AOBJ_IMPORTOBJECT}{\v idx_aobj_importobject}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 ma}{\cf6 crobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_importobjec}
}{\fldrslt }}{\cf1 \tab }Sent when an object's data is to be imported.
\par {\uldb\cf11 AOBJ_POSTWRITE}{\v idx_aobj_postwrite}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_postwrite}}{\fldrslt }}{\cf1 
\tab }Sent after the AppWare Bus writes the object's data to a project file, an executable, or a persistent-object file.
\par {\uldb\cf11 AOBJ_PREWRITE}{\v idx_aobj_prewrite}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_prewrite}}{\fldrslt }}{\cf1 
\tab }Sent before the AppWare Bus writes the object's data to a project file, an executable, or a persistent-object file.
\par {\uldb\cf11 AOBJ_QUERYPROTOCOL}{\v idx_aobj_queryprotocol}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_queryprotoc}
}{\fldrslt }}{\cf1 \tab }Sent as a result of a call to the {\uldb\cf11 AObjQueryProtocol}{\v idx_aobjqueryprotocol}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf1 gotobutton idx_aobjqueryprotoco}}{\fldrslt }}{\cf1  }or {\uldb\cf11 ATypeQueryProtocol}{\v idx_atypequeryprotocol}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_atypequeryprotoc}}{\fldrslt }}{\cf1  }function.
\par {\uldb\cf11 AOBJ_READ}{\v idx_aobj_read}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutt}{\cf6 on DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_read}}{\fldrslt }}{\cf1 \tab }
\tab Sent when a project is being opened or an application is beginning execution.
\par {\uldb\cf11 AOBJ_VALIDATEOBJECTIDS}{\v idx_aobj_validateobjectids}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_validateobj}
}{\fldrslt }}{\cf1 \tab }Sent when a project is compiled and when a user cuts, copies, or pastes in a way that involves objects.
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 The Message Record}{\v idx_the_message_record}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_the_message_reco}}{\fldrslt }}
\par {\uldb\cf11 Return Values}{\v idx_return_values}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_return_values}}{\fldrslt }}
\par {\uldb\cf11 The Create and Destroy Messages}{\v idx_the_create_and_destroy_messages}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_the_create_and_d}}{\fldrslt }}
\par {\uldb\cf11 Object Versions and the Read Message}{\v idx_object_versions_and_the_read_message}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_object_versions_}}{\fldrslt }}
\par {\uldb\cf11 The Awake and Asleep Messages}{\v idx_the_awake_and_asleep_messages}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_t}{\cf6 
he_awake_and_as}}{\fldrslt }}
\par {\uldb\cf11 The Prewrite and Postwrite Messages}{\v idx_the_prewrite_and_postwrite_messages}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_the_prewrite_and}}{\fldrslt }}
\par {\uldb\cf11 The Edit Object Message}{\v idx_the_edit_object_message}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_the_edit_object_}
}{\fldrslt }}
\par {\uldb\cf11 The Validate Object IDs Message}{\v idx_the_validate_object_ids_message}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_the_validate_obj}}{\fldrslt }}
\par {\uldb\cf11 The Check Object Message}{\v idx_the_check_object_message}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_the_check_object}
}{\fldrslt }}
\par {\uldb\cf11 The Object Assignment Message}{\v idx_the_object_assignment_message}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_the_object_assig}}{\fldrslt }}
\par {\uldb\cf11 The Import and Export Messages}{\v idx_the_import_and_export_messages}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_the_import_and_e}}{\fldrslt }}
\par {\uldb\cf11 The Query Protocol Message}{\v idx_n1_the_query_protocol_message}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_n1_the_query_pro}}{\fldrslt }}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_the_message_reco}{\*\bkmkend idx_the_message_reco}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_the_message_record}} {\caps\fs16\up6 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} The Message Record}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws104:0000}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K}
 The Message Record}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_the_administration_function')')}} The Message Record
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The administration function's pMessageRec parameter is a pointer to a message-record structure. The declaration of the message-record structure is shown below.

\par \pard\plain \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 typedef struct tagAObjMessage
\par   \{
\par   LONG    message1;
\par   LONG    message2;
\par   LONG    message3;
\par   LONG    message4;
\par   char    errorMessage[256];
\par   \}  AObjMessage, FAR* pAObjMessage;
\par 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The message1 field always contains the message being sent. The values of the remaining fields depend on the message being processed.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
For some messages, the contents of the message record are for the private use of the AppWare Bus. Therefore, the administration function should only alter a field's value when it is required to do so in order to correctly process a particular message.

\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_return_values}{\*\bkmkend idx_return_values}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_return_values}} {\caps\fs16\up6 ${\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Return Values}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws104:0005}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Return Values}} {
\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_the_administration_function')')}} Return Values
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 When the administration function receives a message, it should return a value to the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }that indicates the result of pr
ocessing the message. The appropriate return value depends on whether a notification or request message was processed. Appropriate return values for both types of messages are listed in the following table.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Message Type\tab \tab Return Values
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 Request messages\tab A_OK\line A_WARNING\line A_ERROR\line A_MODIFIED\line A_NOTHANDLED
\par \pard \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 Notification messages\tab A_OK\line A_CONTINUE\line A_NOTHANDLED\line 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 If an error or some other exceptional condition occurs during message processing, an appropriate message should be displayed to the user. The {\uldb\cf11 
AObjReportErro}{\uldb\cf11 r}{\v idx_aobjreporterror}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjreporterror}}{\fldrslt }}{
\cf1  }function should be used to display error and warning messages. The administration function has to return the value of the AObjReportError function whenever the AObjReportError function is called.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_the_create_and_d}{\*\bkmkend idx_the_create_and_d}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_the_create_and_destroy_messages}} {
\caps\fs16\up6 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} The Create and Destroy Messages}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws104:0010}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 K} The Create and Destroy Messages}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_the_administration_function')')}} The Create and Destroy Messages

\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 Whenever an object is created, the administration function for that object is called with the {\uldb\cf11 AOBJ_CREATED}{\v idx_aobj_created}{\field{\*\fldinst {
\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_created}}{\fldrslt }}{\cf1  }
message. The oiObject parameter contains the object ID for the newly created object. The administration function should perform any necessary initialization of the object. Generally, the administration function allocates and initializes the object's data 
blocks.
\par If the new object is a temporary object, the message4 field of the message record is set to the value AOBJ_TEMPORARY. Temporary objects are created by runtime calls to the {\uldb\cf11 AObjCreate}{\v idx_aobjcreate}{\field{\*\fldinst {\cf1 
macrobutton NextField}{\cf1  }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjcreate}}{\fldrslt }}{\cf1  }function. It is not possible to query the {\uldb\cf11 AppWare Bus}{\v 
idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
to determine whether an object is a temporary object. If an object's behavior is dependent on whether it is a temporary object, the fact that the object is a temporary object should be stored in one of the object's data blocks during the processing of the
 {\uldb\cf11 AOBJ_CREATED}{\v idx_aobj_created}{\field{\*\fldinst {\cf1 macrobutton NextFiel}{\cf1 d }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_created}}{\fldrslt }}{
\cf1  }message.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
As an example, consider the Number object, which stores a flag to indicate whether it is a temporary object. Its storage mode can be configured at design time to store a floating-point number or a whole number. At run time, the assignment of a real or int
eger value to a Number object does not change the specified storage mode for the object. However, the storage mode of a temporary Number object can reflect the numerical type of the last value that was assigned to the object.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 The administration function is called with the {\uldb\cf11 AOBJ_DESTROYED}{\v idx_aobj_destroyed}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_destroyed}}{\fldrslt }}{\cf1  }
message whenever an object is destroyed. The AOBJ_DESTROYED message allows the object to perform any necessary cleanup before the object is destroyed. For example, if the object has allocated any memory or resources other than object data blocks, the memo
ry or resources should be freed when the AOBJ_DESTROYED message is received. It is not necessary to destroy the object's data blocks, since these are destroyed by the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }after the {\uldb\cf11 AOBJ_DESTROYED}{\v idx_aobj_destroyed}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_destroyed}}{\fldrslt }}{\cf1  }message has been processed.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_object_versions_}{\*\bkmkend idx_object_versions_}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_object_versions_and_the_read_message}} {
\caps\fs16\up6 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Object Versions and the Read Message}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws104:0015}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 K} Object Versions and the Read Message}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_the_administration_function')')}}
 Object Versions and the Read Message
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 It occasionally becomes necessary for ALM developers to change the structure of the data stored
 in an object's data blocks. When this occurs, code written to operate on the new version of the structures is typically unable to operate on the old version of the structures. The {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }provides the {\uldb\cf11 AOBJ_READ}{\v idx_aobj_read}{\field{\*\fldinst 
{\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_read}}{\fldrslt }}{\cf1  }
message in order to allow an object type to manage different data-structure versions as objects are read from disk. However, the object type has to implement its own version stamping.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
Version stamping is most easily done by storing a structure version number in the first two or four bytes of an object's first data block. Storing the version number in the first bytes of the first data block eliminates any dependence on the remaining str
ucture of the data block. The version number is generally just a constant in the object type's code that is incremented each time the structure changes.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 When an object is read from disk, the object's administration function is called with the {\uldb\cf11 AOBJ_READ}{\v idx_aobj_read}{\field{\*\fldinst {\cf1 macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_read}}{\fldrslt }}{\cf1  }
notification message. The purpose of the AOBJ_READ message is to allow the administration function to check the structure version of the object to see whether it can be supported by the current DLL. If the version number in the object is less than the ver
sion number compiled into the DLL, the administration function should update the structures to those defined by the current version of the DLL. Since the {\uldb\cf11 AOBJ_READ}{\v idx_aobj_read}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_read}}{\fldrslt }}{\cf1  }
message is the first message sent to an object that is read from disk, following this procedure allows all other code in an object type's DLL to assume an object's structures are at the current structure version.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 It might be impractical or even impossible at times to update old structure versions. In such cases, an object type's DLL should maintain a compa
tibility version value in addition to the current version value. The compatibility version should be the lowest structure version that the DLL can update to the current structure version.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
As projects or applications are moved between machines, it is possible for an object read from disk to be of a later version than what is known by the corresponding ALM DLL. When this occurs, the version number in the object will be greater than the versi
on number compiled into the DLL. This situation can only be corrected by installation of a later version of the ALM's DLL.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 When it is not possible for a DLL to support the current structure version, the {\uldb\cf11 AObjReportError}{\v idx_aobjreporterror}{\field{\*\fldinst {\cf1 macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjreporterror}}{\fldrslt }}{\cf1  }
function should be called to report an unsupported object-version error. If the AObjReportError function is called, the message-string parameter should contain the object type's name followed by a tab character and the DLL name. The info parameter should 
contain the current DLL version number.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 The following code illustrates structure-version checking.
\par \pard\plain \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 #define OEXAM_CURRENTVERSION\tab \tab \tab \tab \tab \tab 4L\line #define OEXAM_COMPATABILITYVERSION\tab \tab \tab \tab 2L
\par \pard \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 
\par long ALMCALLBACK AdminFunc(
\par \tab OBJECTID\tab \tab \tab oiObject,
\par \tab pAObjMessage\tab \tab pMessageRec)
\par \tab \{
\par \tab LPLONG\tab \tab \tab \tab pVersion;
\par \tab long\tab \tab \tab \tab \tab result = A_OK;
\par 
\par \tab switch (pMessagRec->message1)
\par \tab \tab \{
\par \tab \tab \tab \tab \tab \tab \tab .
\par \tab \tab \tab \tab \tab \tab \tab .
\par \tab \tab \tab \tab \tab \tab \tab .
\par \tab \tab case AOBJ_READ:
\par \pard \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \tab \tab \tab pVersion = (LPLONG)AObjLockData(oiObject, 0);\line \tab \tab \tab if (!pVersion ||
\par \tab \tab \tab \tab \tab (*pVersion < OEXAM_COMPATABILITYVERSION) ||
\par \pard \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \tab \tab \tab \tab \tab (*pVersion > OEXAM_CURRENTVERSION))
\par \tab \tab \tab \tab \{
\par \tab \tab \tab \tab result = AObjReportError(oiObject, AOBJ_READ,       
\par \tab \tab \tab \tab \tab \tab \tab \tab A_ERROR, 
\par \pard \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \tab \tab \tab \tab \tab \tab \tab \tab "Example Object/tALM_EXAM.DLL", 
\par \pard \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \tab \tab \tab \tab \tab \tab \tab \tab OEXAM_CURRENTVERSION);
\par \tab \tab \tab \tab \}
\par \tab \tab \tab else if (*pVersion < OEXAM_CURRENTVERSION)
\par \tab \tab \tab \tab \{
\par \tab \tab \tab \tab //update structures here
\par \tab \tab \tab \tab \}
\par \tab \tab \tab if (pVersion)
\par \tab \tab \tab \tab AObjUnlockData(oiObject, 0);
\par \tab \tab \tab break;
\par 
\par \tab \tab default:
\par \tab \tab \tab result = A_NOTHANDLED;
\par \tab \tab \tab break;
\par \pard \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \tab \tab \}\line \line \tab return result;   
\par \pard \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 
\par \tab \}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_the_awake_and_as}{\*\bkmkend idx_the_awake_and_as}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_the_awake_and_asleep_messages}} {
\caps\fs16\up6 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} The Awake and Asleep Messages}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws104:0020}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 K} The Awake and Asleep Messages}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_the_administration_function')')}} The Awake and Asleep Messages
\par \pard\plain \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 As an object is read into memory, the object type's administration routine is called with the {\uldb\cf11 AOBJ_AWAKENED}{\v idx_aobj_awakened}{\field{\*\fldinst 
{\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_awakened}}{\fldrslt }}{\cf1  }
message. This occurs when a project is opened in AppWare and when an AppWare Bus application begins execution. The AOBJ_AWAKENED message allows the object to create any necessary runtime information or structures.
\par In order to keep startup processing time to a minimum, you should ensure that the administration function perform
s the minimum amount of processing that is practical when it handles the AOBJ_AWAKENED message. The AOBJ_AWAKENED message is always sent to the first instance of each object type in a project or application. If the message is not handled by the administra
tion function (that is, it returns A_NOTHANDLED), the AOBJ_AWAKENED message will not be sent to any of the object type's remaining instances. If the administration routine processes the first receipt of the AOBJ_AWAKENED message but does not require proce
ssing for each object, it should return A_OK. This will cause the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
to stop sending the AOBJ_AWAKENED message to remaining instances of the object type. If the object type requires that processing occur for each object, the administration function should return A_CONTINUE. As long as A_CONTINUE is returned by the administ
ration function, the AppWare Bus will continue sending the AOBJ_AWAKENED message to all objects as part of the startup process of an AppWare Bus application.
\par The {\uldb\cf11 AOBJ_ASLEEP}{\v idx_aobj_asleep}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_asleep}}{\fldrslt }}{\cf1  }
message is the complement of the {\uldb\cf11 AOBJ_AWAKENED}{\v idx_aobj_awakened}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_aobj_awakened}}{\fldrslt }}{\cf1  }message. The administration function is called with the AOBJ_ASLEEP message whenever an object is removed from memory but is not deleted. This occurs when a project is closed from within
 AppWare and when an {\uldb\cf11 AppWare application}{\v idx_appware_bus_applications}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_appware_bus_appl}}{\fldrslt }}{\cf1  }
quits. The AOBJ_ASLEEP message allows the administration function to perform any required cleanup of runtime structures that might have been allocated. The AppWare Bus uses the same rules for sending the AOBJ_ASLEEP message that it uses for sending the AO
BJ_AWAKENED message. These rules were described in the previous paragraph.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 The AOBJ_AWAKENED and AOBJ_ASLEEP messages are often used to initialize and clean up the runtime data stored with an object or object type.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_the_prewrite_and}{\*\bkmkend idx_the_prewrite_and}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_the_prewrite_and_postwrite_messages}} {
\caps\fs16\up6 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} The Prewrite and Postwrite Messages}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws104:0025}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 K} The Prewrite and Postwrite Messages}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_the_administration_function')')}}
 The Prewrite and Postwrite Messages
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
Some object-type implementations might store part of an object's data outside of an object's data blocks. Such objects might need to be notified when their data is being written to disk or memory by the AppWare Bus. The {\uldb\cf11 AOBJ_PREWRITE}{\v 
idx_aobj_prewrite}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_prewrite}}{\fldrslt }}{\cf1  }and {\uldb\cf11 AOBJ_POSTWRITE}
{\v idx_aob}{\v j_postwrite}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_postwrite}}{\fldrslt }}{\cf1  }
messages exist for this purpose. The AOBJ_PREWRITE message is sent to an object just before the object's data is written. The AOBJ_POSTWRITE message is sent to an object just after its data has been written. The processing that occurs when these messages 
are received, if any, is dependent on the implementation of the object type.
\par The AppWare Bus uses the same rules for interpreting the return value of the administration routine for the {\uldb\cf11 AOBJ_PREWRITE}{\v idx_aobj_prewrite}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_prewrite}}{\fldrslt }}{\cf1  }and {\uldb\cf11 AOBJ_POSTWRITE}{\v idx_aobj_postwrite}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {
\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_postwrite}}{\fldrslt }}{\cf1  }messages as it uses for the {\uldb\cf11 AOBJ_AWAKENED}{\v idx_aobj_awakened}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_awakened}}{\fldrslt }}{\cf1  }message. These rules are described in the previous section.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_the_edit_object_}{\*\bkmkend idx_the_edit_object_}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_the_edit_object_message}} {
\caps\fs16\up6 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} The Edit Object Message}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws104:0030}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 K} The Edit Object Message}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_the_administration_function')')}} The Edit Object Message
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 Most object types require that th
e application designer be able to configure or customize the attributes of a particular object in order to modify its behavior. The {\uldb\cf11 AOBJ_EDITOBJECT}{\v idx_aobj_editobject}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_editobject}}{\fldrslt }}{\cf1  }
message is provided for this purpose. It is sent when a user chooses to edit an object from within AppWare. It is also sent as a result of a call to the {\uldb\cf11 AObjEdit}{\v idx_aobjedit}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjedit}}{\fldrslt }}{\cf1  }function. Use of t
he AObjEdit function allows the edit routine of one object to invoke the edit routine of other related objects.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
When an object receives the AOBJ_EDITOBJECT message, the administration function should allow the user to "edit" the object's data. This is most often accomplished by displaying an editing dialog that allows the application designer to enter or modify the
 appropriate information. However, some object types might require a more complex interaction than an editing  dialog allows. The Window object,
 which provides a fully graphical window-layout capability, is a good example of the potential complexity of an object's editing routine.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
If an object stores object IDs in its data blocks, the stored IDs will become invalid if the referenced objects are deleted from within AppWare. An object has to validate stored object IDs when the AOBJ_EDITOBJECT message is processed. Object IDs can be v
alidated with the {\uldb\cf11 AObjCheckType}{\v idx_aobjchecktype}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjch}{\cf1 
ecktype}}{\fldrslt }}{\cf1  }function. If a specified object ID is invalid, the function returns FALSE.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
Object ID validation should occur before object data is displayed for editing. When an invalid object ID is encountered, the administration function should handle the case in a way that is as transparent to the user as possible. For example, consider the 
Menu object. It stores the object IDs of the menu items that appear in the menu. If an application designer deletes a Menu Item object that was added previously to a menu, 
the Menu object's administration function deletes the corresponding item information from its data block.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
If possible, it is a good practice to design your editing routines so that it is difficult or impossible for the user to enter incorrect or inconsistent values. At a minimum, the edit routine should check the entered data for correctness when editing ends
. If problems are found, an appropriate error or warning message should be displayed before the administration function is exited. 
\par If a user cancels
 changes or does not modify the object's data, the administration function should return A_OK. If changes are made to the object's data, the administration function should return A_MODIFIED. Returning A_MODIFIED informs the AppWare Bus that the object, an
d therefore the project, has been modified. In this way, changes will not be lost accidently.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_the_validate_obj}{\*\bkmkend idx_the_validate_obj}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_the_validate_object_ids_message}} {
\caps\fs16\up6 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} The Validate Object IDs Message}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws104:0035}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 K} The Validate Object IDs Message}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_the_administration_function')')}} The Validate Object IDs Message

\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 Many object types establish a relationship between their objects and other objects. For example, the Window object has
 to record which objects appear in a particular window. Such relationships are generally maintained by storing the object IDs of related objects within an object's data blocks. The Window object stores the object IDs of all of the objects that appear in t
he window. Likewise, a Menu object stores the object IDs for all of the menu items that appear in the menu. 
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 During AppWare's clipboard operations and during compilation, it is possible for the object IDs of related objects to change. When this occurs, the
 administration function is called with the {\uldb\expnd-5\cf11 AOBJ_VALIDATEOBJECTIDS}{\v\expnd-5 idx_aobj_validateobjectids}{\field{\*\fldinst {\expnd-5\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\expnd-5\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\expnd-5\cf1 gotobutton idx_aobj_validateobj}}{\fldrslt }}{\cf1  }
message. Because the AppWare Bus does not know whether an object stores object IDs, the AOBJ_VALIDATEOBJECTIDS message is sent to each object.
\par If an object stores object IDs, it has to call the {\uldb\cf11 AObjValidateID}{\v idx_aobjvalidateid}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {
\cf1 gotobutton idx_aobjvalidateid}}{\fldrslt }}{\cf1  }function for each object ID that it stores whenever the object receives the {\uldb\cf11 AOBJ_VALIDATEOBJECTIDS}{\v idx_aobj_validateobjectids}{\field{\*\fldinst {\cf1 macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_validateobj}}{\fldrslt }}{\cf1  }message. The {\uldb\cf11 AObjValidateID}{\v idx_aobjvalidateid}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjvalidateid}}{\fldrslt }}{\cf1  }
function takes as parameters a pointer to the location where the object ID is stored and a pointer to the {\uldb\cf11 AObjMessage}{\v idx_aobjmessage}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjmessage}}{\fldrslt }}{\cf1  }record that is passed to the administration function. {\uldb\cf11 AObjValidateID}{\v idx_aobjvalidateid}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjvalidateid}}{\fldrslt }}{\cf1  }uses the information in the {\uldb\cf11 AObjMessage}{\v idx_aobjmessage}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjmessage}}{\fldrslt }}{\cf1  }
record to update the stored object ID. Do not directly alter the fields in the {\uldb\cf11 AObjMessage}{\v idx_aobjmessage}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf1 gotobutton idx_aobjmessage}}{\fldrslt }}{\cf1  }record when you process the AOBJ_VALIDATEOBJECT message.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_the_check_object}{\*\bkmkend idx_the_check_object}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_the_check_object_message}} {
\caps\fs16\up6 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} The Check Object Message}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws104:0040}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 K} The Check Object Message}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_the_administration_function')')}} The Check Object Message
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 When a project is compiled, the {\uldb\cf11 AOBJ_CHECKOBJECT}{\v idx_aobj_checkobject}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_checkobject}}{\fldrslt }}{\cf1  }
message is sent to each object in the project. As the message is received, the administration function should check the general consistency and correctness of the information stored in the object's data blocks. Error messages or warning messages should be
 displayed by calling the {\uldb\cf11 AObjReportError}{\v idx_aob}{\v jreporterror}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_aobjreporterror}}{\fldrslt }}{\cf1  }function
\par If an object stores object IDs in its data blocks, it has to validate these IDs when the {\uldb\cf11 AOBJ_CHECKOBJECT}{\v idx_aobj_checkobject}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_checkobject}}{\fldrslt }}{\cf1  }message is processed. Object IDs can be validated with the {\uldb\cf11 AObjCheckType}{\v idx_aobjchecktype}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjchecktype}}{\fldrslt }}{\cf1  }function. It returns FALSE to indi
cate that a specified object ID is invalid. An invalid object ID generally occurs when the user has deleted the object from within AppWare. When an invalid object ID is encountered, the {\uldb\cf11 administration functions}{\v idx_administration_functions
}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_administration_f}}{\fldrslt }}{\cf1  }
should handle the case as transparently to the user as possible.
\par For example, consider the Menu object. It stores the object IDs of the menu items that appear in the menu. If an application d
esigner deletes a Menu Item object that has been added to a menu, the Menu object's administration function deletes the corresponding item information from one or more of its data blocks when it processes the {\uldb\cf11 AOBJ_CHECKOBJECT}{\v 
idx_aobj_checkobject}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_checkobject}}{\fldrslt }}{\cf1  }message.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_the_object_assig}{\*\bkmkend idx_the_object_assig}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_the_object_assignment_message}} {
\caps\fs16\up6 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} The Object Assignment Message}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws104:0045}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 K} The Object Assignment Message}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_the_administration_function')')}} The Object Assignment Message
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The {\uldb\cf11 AOBJ_ASSIGNOBJECT}{\v idx_aobj_assignobject}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_assignobjec}}{\fldrslt }}{\cf1  }message i
s used to request that an object type assign the value of one of its objects to a second object of the same type. The destination object is passed in the oiObject parameter and the source object is passed in the message3 field of the {\uldb\cf11 
AObjMessage}{\v idx_aobjmessage}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjmessage}}{\fldrslt }}{\cf1  }record.
\par The {\uldb\cf11 AOBJ_ASSIGNOBJECT}{\v idx_aobj_assignobject}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_assignobjec}
}{\fldrslt }}{\cf1  }message is sent when the {\uldb\cf11 AObjAssign}{\v idx_aob}{\v jassign}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_aobjassign}}{\fldrslt }}{\cf1  }
function is called with a source and destination object of the same type. As an AppWare Bus API function, AObjAssign can be called by any ALM. For example, the general ALM Assign function uses the AObjAssign function to allow an application designer to as
sign one object to another object. The AObjAssign function is also called when an ALM function outputs object parameters that are linked to objects in an object group. 
\par The {\uldb\cf11 AOBJ_ASSIGNOBJECT}{\v idx_aobj_assignobject}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_assignobjec}
}{\fldrslt }}{\cf1  }
message allows the object type to control the choice of data that is copied from one object to another. The source-object data should not be modified, but the destination object's data can be modified in any manner that is appropriate to the object's oper
ation. Only data that represents the value of an object is typically assigned. For example, the assignment of one Number object to another object copies only the numeric value. The font, style, and format are not transferred.
\par If an object type stores object IDs, memory handles, or memory addresses, these values should not be copied during the processing of the {\uldb\cf11 AOBJ_ASSIGNOBJECT}{\v idx_aobj_assignobject}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_assignobjec}}{\fldrslt }}{\cf1  }message.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_the_import_and_e}{\*\bkmkend idx_the_import_and_e}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_the_import_and_export_messages}} {
\caps\fs16\up6 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} The Import and Export Messages}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws104:0050}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 K} The Import and Export Messages}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_the_administration_function')')}} The Import and Export Messages
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bu}{\cf1 s}}{\fldrslt }}{\cf1  }
defines a platform-neutral file format for transferring projects between different hardware and operating-system platforms. This file format is called the Universal Program Structure File (UPSF) format. The process of transferring a project from one platf
orm to another involves exporting the project on the source platform in order to create a UPSF version of the project. The UPSF version is then imported onto the target platform in order to create a platform-specific project file.
\par The UPSF version of a project contains the information that is stored in each object in the project. This means that the objects are required to participate in the import and export process. When a project is exported, the {\uldb\cf11 AOBJ_EXPORTOBJECT}{
\v idx_aobj_exportobject}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_exportobjec}}{\fldrslt }}{\cf1  }
message is sent to each object in the project. The administration function should export the object's data by using the AUPSF functions of the AppWare Bus API.
\par When a project is imported from a UPSF file, an object is created for each object that exists in the project. These objects receive the {\uldb\cf11 AOBJ_CREATED}{\v idx_aobj_created}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_created}}{\fldrslt }}{\cf1  }message. Next, the AppWare Bus sends the {\uldb\cf11 AOBJ_IMPORTOBJECT}{\v idx_aobj_importobject}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_importobjec}}{\fldrslt }}{\cf1  }
message to each object in the project. The administration function should import the object's data by using the AUPSF functions of the AppWare Bus API.
\par For more information about importing and exporting objects, refer to {\uldb\cf11 Chapter 6}{\v idx_chapter_6}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf1 gotobutton idx_chapter_6}}{\fldrslt }}{\cf1 .}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_n1_the_query_pro}{\*\bkmkend idx_n1_the_query_pro}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_n1_the_query_protocol_message}} {
\caps\fs16\up6 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} The Query Protocol Message}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws104:0055}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 K} The Query Protocol Message}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_the_administration_function')')}} The Query Protocol Message
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
supports the implementation of object protocols. A protocol is a method of communication between objects. It defines a set of services that are provided by an object that imple
ments the protocol. An object that uses the protocol can then interact with any object that implements the protocol.
\par The administration function of object types that implement a protocol have to handle the {\uldb\cf11 AOBJ_QUERYPROTOCOL}{\v idx_aobj_queryprotocol}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_queryprotoc}}{\fldrslt }}{\cf1  }message. This message is sent to an object type or to an object by the {\uldb\cf11 ATypeQueryProtocol}{\v idx_atypequeryprotocol}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_atypeque}{\cf1 ryprotoc}}{\fldrslt }}{\cf1  }and the {\uldb\cf11 AObjQueryProtocol}{
\v idx_aobjqueryprotocol}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjqueryprotoco}}{\fldrslt }}{\cf1  }
functions, respectively.
\par For more information about the AOBJ_QUERYPROTOCOL message and protocols in general, refer to {\uldb\cf11 Chapter 5}{\v idx_chapter_5}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}
}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_chapter_5}}{\fldrslt }}{\cf1 .} 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\fs16\up6 {\*\bkmkstart idx_n1_signals}{\*\bkmkend idx_n1_signals}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_n1_signals}} {\fs16\up6 ${\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 $} Signals}} {\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws100:0025}} {\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Signals}} {\fs16\up6 !{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_contents')')}} Signals
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 An important element of the implementation of an object type is the definition of its signals. A signal exposes the occurrence of a sig
nificant event to the application designer during an application's execution. The application designer selects appropriate signals to trigger the execution of the function chains within an application. A push-button object might define a Button Pressed si
gnal to indicate that a button was pressed by an application user. A Window object might define indicator signals when a window is opened, closed, activated, or resized.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 A signal consists of two pieces of information: a signal ID and a signal name. The sig
nal ID is a long integer value that is chosen by the implementer of an object type. The signal IDs for a particular object type have to be unique, but other objects types can reuse the same signal IDs. Although signal IDs can be any value, they are typica
lly sequential and begin with one.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
A signal name is a NULL-terminated character string. Its value is displayed to the application designer and should be indicative of the event the signal represents. For example, "Pressed" could indicate that a button was 
pressed and "Opened" could indicate that a window was opened.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 When AppWare needs to know the set of signals defined for an object, the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }sends the {\uldb\cf11 AOBJ_BUILDSIGNALS}{\v idx_aobj_buildsignals}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_buildsignal}}{\fldrslt }}{\cf1  }message to that object. The message2 field of the {\uldb\cf11 
AObjMessage}{\v idx_aobjmessage}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton}{\cf1  idx_aobjmessage}}{\fldrslt }}{\cf1  }
record will contain the ID of a zero-length memory block. The administration function should size the memory block just large enough to contain an array of {\uldb\cf11 AObjSignalRecord}{\v idx_aobjsignalrecord}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjsignalrecord}}{\fldrslt }}{\cf1  }
structures. There should be one entry in the array for each signal defined by the object. The {\uldb\cf11 AObjSignalRecord}{\v idx_aobjsignalrecord}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjsignalrecord}}{\fldrslt }}{\cf1  }structure contains both the signal ID and the signal name for a specific signal. Its declaraction is as follows:
\par \pard\plain \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 typedef struct tagAObjSignalRecord
\par \tab \{
\par \tab LONG\tab \tab theID;
\par \tab char\tab \tab theName[256];
\par \tab \} AObjSignalRecord, FAR * pAObjSignalRecord;
\par 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The following code fragment illustrates the creation of the {\uldb\cf11 AObjSignalRecord}{\v idx_aobjsignalrecord}{\field{\*\fldinst {\cf1 macrobutton NextField 
}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjsignalrecord}}{\fldrslt }}{\cf1  }array:
\par \pard\plain \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 #define SIGNAL_COUNT\tab \tab \tab \tab \tab 3
\par 
\par #define SIGID_CHANGEDRED\tab \tab \tab 1L
\par #define SIGID_CHANGEDYELLOW\tab \tab 2L
\par #define SIGID_CHANGEDGREEN\tab \tab \tab 3L
\par 
\par #define SIGNAME_CHANGEDRED\tab \tab \tab "Changed to red"
\par #define SIGNAME_CHANGEDYELLOW\tab \tab "Changed to yellow"
\par #define SIGNAME_CHANGEDGREEN\tab \tab "Changed to green"
\par 
\par long ALMCALLBACK AdminFunc(
\par \tab OBJECTID\tab \tab \tab \tab oiObject,
\par \tab pAObjMessage\tab \tab \tab pMessageRec)
\par \tab \{
\par \tab long\tab \tab \tab \tab \tab \tab result = A_OK;
\par \tab MEMBLOCKID\tab \tab \tab \tab idSignals;
\par \tab short\tab \tab \tab \tab \tab \tab index;
\par \tab pAobjSignalRecord\tab pSignalArray;
\par 
\par \tab switch (pMessagRec->message1)
\par \tab \tab \{
\par \tab \tab \tab \tab \tab \tab \tab .
\par \tab \tab \tab \tab \tab \tab \tab .
\par \tab \tab \tab \tab \tab \tab \tab .
\par \tab \tab case AOBJ_BUILDSIGNALS:
\par \tab \tab idSignals = (MEMBLOCKID)theSystem->message2;
\par 
\par \tab \tab AMemSetSize(idSignals, 
\par \tab \tab \tab SIGNAL_COUNT*sizeof(pAObjSignalRecord));
\par 
\par \tab \tab pSignalArray =
\par \tab \tab \tab (pAObjSignalRecord)AMemLock(signalMID);
\par 
\par \tab \tab index = 0;
\par 
\par \tab \tab signal[index].theID = SIGID_CHANGEDRED
\par \tab \tab lstrcpy(signal[index++].theName, 
\par \tab \tab \tab \tab \tab SIGNAME_CHANGEDRED);
\par 
\par \tab \tab signal[index].theID = SIGID_CHANGEDYELLOW
\par \tab \tab lstrcpy(signal[index++].theName, 
\par \tab \tab \tab \tab \tab SIGNAME_CHANGEDYELLOW);
\par 
\par \tab \tab signal[index].theID = SIGID_CHANGEDGREEN
\par \tab \tab lstrcpy(signal[index++].theName, 
\par \tab \tab \tab \tab \tab SIGNAME_CHANGEDGREEN);
\par \tab \tab break;
\par 
\par \tab \tab default:
\par \tab \tab result = A_NOTHANDLED;
\par \tab \tab break;
\par \pard \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \tab \tab \}\line \line \tab return result;   
\par \pard \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 
\par \tab \}
\par 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The {\uldb\cf11 AOBJ_BUILDSIGNALS}{\v idx_aobj_buildsignals}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_buildsignal}}{\fldrslt }}{\cf1  }
message is sent to a specific object instead of an object type. This allows the available signals to vary, depending on the configuration of the object. For example, a Menu object could define an "Item selected" signal for each item in the menu. The set o
f signals would depend on how many items were in a particular menu.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
When an object's set of signals is dynamic, as in the menu example above, it is important to select unique signal ID values for each new signal. This will prevent the possibility of confusing an old, invalid signal with a new, valid signal. In the case of
 dynamic signals, unique signal IDs can be created easily by using an ID seed whose value is incremented each time a new ID is allocated. The ID seed is stored in the object's data blocks.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 Signals are triggered at run time when special signal events are posted. Signal events, and events in general, are discussed in {\uldb\cf11 Chapter 4}{\v idx_chapter_4}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_chapter_4}}{\fldrslt }}{\cf1 .}
\par \pard\plain \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 
\par 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\fs16\up6 {\*\bkmkstart idx_responding_to_ev}{\*\bkmkend idx_responding_to_ev}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_responding_to_events}} {\fs16\up6 ${\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Responding to Events}} {\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws100:0030}} {\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Responding to Events}
} {\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_contents')')}} Responding to Events
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 Events are the main communication mechanism within the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1 .}
 The AppWare Bus itself posts events, and ALM objects and functions also post events. Part of the task of implementing an object ty
pe is deciding which events the object type will respond to and then implementing the code that is to be called in response to an event. The events an object type responds to are defined by using the {\uldb\cf11 ALM Builder utility}{\v 
idx_the_alm_builder_utility}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_alm_builder}}{\fldrslt }}{\cf1 .}
 Each event-response definition includes the ID of the event, the name of the entry point to be called, and the DLL where the entry point is to be found. The use of the AppWare Bus event system is discussed in detail in {\uldb\cf11 Chapter 4}{\v 
idx_chapter_4}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_chapter_4}}{\fldrslt }}{\cf1 ,}
 and the configuration of event responses is discussed in {\uldb\cf11 Chapter 7}{\v idx_chapter_7}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_chapter_7}}{\fldrslt }}{\cf1 .}
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_chapter_3}{\*\bkmkend idx_chapter_3}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_chapter_3}}{\plain 
\f3\fs16\cf2\up6\lang1033  }{\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} chap:0003}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Chapter 3}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Chapter 3}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_contents')')}}
 Chapter 3
\par \pard\plain \s29\ri432 \f11\fs60\lang1033 Constructing Functions
\par \pard\plain \s2\sb240\sa120 \b\f3\fs36\cf2\lang1033 Introduction to Function Construction
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 This chapter discusses the concepts you need to understand in order to construct an ALM function in compliance with the {\uldb\cf11 AppWare Bus}{\v idx_t}{\v 
he_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1 .}
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 ALM Functions}{\v idx_alm_functions}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_alm_functions}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_the_function_ent}}{\fldrslt }}
\par {\uldb\cf11 The Function Entry Point}{\v idx_n1_the_function_entry_point}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_n1_the_function_}
}{\fldrslt }}
\par {\uldb\cf11 Function Parameters}{\v idx_n1_function_parameters}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_n1_function_para}
}{\fldrslt }}
\par {\uldb\cf11 Functi}{\uldb\cf11 on Flows}{\v idx_function_flows}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_function_flows}}{\fldrslt }}

\par {\uldb\cf11 Function Errors}{\v idx_function_errors}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_function_errors}}{\fldrslt }}
\par {\uldb\cf11 Required Object Types}{\v idx_required_object_types}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_required_object_}
}{\fldrslt }}{\cf6 
\par }\pard \s21\li720\ri432 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\fs16\up6 {\*\bkmkstart idx_alm_functions}{\*\bkmkend idx_alm_functions}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_alm_functions}} {\fs16\up6 ${\footnote \pard\plain 
\s245 \f3\fs20\lang1033 {\fs16\up6 $} ALM Functions}} {\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws105:0005}} {\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ALM Functions}} {\fs16\up6 !{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_chapter_3')')}} ALM Functions
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 ALM functions provide high-level services to an AppWare Bus application. Functions can be designed to perform operations on one or m
ore objects within a project or to perform ALM services unrelated to any particular object type.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
An ALM function is implemented as a Microsoft Windows DLL. The DLL must have a specific entry point that corresponds to the ALM function. A single DLL can contain many function implementations by having a different entry point for each function. The imple
mentation of a function is described in an ALM configuration file that you can create by using the {\uldb\cf11 ALM Builder utility}{\v idx_the_alm_builder_utility}{\field{\*\fldinst {\cf1 macrobutton N}{\cf1 extField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_alm_builder}}{\fldrslt }}{\cf1 .} The information in the configuration file makes the function available to AppWare.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
In the AppWare application, available functions are represented as icons within the Object & Function Palette. A function is incorporated in an AppWare Bus application when a user drags its icon from the Object & Function Palette into the project area to 
create a function instance. Each function instance represents a call to its particular ALM function.
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Fun}{\uldb\cf11 ction IDs}{\v idx_function_ids}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_function_ids}}{\fldrslt }}
\par {\uldb\cf11 Function Configuration}{\v idx_function_configuration}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_function_configu}
}{\fldrslt }}
\par {\uldb\cf11 Function Execution}{\v idx_function_execution}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_function_executi}}{\fldrslt }}{
\cf6 
\par }\pard \s21\li720\ri432 {\cf6 
\par }\pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_function_ids}{\*\bkmkend idx_function_ids}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_function_ids}} {\caps\fs16\up6 ${\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Function IDs}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws106:0000}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Function IDs}} {
\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_alm_functions')')}} Function IDs
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 Every ALM function is identified by a unique, four-character type identifier, the function ID. The function ID has to be differ
ent from all other function IDs known to a particular installation of the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1 .} To help ensure the global uniqueness of function IDs, Novell provides a function ID registering service. For more information about ID registration, refer to the {\i 
Technical Support Quick Reference. 
\par }Function IDs are part of the configuration information you enter when you use the {\uldb\cf11 ALM Builder utility}{\v idx_the_alm_builder_utilit}{\v y}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_alm_builder}}{\fldrslt }}{\cf1 .} They are entered as a sequence of four characters, such as aSin for the Novell Assign function. Function IDs are used by the {\uldb\cf11 
AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
to identify functions, but function IDs are not used in the code that implements a function.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_function_configu}{\*\bkmkend idx_function_configu}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_function_configuration}} {\caps\fs16\up6 
${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Function Configuration}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws106:0005}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 
K} Function Configuration}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_alm_functions')')}} Function Configuration
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 Every ALM function has to be described in an ALM configuration file. You create configuration files by using the {\uldb\cf11 ALM Builder utility}{\v 
idx_the_alm_builder_utility}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_alm_builder}}{\fldrslt }}{\cf1 .}
 Configuration information for an ALM function includes the following items:
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }The unique function ID
\par {\cf5 \{bmc rr.bmp\}\tab }The function's name
\par {\cf5 \{bmc rr.bmp\}\tab }The function's icon
\par {\cf5 \{bmc rr.bmp\}\tab }The function's DLL and entry point
\par {\cf5 \{bmc rr.bmp\}\tab }The function's help file
\par \pard \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 {\cf5 \{bmc rr.bmp\}\tab }{\uldb\cf11 Input parameters}{\v idx_input_parameters}{\field{\*\fldinst {\cf1 macrobutton Nex}{\cf1 tField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_input_parameters}}{\fldrslt }}{\cf1 
\par }{\cf5 \{bmc rr.bmp\}\tab }{\uldb\cf11 Output parameters}{\v idx_output_parameters}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_output_parameter}}{\fldrslt }}{\cf1 
\par }{\cf5 \{bmc rr.bmp\}\tab }{\uldb\cf11 Function flows}{\v idx_function_flows}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_function_flows}}{\fldrslt }}{\cf1 
\par }\pard \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 {\cf5 \{bmc rr.bmp\}\tab }The required object type
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 Refer to {\uldb\cf11 Chapter 7}{\v idx_chapter_7}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_chapter_7}}{\fldrslt }}{\cf1  }for details about using the {\uldb\cf11 ALM Builder }{\uldb\cf11 utility}{\v idx_the_alm_builder_utility}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_alm_builder}}{\fldrslt }}{\cf1  }to configure an ALM function.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_function_executi}{\*\bkmkend idx_function_executi}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_function_execution}} {\caps\fs16\up6 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Function Execution}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws106:0010}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K}
 Function Execution}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_alm_functions')')}} Function Execution
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 Within AppWare, instances of {\uldb\cf11 ALM functions}{\v idx_alm_functions}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_alm_functions}}{\fldrslt }}{\cf1  }
are arranged by an application designer into function chains. A function chain is a sequence of one or more function instances that are connected by {\uldb\cf11 function flows}{\v idx_function_flows}{\field{\*\fldinst {\cf1 macrobutton Nex}{\cf1 tField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_function_flows}}{\fldrslt }}{\cf1 .}
 The function instances are executed in the order of their appearance within the chain. The execution of a function chain is triggered by a signal from an object.
\par When a function instance is executed, the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }calls the DLL entry point associated with the function. The function's implementation retrieves any {\uldb\cf11 input parameters}{\v idx_input_param}{\v eters}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_input_parameters}}{\fldrslt }}{\cf1 ,} performs the operations defined by the function, supplies any {
\uldb\cf11 output parameters}{\v idx_output_parameters}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_output_parameter}
}{\fldrslt }}{\cf1 ,} sets the appropriate function flow, and returns control to the AppWare Bus. The AppWare Bus then executes the next function in the chain as indicated by the specified function flow.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\fs16\up6 {\*\bkmkstart idx_n1_the_function_}{\*\bkmkend idx_n1_the_function_}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_n1_the_function_entry_point}} {\fs16\up6 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} The Function Entry Point}} {\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws105:0015}} {\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K}
 The Function Entry Point}} {\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_chapter_3')')}} The Function Entry Point
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 An ALM function is 
implemented by a single entry point into a DLL. There has to be one exported entry point for each ALM function implemented within a DLL. The function's entry point is called by the AppWare Bus when the bus executes a function instance within a function ch
ain. The prototype for the function's entry point has to be declared as follows:
\par \pard\plain \s26\li1440\ri432\tldot\tx576\tqr\tlul\tx864\tldot\tx1728\tx1890\tqr\tlul\tx1980\tldot\tx2304\tqr\tlul\tx2592\tlul\tx2880\tqc\tlul\tx3168\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896\tldot\tx5760\tldot\tx6336 \f9\fs18\lang1033 
void ALMCALLBACK fnct(
\par \tab pAEvtInfo\tab \tab pEvent,
\par \tab pAObjMessage  \tab pMessageRec);
\par 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The type modifier ALMCALLBACK is defined by the AppWare Bus API in the a_alm.h file. The pEvent p
arameter points to the event record that caused the AppWare Bus to call the function entry point. (For more information about events, refer to {\uldb\cf11 Chapter 4}{\v idx_chapter_4}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_chapter_4}}{\fldrslt }}{\cf1 .}) Your code will not need to use this parameter and should not modify the contents of the event record. 
\par The pMessageRec parameter is a pointer to an {\uldb\cf11 AObjMessage}{\v idx_aobjmessage}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_aobjmessage}}{\fldrslt }}{\cf1  }record. The {\uldb\cf11 AObjMe}{\uldb\cf11 ssage}{\v idx_aobjmessage}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf1 gotobutton idx_aobjmessage}}{\fldrslt }}{\cf1  }is declared as follows:
\par \pard\plain \s26\li1440\ri432\tldot\tx576\tqr\tlul\tx864\tldot\tx1728\tx1890\tqr\tlul\tx1980\tldot\tx2304\tqr\tlul\tx2592\tlul\tx2880\tqc\tlul\tx3168\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896\tldot\tx5760\tldot\tx6336 \f9\fs18\lang1033 
\tab typedef struct tagAObjMessage
\par \tab \tab \{
\par \tab \tab LONG\tab message1;
\par \tab \tab LONG\tab message2;
\par \tab \tab LONG\tab message3;
\par \tab \tab LONG\tab message4;
\par \tab \tab char\tab errorMessage[256];
\par \tab \tab \} AObjMessage, FAR* pAObjMessage;
\par 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
The message1 field is used to return flow information to the AppWare Bus and the errorMessage field is used to specify error messages that are to be displayed for an application designer. Use of the {\uldb\cf11 AObjMessage}{\v idx_a}{\v objmessage}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjmessage}}{\fldrslt }}{\cf1  }
record is discussed in detail later in this chapter.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\fs16\up6 {\*\bkmkstart idx_n1_function_para}{\*\bkmkend idx_n1_function_para}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_n1_function_parameters}} {\fs16\up6 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Function Parameters}} {\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws105:0020}} {\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K}
 Function Parameters}} {\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_chapter_3')')}} Function Parameters
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
An ALM function can have any combination of input and output parameters; however, neither input parameters nor output parameters are required. The input and output parameters are specified as part of the function's configuration information. Parameter val
ues are passed as ALM objects and are referenced by object IDs. A parameter to an ALM function cannot be a language-defined type such as a long integer or a char*.
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Parameter Indexes}{\v idx_parameter_indexes}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_parameter_indexe}}{\fldrslt }}
\par {\uldb\cf11 Input Parameters}{\v idx_input_parameters}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_input_parameters}}{\fldrslt }}
\par {\uldb\cf11 Output Parameters}{\v idx_output_parameters}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_output_parameter}}{\fldrslt }}

\par {\uldb\cf11 Parameter Attributes}{\v idx_parameter_attributes}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 m}{\cf6 acrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_parameter_attrib}
}{\fldrslt }}
\par \pard \s21\li720\ri432 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_parameter_indexe}{\*\bkmkend idx_parameter_indexe}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_parameter_indexes}} {\caps\fs16\up6 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Parameter Indexes}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws107:0000}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K}
 Parameter Indexes}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_function_parameters')')}} Parameter Indexes
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 When you configure parameters with the {\uldb\cf11 ALM Builder utility}{\v idx_the_alm_builder_utility}{\field{\*\fldinst {\cf1 macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_alm_builder}}{\fldrslt }}{\cf1 ,} you create an ordered list of {\uldb\cf11 input parameters}{\v idx_input_parameters}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_input_parameters}}{\fldrslt }}{\cf1  }and an ordered list of {\uldb\cf11 
output parameters}{\v idx_output_parameters}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_output_parameter}}{\fldrslt }}{\cf1 .}
 A parameter's ordinal position in a parameter list is referred to as its index. The first parameter in the list has an index of one. If an AppWare Bus API function manipulates parameters, it references specific parameters by their index.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_input_parameters}{\*\bkmkend idx_input_parameters}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_input_parameters}} {\caps\fs16\up6 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Input Parameters}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws107:0005}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K}
 Input Parameters}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_function_parameters')')}} Input Parameters
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
Input parameters are used for two basic purposes. First, they can specify one or more objects to be operated upon. For example, one input parameter for the Show Window function is the Window object to be show
n. Second, an input parameter can provide data to a function. For example, one input parameter for the Notify function is a Text object that contains the text to be displayed in a message box.
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Input Retrieval}{\v idx_input_retrieval}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_input_retrieval}}{\fldrslt }}
\par {\uldb\cf11 Input Constants}{\v idx_input_constants}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_input_constants}}{\fldrslt }}
\par \pard \s21\li720\ri432 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_input_retrieval}{\*\bkmkend idx_input_retrieval}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_input_retrieval}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Input Retrieval}} {\plain \f3\fs16\cf2\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws108:0000}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Input Retrieval}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_input_parameters')')}} Input Retrieval
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 Two AppWare Bus API functions are used to retrieve {\uldb\cf11 input}{\uldb\cf11  parameters}{\v idx_input_parameters}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_input_parameters}}{\fldrslt }}{\cf1 :} {\uldb\cf11 AFuncGetParameter}{\v idx_afuncgetparameter}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_afuncgetparamete}}{\fldrslt }}{\cf1  }and {\uldb\cf11 AFuncGetTypedParameter}{\v 
idx_afuncgettypedparameter}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_afuncgettypedpar}}{\fldrslt }}{\cf1 .} 
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 The behavior of AFuncGetParameter{\cf1  }is as follows:
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }If an input parameter is connected to a permanent object, AFuncGetParameter{\cf1  }returns the ID of that object. 

\par \pard \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 {\cf5 \{bmc rr.bmp\}\tab }If an input is connected directly to another function's output parameter, AFuncGetParameter{\cf1  }
returns the ID of the object that was last set as the value for the output parameter. If the ALM function that sets the output parameter has not yet been executed, AFuncGetParameter{\cf1  }returns zero.
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The AFuncGetParameter{\cf1  }
function is generally used when you don't need to know the type of the input parameter or when you need to avoid the parameter checking and type-conversion features of the AFuncGetTypedParameter function.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
The AFuncGetTypedParameter function allows you to specify the type of the object you expect to be returned. If the connected object's type is the same as the specified type, the AFuncGetTypedParameter behaves the same way as the AFuncGetParameter{\cf1  }
function. However, if the connected object's type is not the same as the specified type, the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }will create 
a temporary object of the specified type and use the text-interchange protocol to set the temporary object's value. AFuncGetTypedParameter will then return the ID of the temporary object. The AppWare Bus can only perform the type conversion if the connect
ed object's type and the specified object's type both support the text-interchange protocol. If type conversion is not possible, AFuncGetTypedParameter returns zero.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 If no input parameter is supplied, both AFuncGetParameter{\cf1  }and AFuncGetTypedParameter will return zero. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_input_constants}{\*\bkmkend idx_input_constants}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_input_constants}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Input Constants}} {\plain \f3\fs16\cf2\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws108:0005}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Input Constants}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_input_parameters')')}} Input Constants
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 AppWare allows a constant text sting to be specified as an input's value. If {\uldb\cf11 AFuncGetParameter}{\v idx_afuncgetparameter}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_afuncgetparamete}}{\fldrslt }}{\cf1  }
is called to retrieve an input that is specified as a constant text string, the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}
}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }will create a temporary text object to contain the text string and AFuncGetParameter{\cf1  }will return the text object's ID. If {\uldb\cf11 AFuncGetTypedParameter}{
\v idx_afuncgettypedparameter}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_afuncgettypedpar}}{\fldrslt }}{\cf1  }
is called to retrieve an input specified as a constant text string, the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }attempts to use the text-interchange protocol to create a temporary object of the specified type. If the specified type supports the text-interchange protocol, {\uldb\cf11 
AFuncGetTypedParameter}{\v idx_afuncgettypedparameter}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_afuncgettypedpar}}{\fldrslt }}
{\cf1  }will return the ID of the temporary object. Otherwise, AFuncGetTypeParameter will return zero. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_output_parameter}{\*\bkmkend idx_output_parameter}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_output_parameters}} {\caps\fs16\up6 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Output Parameters}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws107:0010}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K}
 Output Parameters}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_function_parameters')')}} Output Parameters
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
An ALM function can have any number of output parameters. Output parameters are used to contain the result of a function. They are most often temporary objects created by the function. For example, the output of the Number object's Add function is a tem
porary object created to contain the sum of the two inputs. However, outputs can also be permanent objects. For example, the Group object's Get Object function outputs a permanent object that is contained in the Group object.
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Setting Outputs}{\v idx_setting_outputs}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_setting_outputs}}{\fldrslt }}
\par {\uldb\cf11 AFuncGetOutput Example}{\v idx_afuncgetoutput_example}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_afuncgetoutput_e}
}{\fldrslt }}
\par \pard \s21\li720\ri432 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_setting_outputs}{\*\bkmkend idx_setting_outputs}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_setting_outputs}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Setting Outputs}} {\plain \f3\fs16\cf2\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws109:0000}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Setting Outputs}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_output_parameters')')}} Setting Outputs
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 There are two functions that can be used to set an output parameter: {\uldb\cf11 AFuncSetParameter}{\v idx_afuncsetparameter}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_afuncsetparamete}}{\fldrslt }}{\cf1  }and {\uldb\cf11 AFuncGetOutput}{\v idx_afuncgetoutput}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_afuncgetoutput}}{\fldrslt }}{\cf1 .}
 AFuncSetParameter is a general function and can be used in all cases. AFuncGetOutput can only be used in restricted cases but can be more efficient than AFuncSetParameter.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 The AFuncSetParameter function requires specification of the output value's object ID. AFuncSetParameter's behavior is as follows:
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }
If an output parameter is connected to one or more of the other functions' inputs, the specified object ID is stored on the function instance as the output for that parameter and AFuncSetParameter returns TRUE. The stored object ID can be retrieved later 
by {\uldb\cf11 AFuncGetParameter}{\v idx_afuncgetparameter}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_afuncgetparamete}
}{\fldrslt }}{\cf1  }or {\uldb\cf11 AFuncGetTypedParameter}{\v idx_a}{\v funcgettypedparameter}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_afuncgettypedpar}}{\fldrslt }}{\cf1  }as inputs to other functions.
\par {\cf5 \{bmc rr.bmp\}\tab }If an output parameter is connected to an object, the value of the specified output object is assigned to that object. If the types of the objects are the same, the assignment is made by using the {\uldb\cf11 AOBJ_ASSIGNOBJECT}{
\v idx_aobj_assignobject}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_assignobjec}}{\fldrslt }}{\cf1  }
message. If the types of the objects are different, the text-interchange protocol is used to make the assignment. If the text-interchange protocol is not supported by one or both of the object types, the AFuncSetParameter function will return FALSE.

\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
If you call the AFuncSetParameter function with a temporary object, your function should not access or attempt to destroy the temporary object once the call has been made. (Temporary objects are objects created by a call to {\uldb\cf11 AObjCreate}{\v 
idx_aobjcreate}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton i}{\cf1 dx_aobjcreate}}{\fldrslt }}{\cf1 .}
) After the call to AFuncSetParameter, the temporary object is owned by the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }and can be destroyed by the AppWare Bus at any time.
\par The AFuncGetOutput function can be used when an output parameter's value is to be set with a temporary object and the parameter is configured as typed. For more information about typing {\uldb\cf11 output parameters}{\v idx_output_parameters}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobu}{\cf6 tton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_output_parameter}}{\fldrslt }}{\cf1 ,}
 refer to the Parameter Attributes section. Because AFuncGetOutput returns the ID of the output parameter's object, the AFuncGetOutput function allows you to avoid the creation of a temporary object each time a particular function instance is executed. Th
e behavior of the AFuncGetOutput function is as follows. 
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }If the output parameter is connected to one or more {\uldb\cf11 input parameters}{\v idx_input_parameters}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_input_parameters}}{\fldrslt }}{\cf1  }
and this is the first time the function instance has been executed, the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
will create a temporary object of the same type as the output parameter. The ID of the temporary object is returned by AFuncGetOutput. Subsequent calls to AFuncGetOutput for this function instance will return the ID of the same temporary object.
\par \pard \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 {\cf5 \{bmc rr.bmp\}\tab }If the output parameter is connect
ed to a permanent object, AFuncGetOutput will return the ID of the permanent object. If the output parameter's type supports the text-interchange protocol, the returned object ID might reference an object of some other type that supports the text-intercha
nge protocol. Your code should always check the type of the returned object so that you can code the appropriate behavior.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_afuncgetoutput_e}{\*\bkmkend idx_afuncgetoutput_e}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_afuncgetoutput_example}
} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AFuncGetOutput Example}} {\plain \f3\fs16\cf2\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws109:0005}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AFuncGetOutput Example}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_output_parameters')')}} AFuncGetOutput Example
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The following example demonstrates the use of {\uldb\cf11 AFuncGetOutput}{\v idx_afuncgetoutput}{\field{\*\fldinst {\cf1 macrobutton NextFie}{
\cf1 ld }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_afuncgetoutput}}{\fldrslt }}{\cf1 .}
\par \pard\plain \s26\li1440\ri432\tx288\tqr\tx864\tx1152\tx1440\tx1710\tx1890\tqr\tx1980\tqr\tx2304\tqr\tx2592\tlul\tx2880\tqc\tlul\tx3168\tx3240\tx3456\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 
//////////////////////////////////////////////////////\line // FUNCTION:\tab \tab AmortizationFunc\line // DESCRIPTION:\tab Calculates a loan payment based on \line // \tab \tab \tab \tab \tab \tab the loan amount (PV), number of \line // \tab \tab \tab 
\tab \tab \tab payments (N), and interest per    \line // \tab \tab \tab \tab \tab \tab payment period (I)\line //////////////////////////////////////////////////////
\par \pard \s26\li1440\ri432\tx288\tqr\tx864\tx1152\tx1440\tx1710\tx1890\tqr\tx1980\tqr\tx2304\tqr\tx2592\tlul\tx2880\tqc\tlul\tx3168\tx3240\tx3456\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 
void ALMCALLBACK AmortizationFunc(pAEvtInfo, pAObjMessage pMessage)\line \tab \{\line \tab double\tab \tab \tab \tab payment;\line \tab typeID\tab \tab \tab \tab outputType;\line \tab memblockID\tab \tab \tab blockID;\line \tab LPSTR\tab \tab \tab \tab 
\tab buffer;\line \tab OBJECTID\tab \tab \tab oiPayment\line \line payment = CalcPayment(loanValue, periods, interest);\line  \line \tab oiPayment = AFuncGetOutput(1, &outputType); \line \line \tab if (outputType == OTYPE_NUMBER)\line \tab \tab \{\line 
\tab \tab ONmbrSetReal(oiPayment, payment, TRUE);\line \tab \tab \}\line \tab else\line \tab \tab \{\line \tab \tab blockID = AMemAllocate(64);\line \tab \tab buffer = AMemLock(blockID);\line \tab \tab gcvt(payment, 8, buffer);\line \tab \tab 
AMemUnlock(blockID);\line \tab \tab AObjConvertFromText(oiPayment, blockID); \line \tab \tab AMemFree(blockID);\line \tab \tab \}\line \line \tab pMessage->message1 = 1 ; // follow flow #1 (SUCCESS)
\par \pard \s26\li1440\ri432\tx288\tqr\tx864\tx1152\tx1440\tx1710\tx1890\tqr\tx1980\tqr\tx2304\tqr\tx2592\tlul\tx2880\tqc\tlul\tx3168\tx3240\tx3456\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \tab \}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_parameter_attrib}{\*\bkmkend idx_parameter_attrib}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_parameter_attributes}} {\caps\fs16\up6 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Parameter Attributes}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws107:0015}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K}
 Parameter Attributes}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_function_parameters')')}} Parameter Attributes
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 When you use the {\uldb\cf11 ALM Builder utility}{\v idx_the_alm_builder_utility}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_alm_builder}}{\fldrslt }}{\cf1  }to configure a function's parameters, you can specify attributes that control the interconnection of {
\uldb\cf11 input parameters}{\v idx_input_parameters}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_input_parameters}}{\fldrslt }}{
\cf1 ,} {\uldb\cf11 output parameters}{\v idx_output_parameters}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_output_parameter}
}{\fldrslt }}{\cf1 ,} and objects. These attributes affect parameter connections in AppWare. They do not affect the operation of the parameter manipulation functions.
\par Input and {\uldb\cf11 output parameters}{\v idx_output_parameters}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_output_parameter}
}{\fldrslt }}{\cf1  }
can each be optionally assigned an object type. A parameter that is assigned an object type is called a typed parameter, while one that is not assigned an object type is called an untyped parameter. Additionally, an input parameter can be marked as not ac
cepting temporary objects and as being optional. The effect of these attributes on parameter connections within AppWare is detailed in the following rules.
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }An untyped input parameter can be connected to any type of object or output parameter.
\par {\cf5 \{bmc rr.bmp\}\tab }If an untyped input parameter accepts temporary objects, AppWare allows a constant value to be specified for its value.
\par {\cf5 \{bmc rr.bmp\}\tab }A typed input parameter can always be connected to any output parameter or object of the same type.
\par \pard \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 {\cf5 \{bmc rr.bmp\}\tab }A typed 
input parameter can be connected to an output parameter or object of a different type if both types support the text-interchange protocol and the input parameter accepts temporary objects.
\par {\cf5 \{bmc rr.bmp\}\tab }If a typed input parameter accepts temporary objects and the input parameter's type supports the text-interchange protocol, AppWare allows a constant value to be specified for the input parameter's value.
\par {\cf5 \{bmc rr.bmp\}\tab }If an input parameter is not optional, AppWare requires that the parameter be connected in order for the project to be compiled successfully. Optional parameters can be left unconnected.
\par \pard \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 {\cf5 \{bmc rr.bmp\}\tab }An untyped output parameter can be connected to any type of object or input parameter.
\par {\cf5 \{bmc rr.bmp\}\tab }A typed output parameter can always be connected to any input parameter or object of the same type.
\par {\cf5 \{bmc rr.bmp\}\tab }A typed output parameter can be connected to an object of a different type if both types support the text-interchange protocol.
\par \pard \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 {\cf5 \{bmc rr.bmp\}\tab }A typed output parameter can be connected to
 an input parameter of a different type if both types support the text-interchange protocol and the input parameter accepts temporary objects.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\fs16\up6 {\*\bkmkstart idx_function_flows}{\*\bkmkend idx_function_flows}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_function_flows}} {\fs16\up6 ${\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Function Flows}} {\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws105:0025}} {\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K}
 Function Flows;function flows:description of}} {\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_chapter_3')')}} Function Flows
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
Part of the configuration information for an ALM function includes a list of one or more flows. Flows represent the exit conditions of an ALM function. Many functions require only one flow in order to indicate that the function was executed. Other functio
ns might have two flows, one to indicate successful execution and one to indicate that
 an error occured during execution. A function that performs a comparison might have three flows: greater than, less than, and equal. As the designer of an ALM function, you are free to define any number of flows that are appropriate
\par When a function instance is connected to another function instance as part of a function chain, the connection is made by indicating which flow will cause the next function to execute. The AppWare user can cause branching to occur within a function chain 
by connecting differen
t flows to different function instances. Different flows can also be connected to the same function instance in order to indicate that the same function should be executed for each of the connected flows. However, an ALM function can return only one flow 
for any given execution of a function instance.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 When you configure function flows with the {\uldb\cf11 ALM Builder utility}{\v idx_the_alm_builder_utility}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_alm_builder}}{\fldrslt }}{\cf1 ,} you create an ordered list of flows. 
A flow's ordinal position in a flow list is referred to as its index. The first flow in the list has an index of one. The message1 field of the {\uldb\cf11 AObjMessage}{\v idx_aobjmessage}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjmessage}}{\fldrslt }}{\cf1  }record is used to communicate to the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
which flow should be followed after exiting an ALM function. The message1 field has to be set to the appropriate flow index before exiting the function's entry-point routine.  This can be accomplished by direct assignment or by calling the {\uldb\cf11 
AFuncReportResult}{\v idx_afuncreportresult}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_afuncreportresul}}{\fldrslt }}{\cf1  }
function. If the message1 field is set to a value that is out of range, no flow will be followed and execution of the function chain will terminate.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\fs16\up6 {\*\bkmkstart idx_function_errors}{\*\bkmkend idx_function_errors}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_function_errors}} {\fs16\up6 ${\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Function Errors}} {\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws105:0030}} {\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Function Errors}} {
\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_chapter_3')')}} Function Errors
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 When the code that implements an ALM function executes, various errors might occur. The cau
se of the error can range from incorrect function-configuration information to invalid input from an end user. The following error-handling guidelines are provided to guide you as you implement {\uldb\cf11 ALM functions}{\v idx_alm_functions}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_alm_functions}}{\fldrslt }}{\cf1 .}
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }If the error is indicative of a possible problem with the function's configuration information or a defect in the {
\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 g}{\cf1 otobutton idx_the_appware_bus}}{\fldrslt }}{
\cf1  }or in AppWare, then notification of the error should be made by using one of the debugging macros described in {\uldb\cf11 Chapter 8}{\v idx_chapter_8}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_chapter_8}}{\fldrslt }}{\cf1 .}
\par {\cf5 \{bmc rr.bmp\}\tab }If the error indicates a problem in the logic of the application that should be corrected by the application designer, an error message should be placed in the errorMessage field of the {\uldb\cf11 AObjMessage}{\v idx_aobjmessage
}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+}{\cf6 >}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjmessage}}{\fldrslt }}{\cf1  }
record that is passed to the function's entry point. This can be done by using the {\uldb\cf11 AFuncReportResult}{\v idx_afuncreportresult}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_afuncreportresul}}{\fldrslt }}{\cf1  }
function. The message will be displayed in a message box as the application executes. The errorMessage field should only be used to report errors that the application designer can correct reliably. It should not be used to report errors that might normall
y occur during execution of an application.
\par \pard \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 {\cf5 \{bmc rr.bmp\}\tab }
If the error occurs as a result of end-user input or an unpredictable operating environment state, the function should define an error flow that will allow the application designer to either create logic for handling the error or, if appropriate, ignore t
he error.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\fs16\up6 {\*\bkmkstart idx_required_object_}{\*\bkmkend idx_required_object_}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_required_object_types}} {\fs16\up6 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Required Object Types}} {\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws105:0035}} {\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K}
 Required Object Types}} {\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_chapter_3')')}} Required Object Types
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 Unlike object types and objects, {\uldb\cf11 ALM functions}{\v idx_alm_functions}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_alm_functions}}{\fldrslt }}{\cf1  }and function instances cannot store data or respond to system events such as {\uldb\expnd-3\cf11 
AEVENT_STARTUP}{\v\expnd-3 idx_aevent_startup}{\field{\*\fldinst {\expnd-3\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\expnd-3\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\expnd-3\cf1 gotobutton idx_aevent_startup
}}{\fldrslt }}{\expnd-3\cf1 .}{\expnd-3  }
However, some ALMs that consist of only a set of functions might require the creation and storage of state information at run time. While such data could be stored as static data within a DLL, this is generally not acceptable because the static data withi
n a DLL is shared by all applications that access the DLL. Required object types are provided as a means to solve this problem.
\par The {\uldb\cf11 ALM Builder utility}{\v idx_the_alm_builder_utility}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_alm_builder}
}{\fldrslt }}{\cf1  }has an option that allows you to specify a required object type for an ALM function. When a project is compiled, the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
ensures that if any object types are required by the functions used in the project, the object types are included in the compi
led application. Required object types are most often hidden object types that cannot be explicitly included in a project by an application designer. (See {\uldb\cf11 Chapter 2}{\v idx_chapter_2}{\field{\*\fldinst {\cf1 macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_chapter_2}}{\fldrslt }}{\cf1  }for more information on hiddent object types.) During application execution, {\uldb\cf11 
ALM functions}{\v idx_alm_functions}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_alm_functions}}{\fldrslt }}{\cf1  }
can access and store data on the requred object type and the required type can respond to {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>
}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }events.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_chapter_4}{\*\bkmkend idx_chapter_4}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_chapter_4}}{\plain 
\f3\fs16\cf2\up6\lang1033  }{\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} chap:0004}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Chapter 4}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Chapter 4}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_contents')')}}
 Chapter 4
\par \pard\plain \s29\ri432 \f11\fs60\lang1033 Events and the Event Queue
\par \pard\plain \s2\sb240\sa120 \b\f3\fs36\cf2\lang1033 Introduction to the Event Queue
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 This chapter discusses the operation of the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }event queue. The first half of the chapter discusses the concepts used by the {\uldb\cf11 AppWare Bus}{\v 
idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 mac}{\cf6 robutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
event queue. The second half presents the information you need to know in order to implement an ALM that interacts with the event queue.
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 The Event System}{\v idx_the_event_system}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_the_event_system}}{\fldrslt }}
\par {\uldb\cf11 Posting Events in the Event Record}{\v idx_posting_events_in_the_event_record}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_posting_events_i}}{\fldrslt }}
\par {\uldb\cf11 Event Handlers}{\v idx_event_handlers}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_event_handlers}}{\fldrslt }}
\par {\uldb\cf11 System Events}{\v idx_system_events}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_system_events}}{\fldrslt }}
\par {\uldb\cf11 Custom-event Creation}{\v idx_custom_event_creation}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_custom_event_cre}
}{\fldrslt }}
\par {\uldb\cf11 Direct Invocation of Event Handlers}{\v idx_direct_invocation_of_event_handlers}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_direct_invocatio}}{\fldrslt }}
\par {\uldb\cf11 Events and Microsoft Windows Messages}{\v idx_events_an}{\v d_microsoft_windows_messages}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_events_and_micro}}{\fldrslt }}{\cf6 
\par }\pard \s21\li720\ri432 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\fs16\up6 {\*\bkmkstart idx_the_event_system}{\*\bkmkend idx_the_event_system}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_the_event_system}} {\fs16\up6 ${\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} The Event System}} {\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws110:0005}} {\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} The Event System}} {
\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_contents')')}} The Event System
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 Events are the elements that drive the execution of an {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
application. They are used to convey information and instructions to both the AppWare Bus and the ALMs. Events are managed by the AppWare Bus event queue. The AppWare Bus, ALM object types, and {\uldb\cf11 ALM functi}{\uldb\cf11 ons}{\v idx_alm_functions}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_alm_functions}}{\fldrslt }}{\cf1  }
post events to the event queue. Events are pulled out of the queue one at a time and are either processed directly by the AppWare Bus or are dispatched to object types that respond to the particular event. For example:
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }
An object signal that initiates the execution of a function chain is implemented as an event, posted by an object type to the event queue, for later processing by the {\uldb\cf11 AppWare Bus}{\v id}{\v x_the_appware_bus}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1 .} 
\par {\cf5 \{bmc rr.bmp\}\tab }A call to an ALM function in a function chain is initiated by an event that is both posted and processed by the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1 .} 
\par \pard \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 {\cf5 \{bmc rr.bmp\}\tab }An object type can post an event to be dispatched to itself or other object types. 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 In this way, events and the event queue serve as a general mechanism for communication between the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }and ALMs, and between ALMs themselves.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
Users of AppWare do not directly see or interact with the event queue. It is managed completely by the AppWare Bus. ALMs interact with the event queue through the use of AppWare Bus API functions.
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Event IDs}{\v idx_event_ids}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_event_ids}}{\fldrslt }}
\par {\uldb\cf11 Event Queue Operation}{\v idx_event_queue_ope}{\v ration}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_event_queue_oper}
}{\fldrslt }}
\par \pard \s21\li720\ri432 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_event_ids}{\*\bkmkend idx_event_ids}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_event_ids}} {\caps\fs16\up6 ${\footnote \pard\plain 
\s245 \f3\fs20\lang1033 {\fs16\up6 $} Event IDs}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws111:0000}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Event IDs}} {\caps\fs16\up6 !
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_the_event_system')')}} Event IDs
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
Every event is identified by a unique, four-character type identifier (event ID). The event ID must be different from all other event IDs known to a particular installation of the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1 .}
 To help insure global uniqueness of event IDs, Novell provides an event ID registering service. Refer to the {\i Technical Support Quick Reference }for more information about event ID registration. 
\par Event IDs are part of the configuration information you enter when using the {\uldb\cf11 ALM Builder utility}{\v idx_the_alm_builder_utility}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_alm_builder}}{\fldrslt }}{\cf1  }to define an event. They are entered as a sequence of four characters, such as strT for the AppWare Bus startup event function.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 When you debug ALM code, it is sometimes desirable to view event ID values. This is best do
ne by viewing the event ID as a long value shown in hexadecimal format. For example, the type ID strT would be shown as 0x73747254. Notice that the ASCII code for the "s" appears in the high-order byte, and the "T" appears in the low-order byte.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
C compilers do not generally support the specification of a long value using four characters. The AppWare Bus API defines the MAKETYPEID macro to facilitate the definition of event IDs. Its use is illustrated in the following sample code.
\par \pard\plain \s26\li1440\ri432\tx288\tx576\tqr\tlul\tx864\tx1440\tx1728\tx1890\tqr\tlul\tx1980\tx2304\tqr\tlul\tx2592\tlul\tx2880\tqc\tlul\tx3168\tx3240\tx3456\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 #define AEVENT_STARTUP
\tab MAKEEVENTID('s','t','r','T')
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_event_queue_oper}{\*\bkmkend idx_event_queue_oper}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_event_queue_operation}} {\caps\fs16\up6 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Event Queue Operation}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws111:0005}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K}
 Event Queue Operation}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_the_event_system')')}} Event Queue Operation
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
allocates an event queue for each executing AppWare Bus application. Events are posted to the event queue by the AppWare Bus itself and by the ALMs that compose an application. The event queue is maintained as an ordered list of events. The first event in
 the list is the head of the queue and the last event is the tail. The AppWare B
us always removes events for processing from the head of the queue. The position at which a posted event is inserted into the queue, and thus the event's priority, is determined by how the event is posted.
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Event Insertion}{\v idx_event_insertion}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_event_insertion}}{\fldrslt }}
\par {\uldb\cf11 Delayed Event Posting}{\v idx_delayed_event_posting}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_delayed_event_po}
}{\fldrslt }}
\par {\uldb\cf11 Event Removal}{\v idx_event_removal}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macro}{\cf6 button DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_event_removal}}{\fldrslt }}
\par {\uldb\cf11 Event Processing}{\v idx_event_processing}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_event_processing}}{\fldrslt }}
\par \pard \s21\li720\ri432 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_event_insertion}{\*\bkmkend idx_event_insertion}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_event_insertion}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Event Insertion}} {\plain \f3\fs16\cf2\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws114:0000}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Event Insertion}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_event_queue_operation')')}} Event Insertion
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
When an event is inserted into the queue, its position is determined by the priority that was specified when the event was posted. There are three different event posting priorities: at mark, at tail, and at once. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\sa240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 At-tail Priority\tab }\tab The at-tail priority specifier is used for low-priority events. An event that i
s posted at tail is placed at the tail of the event queue. The posted event will not be processed until all other events in the queue at the time event is posted have been processed. Events that are posted at tail from within an ALM function are always pr
ocessed after the entire function chain has been processed.
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
If an ALM performs lengthy operations, it might be appropriate to subdivide the operations into smaller pieces driven by at-tail events. Each portion of the operation would be initiated as a respo
nse to an at-tail event that was posted by the preceding portion. Organizing lengthy operations in this way allows the simulation of multitasking on the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }with other processes organized in the same way.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab At-mark
\par }\pard \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 {\b\f12\fs18 \tab Priority\tab }
The at-mark priority specifier is used for events that have a high priority. Each time an event is removed from the head of the queue for processing, the new head of the queue is 
marked. Events that are posted with the at-mark priority specifier are placed in the queue immediately before the currently marked event. Given that event A has been removed from the queue for processing and event B is the new head of the queue, posting a
n event with the at-mark priority specifier during the processing of event A ensures that the posted event will be processed before event B.
\par \pard\plain \s22\li1440\ri432\sb240\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 One common use of the at-mark priority specifier is for events that are posted during the execution of an ALM function. The {\uldb\cf11 AppWare Bus}{\v 
idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
posts a call-function event to cause the invocation of a function instance within a function chain. The call-function events are always posted with the at-mark priority. If the implementation of an ALM function requires that events be posted and processed
 before the next function in the function chain, such events should be posted using the at-mark protocol.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab At-once
\par }\pard \s32\fi-1267\li1440\ri432\sb240\sa240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 {\b\f12\fs18 \tab Priority}\tab Posting an event to the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
with the at-mark or at-tail priority specifier does not cause an immediate response to the event. The AppWare Bus processes the event after the posting routine has returned and the AppWare Bus has processed all preceding events in the queue. In this respe
ct, the handling of posted events is asynchronous.
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The at-once priority specifier can be used to force the AppWare Bus to process a
n event immediately. When an event is posted with the at-once priority specifier, the posted event and all resulting at-mark or at-once events are processed before control is returned to the posting routine. In this way, at-once posting enables synchronou
s event processing. 
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
The at-once priority specifier should be used with caution. Because control is not immediately returned to the posting routing, nested use of at-once event posting can easily cause a stack overflow. Additionally, when an at-once event 
has been posted and is being processed by the AppWare Bus{\cf1 ,}
 other events and other user-specified function chains can be processed. This can result in reentrancy in the posting code. You should carefully consider whether your code can accommodate a reentrant call before it posts any at-once events. In most cases,
 at-mark processing is sufficiently responsive to handle important events.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_delayed_event_po}{\*\bkmkend idx_delayed_event_po}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_delayed_event_posting}}
 {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Delayed Event Posting}} {\plain \f3\fs16\cf2\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws114:0005}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Delayed Event Posting}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_event_queue_operation')')}} Delayed Event Posting
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 goto}{\cf1 button idx_the_appware_bus}}{\fldrslt }}{\cf1  }
allows you to specify that an event be posted at some future time. This is called delayed event posting. Delayed events are placed in a wait queue until the specified time has passed, at which point the event is placed in the event queue.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
The AppWare Bus can scan for pending events only when it has control of execution. Since the time required to execute ALM code is not controllable by the AppWare Bus, the precise time at which a delayed event will be processed cannot be predict
ed. The AppWare Bus guarantees that at least the specified time will pass before a delayed event is processed.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_event_removal}{\*\bkmkend idx_event_removal}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_event_removal}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Event Removal}} {\plain \f3\fs16\cf2\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws114:0010}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Event Removal}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_event_queue_operation')')}} Event Removal

\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
At times it becomes useful to delete events from the event queue without processing the event. This most often occurs when the same low-priority event is posted frequently to the queue. If it is not essential that each individual event be processed, you c
an avoid the accumulation of many low-priority events in the queue by instructing the AppWare Bus to remove duplicate events from the queue each time the event is posted. 
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 The comparisons that the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
makes to identify duplicate events for removal are controlled by several flags that can be set when an event is posted to the queue. These flags are discussed in the second half of this chapter.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_event_processing}{\*\bkmkend idx_event_processing}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_event_processing}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Event Processing}} {\plain \f3\fs16\cf2\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws114:0015}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Event Processing}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `
JI(`', `idx_event_queue_operation')')}} Event Processing
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 In general, the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 go}{\cf1 tobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
processes an event when the event reaches the head of the event queue. Before it is processed, the event is removed from the queue and a new head is established. If the event is handled directly by the AppWare Bus, the appropriate processing is performed 
and then the bus returns to the queue to process the next event. Otherwise, the event is sent to all object types that respond to the event.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Event 
\par }{\b\f12\fs18 \tab Responses} 
\par \pard \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 {\b\f12\fs18 and Handlers} If an event is not handled by the {\uldb\cf11 AppWare Bus}{\v idx_t}{\v he_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1 ,}
 the event is passed to all object types that have a defined response for the event. Event responses are part of the configuration information for an object type. An event response definition includes the ID of the specific event, a DLL entry point to be 
called, and the name of the DLL containing the entry point. The DLL entry point is referred to as the event handler. The AppWare Bus{\cf1  }calls the event handler for all object types that respond to the event before it processes any other events.
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 It is important to note that events are responded to by object types and not by individual objects. In fact, the use of required object types ({\uldb\cf11 
Chapter 3}{\v idx_chapter_3}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_chapter_3}}{\fldrslt }}{\cf1 )}
 makes it possible for an object type to respond to an event even when no object of that type exists in the application.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Source and 
\par }{\b\f12\fs18 \tab Target 
\par }\pard \s32\fi-1267\li1440\ri432\sb240\sa240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 {\b\f12\fs18 \tab Objects\tab }When you post an event, you can opti
onally specify a source object and a target object. The exact meaning of the source object and the target object depends on the event type. However, the following rules generally apply: 
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }The source object specifies the object that posted the event.
\par {\cf5 \{bmc rr.bmp\}\tab }The target object specifies the object to which the event is directed.
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
Although object types respond to events rather than individual objects, it is possible to simulate posting an event to a particular object or objects. Specifically
, event-routing options allow you to instruct the bus to call only the event handler for the source object's type, the target object's type, or both the source and target objects' types.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\fs16\up6 {\*\bkmkstart idx_posting_events_i}{\*\bkmkend idx_posting_events_i}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_posting_events_in_the_event_record}} {
\fs16\up6 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Posting Events in the Event Record}} {\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws110:0010}} {\fs16\up6 K{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 K} Posting Events in the Event Record}} {\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_contents')')}} Posting Events in the Event Record
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
Events are represented on the event queue by an event record. When you post an event, you must supply the necessary information to initialize the fields of the event record. This can be done by allocating an event record and initializing its fields explic
itly, or by calling an appropriate {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }API function to initialize the event record and then post the event. The API functions that can be used to post events are listed in the following table.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Function\tab \tab Behavior
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 {\uldb\cf11 AEvtPost}{\v idx_aevtpost}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf1 gotobutton idx_aevtpost}}{\fldrslt }}{\cf1 \tab }\tab Posts an event using a correctly initialized event record.
\par {\uldb\cf11 AEvtPostStandard}{\v idx_aevtpoststandard}{\field{\*\fldinst {\cf1 macrobutton NextFiel}{\cf1 d }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevtpoststandard}
}{\fldrslt }}{\cf1 \tab }Initializes an event record and posts it to the event queue.
\par {\uldb\cf11 AEvtPostSignalAtTail}{\v idx_n1_aevtpostsignalattail}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_n1_aevtpostsigna}
}{\fldrslt }}{\cf1 \tab }Posts an object signal event to the event queue using the at-tail protocol.
\par {\uldb\cf11 AEvtPostSignalAtMark}{\v idx_aevtpostsignalatmark}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevtpostsignalat}
}{\fldrslt }}{\cf1 \tab }Post an object signal event to the event queue using the at-mark protocol.\line 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 When the AppWare Bus{\cf1  }
calls the entry point for an object type's event response, one of the parameters passed is a pointer to the event record being processed.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 The event record's structure is defined as follows:
\par \pard\plain \s26\li1440\ri432\tx288\tlhyph\tx576\tlhyph\tx864\tx1152\tx1440\tlhyph\tx1728\tx1890\tlhyph\tx1980\tlhyph\tx2304\tlhyph\tx2592\tlul\tx2880\tqc\tlul\tx3168\tx3240\tx3456\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 
typedef struct\{
\par \tab OBJECTID\tab sourceObject;
\par \tab OBJECTID\tab targetObject;
\par \tab EVENTID\tab what;
\par \tab LONG\tab \tab details;
\par \tab LONG\tab \tab modifiers;
\par \tab LONG\tab \tab when;
\par \tab LONG\tab \tab how;
\par \tab LONG\tab \tab variation;
\par \tab \} AEvtInfo;
\par 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The individual fields are described below.
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 The sourceObject Field}{\v idx_the_sourceobject_field}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf6 gotobutton idx_the_sourceobject}}{\fldrslt }}
\par {\uldb\cf11 The targetObject Field}{\v idx_the_targetobject_field}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_the_targetobject}
}{\fldrslt }}
\par {\uldb\cf11 The what Field}{\v idx_the_what_field}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_the_what_field}}{\fldrslt }}
\par {\uldb\cf11 The details and the modifiers Fields}{\v idx_the_details_and_the_modifiers_fields}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_the_details_and_}}{\fldrslt }}
\par {\uldb\cf11 The when Field}{\v idx_the_when_field}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_the_when_field}}{\fldrslt }}
\par {\uldb\cf11 The how Field}{\v idx_the_how_field}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_the_how_field}}{\fldrslt }}
\par {\uldb\cf11 The variation Field}{\v idx_the_variation_field}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_the_variation_fi}}{\fldrslt }}

\par \pard \s21\li720\ri432 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_the_sourceobject}{\*\bkmkend idx_the_sourceobject}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_the_sourceobject_field}} {\caps\fs16\up6 
${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} The sourceObject Field}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws112:0000}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 
K} The sourceObject Field}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_posting_events_in_the_event_record')')}} The sourceObject Field
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The sourceObject field contains the ID of the object that posted the event. This field should be set to zero for events not posted by a specific object. If the
 source object is nonzero, the event response for the source object's type will always be called after all other event responses. This allows the object that posted the event to clean up any memory structures that might have been referenced by either the 
details or the modifiers fields of the event record.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_the_targetobject}{\*\bkmkend idx_the_targetobject}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_the_targetobject_field}} {\caps\fs16\up6 
${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} The targetObject Field}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws112:0005}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 
K} The targetObject Field}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_posting_events_in_the_event_record')')}} The targetObject Field
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
The targetObject field contains the ID of the target object. The exact use of the targetObject field depends on the event being processed. In general, the value of the 
targetObject field specifies the object that is affected by the event or the object to which the event is directed. Refer to the description of the how field for more information about the targetObject field.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_the_what_field}{\*\bkmkend idx_the_what_field}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_the_what_field}} {\caps\fs16\up6 ${\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} The what Field}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws112:0010}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} The what Field}} 
{\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_posting_events_in_the_event_record')')}} The what Field
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The what field contains the event ID for the event that is being processed or posted. The event ID is a unique, 32-bit value that is made available with the {
\uldb\cf11 ALM Builder utility}{\v idx_the_alm_builder_utility}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_alm_}{\cf1 
builder}}{\fldrslt }}{\cf1 .}
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_the_details_and_}{\*\bkmkend idx_the_details_and_}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_the_details_and_the_modifiers_fields}} {
\caps\fs16\up6 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} The details and the modifiers Fields}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws112:0015}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 K} The details and the modifiers Fields}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_posting_events_in_the_event_record')')}}
 The details and the modifiers Fields
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
The details field and the modifiers field are event-record fields that contain event-specific data. The posting object can set these fields to any values; in turn, the values are passed along to the event handlers. This mechanism allows objects to pass in
formation to each other. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_the_when_field}{\*\bkmkend idx_the_when_field}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_the_when_field}} {\caps\fs16\up6 ${\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} The when Field}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws112:0020}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} The when Field}} 
{\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_posting_events_in_the_event_record')')}} The when Field
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The when field specifies the earliest time that an event should be placed in the event queue. The when field is used to control delayed-event
 posting. If there is no need for a delay, this field can be set to zero. 
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
To specify the size of the delay, set the event record's when field to the current AppWare time plus a delay. The event will be entered into a wait queue and will be held there until the time is greater than or equal to the time in the when field. Time is
 expressed in ticks, where one tick is one-sixtieth of a second. Use the {\uldb\cf11 AAppGetTime}{\v idx_aappgettime}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf1 gotobutton idx_aappgettime}}{\fldrslt }}{\cf1  }function to retrieve the current time.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_the_how_field}{\*\bkmkend idx_the_how_field}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_the_how_field}} {\caps\fs16\up6 ${\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} The how Field}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws112:0025}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} The how Field}} {
\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_posting_events_in_the_event_record')')}} The how Field
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
The how field contains bit flags that specify an event's priority, routing, and duplicate removal options. The appropriate flags should be combined by a bit-wise OR operation.
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Posting Priority}{\v idx_posting_priority}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_posting_priority}}{\fldrslt }}
\par {\uldb\cf11 Routing}{\v idx_routing}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_routing}}{\fldrslt }}
\par {\uldb\cf11 Event Removal}{\v idx_n1_event_removal}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macro}{\cf6 button DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_n1_event_removal}}{\fldrslt }}

\par \pard \s21\li720\ri432 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_posting_priority}{\*\bkmkend idx_posting_priority}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_posting_priority}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Posting Priority}} {\plain \f3\fs16\cf2\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws115:0000}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Posting Priority}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_the_how_field')')}} Posting Priority
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The three mutually exclusive event-posting priority flags are:
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }
AEVT_ATMARK, which posts an event at the mark position; that is, just before the new queue head after the last event was removed from the queue.
\par \pard \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 {\cf5 \{bmc rr.bmp\}\tab }AEVT_ATTAIL, which posts an event at the tail of the event queue.
\par {\cf5 \{bmc rr.bmp\}\tab }AEVT_ATONCE, which causes the event to be processed immediately.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_routing}{\*\bkmkend idx_routing}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_routing}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Routing}} {\plain \f3\fs16\cf2\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws115:0005}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Routing}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_the_how_field')')}} Routing
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The two routing flags are AEVT_DIRECT and AEVT_SELF. Use of either flag prevents the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
from calling the event handlers of all object types that respond to the event.
\par The AEVT_DIRECT flag directs the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }to call the event handler of the target object's type. To use the AEVT_DIRECT flag, combine it with other flags in the
 how field by using the bit-wise OR operator. For example, the following code would be used to post a direct event at mark:
\par \pard\plain \s26\li1440\ri432\tx288\tlhyph\tx576\tlhyph\tx864\tx1152\tx1440\tlhyph\tx1728\tx1890\tlhyph\tx1980\tlhyph\tx2304\tlhyph\tx2592\tlul\tx2880\tqc\tlul\tx3168\tx3240\tx3456\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 
theEvent.how = AEVT_ATMARK | AEVT_DIRECT;
\par 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The AEVT_SELF flag directs the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
to call the event handler of the source object's type. To use the AEVT_SELF flag, combine it with other flags in the how field by using the bit-wise OR operator. For example, the following code could be used to post an event to the source object at mark:

\par \pard\plain \s26\li1440\ri432\tx288\tlhyph\tx576\tlhyph\tx864\tx1152\tx1440\tlhyph\tx1728\tx1890\tlhyph\tx1980\tlhyph\tx2304\tlhyph\tx2592\tlul\tx2880\tqc\tlul\tx3168\tx3240\tx3456\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 
theEvent.how = AEVT_ATMARK| AEVT_SELF;
\par 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
The AEVT_SELF flag can be used with the AEVT_DIRECT flag to call the event handlers for both the source and target objects' types. In this case, the event handler for target object's type will be called first.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_n1_event_removal}{\*\bkmkend idx_n1_event_removal}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_n1_event_removal}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Event Removal}} {\plain \f3\fs16\cf2\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws115:0010}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Event Removal}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_the_how_field')')}} Event Removal
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 When an event is posted, you can instruct the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }to remove duplicate 
events from the event queue. Duplicate events are identified by a comparison of the event record's fields, as indicated by the kill flags described below. Duplicate events are removed from the queue before the posted event is inserted in the queue. \line 

\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Flag \tab \tab Comments
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 AEVT_KILLDETAILS\tab Instructs the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst 
{\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }to check for matching details fields when searching for duplicate events.
\par AEVT_KILLMODIFIERS\tab Instructs the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }to check for matching modifiers fields when searching for duplicate events.
\par AEVT_KILLSOURCE\tab Instructs the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }to check for matching sourceObject fields when searching for duplicate events.
\par AEVT_KILLTARGET\tab Instructs the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton}{\cf6  DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }to check for matching targetObject fields when searching for duplicate events.
\par AEVT_KILLVARIATION\tab Instructs the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }to check for matching variation fields when searching for duplicate events.
\par AEVT_KILLWHAT\tab Instructs the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }to check for matching what fields when searching for duplicate events.
\par AEVT_KILLWHEN\tab Instructs the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }to check for matching when fields when searching for duplicate events.
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 Event-removal flags are typically used in combinations that determine the removal criteria. The {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
removes those event records whose fields, as indi
cated by the kill flags, have the same value as the corresponding fields in the posted event record. For example, the object-changed event is typically posted with the AEVT_KILLTARGET, AEVT_KILLWHAT, and AEVT_KILLDETAILS flags set. The AppWare Bus will re
move object-changed events that have the same values in the targetObject details fields as the posted event.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 Some combinations of kill flags are used frequently. For convenience in coding, constants have been defined for these combinations.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Constant\tab \tab Kill flag Combination
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 AEVT_KILLSIMILARS\tab AEVT_KILLWHAT
\par \pard \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 AEVT_KILLDUPLICATES\tab AEVT_KILLWHAT, AEVT_KILLTARGET
\par \pard \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 AEVT_KILLPARTICULARS\tab AEVT_KILLWHAT, AEVT_KILLTARGET, AEVT_KILLDETAILS
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 Two additional flags can be used to further specify event removal behavior. They are listed below.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Flag \tab \tab Comments
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 AEVT_KILLSELF\tab \tab Instructs the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }to delete the event being posted in addition to any duplicate events found. Th
is modifier can be used to remove a particular event or set of events from the queue without posting a new event.
\par \pard \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 AEVT_KILLALLQUEUES\tab Causes duplicate events to be removed from both the event queue and the wait queue. If this flag is not specified, events are {\i not }removed from wait queue.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_the_variation_fi}{\*\bkmkend idx_the_variation_fi}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_the_variation_field}} {\caps\fs16\up6 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} The variation Field}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws112:0030}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K}
 The variation Field}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_posting_events_in_the_event_record')')}} The variation Field
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The variation field is reserved. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\fs16\up6 {\*\bkmkstart idx_event_handlers}{\*\bkmkend idx_event_handlers}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_event_handlers}} {\fs16\up6 ${\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Event Handlers}} {\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws110:0015}} {\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Event Handlers}} {
\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_contents')')}} Event Handlers
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 An event handler is implemented as an entry point into a DLL. A single entry point can be used to handle more than one event, or
 an entry point can be defined for each event to be handled. The event-handler entry point and its DLL, as well as the event ID of the event to be handled, are part of the information entered when you use the {\uldb\cf11 ALM Builder utility}{\v 
idx_the_alm_builder_utility}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_alm_builder}}{\fldrslt }}{\cf1  }
to configure object-type event responses. An event handler is called by the bus whenever an event of the specified type is removed from the queue for processing.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 The prototype for the handler's entry point must be declared as follows:
\par \pard\plain \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 long ALMCALLBACK eventHandler(
\par \tab pAEvtInfo\tab \tab pEvent,
\par \tab pAObjMessage  \tab pMessageRec);
\par 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The type modifier ALMCALLBACK is defined by the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }API. The pMessageRec parameter is a pointer to an {\uldb\cf11 AObjMessage}{\v idx_aobjmessage}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjmessage}}{\fldrslt }}{\cf1  }
record. Your event handler should not use this parameter. The pEvent parameter points to the event record for the event being processed. Typically, an event handler will examine the what field of the {\uldb\cf11 AEvtInfo}{\v idx_aevtinfo}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevtinfo}}{\fldrslt }}{\cf1  }record to determine which event is being processed.

\par Broadcast events are sent to an object type's event handler only once per event, even though there might be many object instances of that type. If each object has to respond to the event, the event handler has to list the object instances by using the {
\uldb\cf11 AObjGetNextObject}{\v idx_aobjgetnextobject}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjgetnextobjec}
}{\fldrslt }}{\cf1  }function.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\fs16\up6 {\*\bkmkstart idx_system_events}{\*\bkmkend idx_system_events}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_system_events}} {\fs16\up6 ${\footnote \pard\plain 
\s245 \f3\fs20\lang1033 {\fs16\up6 $} System Events}} {\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws110:0020}} {\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} System Events}} {\fs16\up6 !{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_contents')')}} System Events
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }defines a set of system events. Two of these events, {\uldb\cf11 AEVENT_CALLFUNCTION}{\v idx_aevent_callfunction}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevent_callfunct}}{\fldrslt }}{\cf1  }and {\uldb\cf11 AEVENT_SIGNAL}{\v idx_aevent_s}{\v ignal}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevent_signal}}{\fldrslt }}{\cf1 ,}
 are processed exclusively by the AppWare Bus. Object types can respond to all other system events. The system events are listed below. They are described in detail in {\uldb\cf11 Chapter 8}{\v idx_chapter_8}{\field{\*\fldinst {\cf1 macrobutton NextField 
}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_chapter_8}}{\fldrslt }}{\cf1  }of this manual.
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Event\tab \tab Usage
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 {\uldb\cf11 AEVENT_CALLFUNCTION}{\v idx_aevent_callfunction}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevent_callfunct}}{\fldrslt }}{\cf1 
\par }{\cf1 \tab \tab }Posted by the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }when an ALM function needs to be called. It is handled by the AppWare Bus, which initiates an ALM function call. 
\par {\uldb\cf11 AEVENT_OBJECTCHANGED}{\v idx_aevent_objectchanged}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevent_objectcha}
}{\fldrslt }}{\cf1 
\par }\pard \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 {\cf1 \tab \tab }Posted by an object when its data has changed.
\par \pard \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 {\uldb\cf11 AEVENT_OBJECTTOTEXT}{\v idx_aevent_objecttotext}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf1 gotobutto}{\cf1 n idx_aevent_objecttot}}{\fldrslt }}{\cf1 
\par }\pard \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \tab \tab Used to get a text representation of an object's data.
\par \pard \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 {\uldb\cf11 AEVENT_OS_ACTIVATEAPP}{\v idx_aevent_os_activateapp}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf1 gotobutton idx_aevent_os_activa}}{\fldrslt }}{\cf1 
\par }\pard \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 {\cf1 \tab \tab }Posted by the AppWare Bus when an application is being activated or deactivated.
\par \pard \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 {\uldb\cf11 AEVENT_SHUTDOWN}{\v idx_aevent_shutdown}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf1 gotobutton idx_aevent_shutdown}}{\fldrslt }}{\cf1 
\par }\pard \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 {\cf1 \tab \tab }Posted by the AppWare Bus when an application is shutting down. It allows objects to clean up before an application terminates.
\par \pard \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 {\uldb\cf11 AEVENT_SIGNAL}{\v idx_aevent_signal}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf1 gotobutton idx_aevent_signal}}{\fldrslt }}{\cf1 \tab }Posted by ALM objects in order to trigger an object signal.
\par {\uldb\cf11 AEVENT_STARTUP}{\v idx_aevent_startup}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevent_startup}}{\fldrslt }}{\cf1 
\tab }Posted by the AppWare Bus when an application begins execution.
\par {\uldb\cf11 AEVENT_TEXTTOOBJECT}{\v idx_aevent_texttoobject}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevent_texttoobj}
}{\fldrslt }}{\cf1 
\par }\pard \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 {\cf1 \tab \tab }Used to set the value stored by an object based on the value of a text string.
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Startup Event}{\v idx_startup_event}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_startup_event}}{\fldrslt }}
\par {\uldb\cf11 Shutdown Event}{\v idx_shutdown_event}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_shutdown_event}}{\fldrslt }}
\par {\uldb\cf11 Application-activation Event}{\v idx_application_activation_event}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_application_acti}}{\fldrslt }}
\par {\uldb\cf11 Signal Event}{\v idx_signal_event}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <}{\cf6 +>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_signal_event}}{\fldrslt }}
\par {\uldb\cf11 Object-changed Event}{\v idx_object_changed_event}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_object_changed_e}
}{\fldrslt }}
\par {\uldb\cf11 Call-function Event}{\v idx_call_function_event}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_call_function_ev}}{\fldrslt }}

\par {\uldb\cf11 Text-interchange Events}{\v idx_text_interchange_events}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_text_interchange}
}{\fldrslt }}
\par \pard \s21\li720\ri432 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_startup_event}{\*\bkmkend idx_startup_event}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_startup_event}} {\caps\fs16\up6 ${\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Startup Event}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws113:0000}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Startup Event}} {
\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_system_events')')}} Startup Event
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The startup event ({\uldb\cf11 AEVENT_STARTUP}{\v idx_aevent_startup}{\field{\*\fldinst {\cf1 macrobutton N}{\cf1 extField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevent_startup}}{\fldrslt }}{\cf1 )} is the first event posted to the event queue when an application begins execution. It is posted by the {
\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1 .}
 Object types generally respond to this event in order to perform any initialization that must occur before the application can run. The startup event is directed to all of the application's object types that have defined responses for it.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
The startup time for an AppWare Bus application is directly affected by the amount of processing that occurs in response to the startup event. When possible, ALM implementations should keep startup processing time to a minimum.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_shutdown_event}{\*\bkmkend idx_shutdown_event}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_shutdown_event}} {\caps\fs16\up6 ${\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Shutdown Event}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws113:0005}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Shutdown Event}} 
{\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_system_events')')}} Shutdown Event
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The shutdown event ({\uldb\cf11 AEVENT_SHUTDOWN}{\v idx_aevent_shutdown}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst 
{\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevent_shutdown}}{\fldrslt }}{\cf1 )} is posted by the AppWare Bus when an application is about to quit. ALMs should always use the {\uldb\cf11 AAppPostShutdown}{\v 
idx_aapppostshutdown}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aapppostshutdown}}{\fldrslt }}{\cf1  }
function to post this event rather than posting it directly. The AAppPostShutdown function will post the shut down event with the at-tail priority. After the shutdown event has been posted to the queue, the event queue will no longer accepts at-tail event
s. However, the AppWare Bus will continue to process events that remain in the event queue in the normal way.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 An object type generally responds to the shutdown event by freeing any private data such as memory blocks, windows, and menus.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_application_acti}{\*\bkmkend idx_application_acti}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_application_activation_event}} {
\caps\fs16\up6 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Application-activation Event}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws113:0010}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 K} Application-activation Event}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_system_events')')}} Application-activation Event
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The application-activation ({\uldb\cf11 AEVENT_OS_ACTIVATEAPP}{\v idx_aevent_os_activateapp}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevent_os_activa}}{\fldrslt }}{\cf1 )} event is posted by the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
whenever an AppWare Bus application is activated or deactivated. It is posted in response to the
 Microsoft Windows WM_ACTIVATEAPP message. The WM_ACTIVATEAPP message is sent to all top-level windows of a Microsoft Windows application. However, only a single application-activation event is posted regardless of the number of top-level windows in the a
pplication. If the application has been activated, the details field of the event record will be equal to one. If the application is about to be deactivated, the details field will be equal to zero.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_signal_event}{\*\bkmkend idx_signal_event}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_signal_event}} {\caps\fs16\up6 ${\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Signal Event}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws113:0015}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Signal Event}} {
\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_system_events')')}} Signal Event
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The signal event ({\uldb\cf11 AEVENT_SIGNAL}{\v i}{\v dx_aevent_signal}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {
\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevent_signal}}{\fldrslt }}{\cf1 )} is posted by an ALM and is processed by the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1 .}
 It instructs the AppWare Bus to trigger the execution of a function chain attached to a specific signal on a specific object. If a function chain is not attached to the signal, no action is taken.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 Signal events can be posted at once. This allows user-specified function chains to be called during ALM code execution.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
When you post a signal event, the sourceObject field should be set to the ID of the object to which the signal applies. The details field should be set to the signal ID for the signal whose function chain is to be executed. The {\uldb\cf11 
AEvtPostSignalAtTail}{\v idx_n1_aevtpostsignalattail}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_n1_aevtpostsigna}}{\fldrslt }}{
\cf1  }or the {\uldb\cf11 AEvtPostSignalAtMark}{\v idx_aevtpostsignalatmark}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <}{\cf6 +>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_aevtpostsignalat}}{\fldrslt }}{\cf1  }functions can be used to simplify the posting of signal events.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_object_changed_e}{\*\bkmkend idx_object_changed_e}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_object_changed_event}} {\caps\fs16\up6 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Object-changed Event}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws113:0020}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K}
 Object-changed Event}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_system_events')')}} Object-changed Event
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The object-changed event ({\uldb\cf11 AEVENT_OBJECTCHANGED}{\v idx_aevent_objectchanged}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevent_objectcha}}{\fldrslt }}{\cf1 )}
 is used to communicate object-data changes between objects. It provides asynchronous communication between objects that are changing and objects that need to be notified of the changes. For example, the Window object uses th
e object-changed event to know when items displayed in the window need to be redrawn to reflect changes in the item's data.
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Posting the Object-changed Event}{\v idx_posting_the_object_changed_event}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}
}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_posting_the_obje}}{\fldrslt }}
\par {\uldb\cf11 Responding to the Object-changed Event}{\v idx_responding_to_the_object_changed_event}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_responding_to_th}}{\fldrslt }}
\par \pard \s21\li720\ri432 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_posting_the_obje}{\*\bkmkend idx_posting_the_obje}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_posting_the_object_changed_event}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Posting the Object-changed Event}} {\plain \f3\fs16\cf2\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {
\fs16\up6 +} brws116:0000}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Posting the Object-changed Event}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_object_changed_event')')}} Posting the Object-changed Event
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 When an object's data chan
ges, the changing object is responsible for posting the object-changed event. The event record's targetObject field must be set to the ID of the object whose data has changed. To reduce redundant operations such as screen updates, the object-changed event
 should be posted with the AEVT_KILLDUPLICATES flag set in the how field of the event record.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 Since the object-changed event affects screen updates, it should be posted with the priority that reflects the application's current priority. If the application 
is set to visual priority, the object-changed event should be posted with the AEVT_ATMARK priority flag. If the application is set to function priority, the object-changed event should be posted with the AEVT_ATTAIL priority flag. To simply the posting of
 object-changed events, the {\uldb\cf11 AEvtGetObjectChangedPriority}{\v idx_aevtgetobjectchangedpriority}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf1 gotobutton idx_aevtgetobjectcha}}{\fldrslt }}{\cf1  }function can be used to determine the appropriate posting priority for the object-changed event.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_responding_to_th}{\*\bkmkend idx_responding_to_th}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_responding_to_the_object_changed_event}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Responding to the Object-changed Event}} {\plain \f3\fs16\cf2\up6\lang1033 +{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 +} brws116:0005}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Responding to the Object-changed Event}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_object_changed_event')')}} Responding to the Object-changed Event
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 As a typical {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
application is executing, many object-changed events are continually posted to the event queue. The event handler for each object type that responds to the object-changed event will be called for every object-changed event that is processed. To ensure ade
quate application performance, an object-changed event handler must be able to quickly determine if it is interested in a particular object-changed event. The object ownership functions have been provided to fulfill these needs.
\par An object that has to know when a second object's data has changed can use the {\uldb\cf11 AObjRegisterOwner}{\v idx_aobjregisterowner}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}
}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjregisterowne}}{\fldrslt }}{\cf1  }function to register itself as an owner of the second object. This is typically done in an event handler for the startup event. When the handler for the o
bject-changed event is called, the handler can use the {\uldb\cf11 AObjGetNextOwner}{\v idx_aobjgetnextowner}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf1 gotobutton idx_aobjgetnextowner}}{\fldrslt }}{\cf1  }
function to quickly find all objects of a specific type, if any, that are registered as owners of the object that changed. Use of object ownership will generally be much faster than searching the data blocks for all objects of a particular type.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_call_function_ev}{\*\bkmkend idx_call_function_ev}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_call_function_event}} {\caps\fs16\up6 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Call-function Event}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws113:0025}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K}
 Call-function Event}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_system_events')')}} Call-function Event
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 m}{\cf6 
acrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }uses call-function events {\expnd-3 (}{\uldb\expnd-3\cf11 AEVENT_CALLFUNCTION}{\v\expnd-3 idx_aevent_callfunction}{\field{\*\fldinst {
\expnd-3\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\expnd-3\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\expnd-3\cf1 gotobutton idx_aevent_callfunct}}{\fldrslt }}{\expnd-3\cf1 )}{\expnd-3  }
to initiate a call to each function in a function chain. Call-function events are all posted at mark. They are posted by the AppWare Bus, and the AppWare Bus responds to them by making a call to the ALM function's DLL entry point. Call-function events sho
uld not be posted by an ALM.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_text_interchange}{\*\bkmkend idx_text_interchange}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_text_interchange_events}} {
\caps\fs16\up6 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Text-interchange Events}} {\caps\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws113:0030}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 K} Text-interchange Events}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_system_events')')}} Text-interchange Events
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The text-interchange events are used by the text-interchange protocol. The object-to-text event ({\uldb\cf11 AEVENT_OBJECTTOTEXT}{\v idx_aevent_objecttotext}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevent_objecttot}}{\fldrslt }}{\cf1 )}
 instructs an object's event handler to return a text representation of the object's value. The text-to-object event ({\uldb\cf11 AEVENT_TEXTTOOBJECT}{\v idx_aevent_texttoobject}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevent_texttoobj}}{\fldrslt }}{\cf1 )} instructs an object set its valu
e by accepting the supplied text. In both cases, the text is passed in a memory block that is allocated and freed by the event initiator. The memory-block ID is passed in the event's details field. 
\par ALMs should use the {\uldb\cf11 AObjConvertToText}{\v idx_aobjconverttotext}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_aobjconverttotex}}{\fldrslt }}{\cf1  }and {\uldb\cf11 AObjConvertFromText}{\v idx_aobjconvertfromtext}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf1 gotobutton idx_aobjconvertfromt}}{\fldrslt }}{\cf1  }functions instead of posting these events directly. These functions make a direct call to the appropriate event handler rather than posting the event to the application queue.

\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\fs16\up6 {\*\bkmkstart idx_custom_event_cre}{\*\bkmkend idx_custom_event_cre}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_custom_event_creation}} {\fs16\up6 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Custom-event Creation}} {\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws110:0025}} {\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K}
 Custom-event Creation}} {\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_contents')')}} Custom-event Creation
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 In addition to using the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }system events, an ALM can define custom events for its own use. To construct a custom AppWare event:
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 1.\tab Register a unique, four-character event ID with Novell. 
\par \pard \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 2.\tab Use {\uldb\cf11 ALM Builder}{\v idx_alm_builder_utility_over}{\v view}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {
\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_alm_builder_util}}{\fldrslt }}{\cf1  }to define your event and to configure the appropriate object-type responses for the event.
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 If you plan to distribute an ALM that relies on your custom event, you need a unique event ID in order to avoid conflicts between the ALMs that share the {
\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1 .}
 (If two ALMs were to use the same event ID to represent different events, applications that used both ALMs would not work correctly.)
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\fs16\up6 {\*\bkmkstart idx_direct_invocatio}{\*\bkmkend idx_direct_invocatio}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_direct_invocation_of_event_handlers}} {
\fs16\up6 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Direct Invocation of Event Handlers}} {\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws110:0030}} {\fs16\up6 K{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 K} Direct Invocation of Event Handlers}} {\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_contents')')}} Direct Invocation of Event Handlers
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 Event Handlers do not always have to be invoked asynchronously by posting events. Handlers can be invoked synchronously by using the {\uldb\cf11 AEvtCallMethod}{
\v idx_aevtcallmethod}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevtcallmethod}}{\fldrslt }}{\cf1  }function. The {\uldb\cf11 
AEvtCheckForMethod}{\v idx_aevtcheckformethod}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevtcheckformeth}}{\fldrslt }}{\cf1  }
function can be used to check for the existence of a particular handler. These functions are most often used with event-based protocols and are discussed in more detail in {\uldb\cf11 Chapter 5}{\v idx_chapter_5}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_chapter_5}}{\fldrslt }}{\cf1 .}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\fs16\up6 {\*\bkmkstart idx_events_and_micro}{\*\bkmkend idx_events_and_micro}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_events_and_microsoft_windows_messages}} {
\fs16\up6 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Events and Microsoft Windows Messages}} {\fs16\up6 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws110:0035}} {\fs16\up6 K{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 K} Events and Microsoft Windows Messages}} {\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_contents')')}} Events and Microsoft Windows Messages
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 To effectively create ALMs for the Microsoft Windows platform, you should understand the relationship between the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus
}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx}{\cf1 _the_appware_bus}}{\fldrslt }}{\cf1  }
events and event queue and Microsoft Windows messages. The AppWare Bus contains its own message loop that processes both Microsoft Windows messages and the {\uldb\cf11 AppWare Bus events}{\v idx_appware_bus_events}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_appware_bus_even}}{\fldrslt }}{\cf1 .} 
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }
At-mark events are given priority over Microsoft Windows message. As long as there are at-mark events in the event queue, events will not be retrieved from the Microsoft Windows application queue. 
\par \pard \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 {\cf5 \{}{\cf5 bmc rr.bmp\}\tab }
When only at-tail events exist in the event queue, the processing of at-tail events and Microsoft Windows messages are interleaved. First, an at-tail event is processed, and then a message from the Microsoft Windows application queue, if one exists, is di
spatched. This sequence is repeated until there are no more events in the event queue or until one or more at-mark events are posted. 
\par \pard \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 {\cf5 \{bmc rr.bmp\}\tab }When there are no events in the event queue, Microsoft Windows messages are retrieved in a stand
ard GetMessage, TranslateMessage, and DispatchMessage message loop.
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 ALMs that create windows and controls will receive Microsoft Windows messages through the corresponding window procedure, not through the {\uldb\cf11 AppWare Bus
}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
event queue. Window procedures for top-level windows created by an ALM should call AAppDefWndProc in addition to the Microsoft Windows API function DefWindowProc.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\fs16\up6 {\*\bkmkstart idx_chapter_5}{\*\bkmkend idx_chapter_5}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_chapter_5}} {\fs16\up6 ${\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 $} Chapter 5}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} chap:0005}} {\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Chapter 5}} {\fs16\up6 !
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_contents')')}} Chapter 5
\par \pard\plain \s29\ri432 \f11\fs60\lang1033 Protocols
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Introduction to Protocols}{\v idx_n3_introduction_to_protocols}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf6 gotobutton idx_n3_introduction_}}{\fldrslt }}
\par {\uldb\cf11 Event-based Protocols}{\v idx_event_based_protocols}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_event_based_prot}
}{\fldrslt }}
\par {\uldb\cf11 Class-based Protocols}{\v idx_class_based_protocols}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_class_based_prot}
}{\fldrslt }}
\par \pard \s21\li720\ri432 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_n3_introduction_}{\*\bkmkend idx_n3_introduction_}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_n3_introduction_to_protocols}} {\plain \caps\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Introduction to Protocols}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +
} CH533:0005}} {\plain \caps\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Introduction to Protocols}} {\plain \caps\f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_chapter_5')')}} Introduction to Protocols
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutto}{
\cf6 n DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
supports a number of different ways for objects to communicate with each other. The most common form of communication occurs when one object posts an event to another object. Event communication is one-way; the sender of the event does not need any inform
ation from the receiver of the event. The object-changed event and the startup event are examples of event communication. Another common way for objects to communicate is through the object APIs. Communication t
hat uses the Text API and the Number API is an example of object communication.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
Although event and API communication are sufficient for many communication needs, there are times when more complex communication is necessary between objects. The AppWare Bus supports these higher-level communications through protocols. Protocols are ess
entially extended conversations between objects where both objects have to behave in a prescribed manner; that is, there is a "contract" between the two objects. They are also 
groupings of lower-level communications where the end result is a unique and usable form of communication. Protocol communication usually remains in effect for a fairly long time. Just as in real life, protocols are a more formal and "ritualistic" method 
of communication between entities.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
The following analogy is a good one for understanding protocols: a single, isolated instance of communication between objects is similar to the application code calling a single API to do something. Communication between 
objects with a protocol is similar to the application code using a windowing system's C++ class library, where there is two-way communication through callbacks.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 A protocol definition has two parts, the syntax and the use model: 
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}}\tab 
The syntax describes the low-level transfer of data between the objects. It is similar to a typical programming language procedure declaration that describes the low-level data transfer between a caller and a callee. 
\par \pard \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 {\cf5 \{bmc rr.bmp\}}\tab The use model describes the required
 interactions between the objects. It is important to note that the use model is contained only in documentation that is external to the code. Without a use model, the syntax of the protocol is essentially a collection of unrelated operations.
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
Protocols have a user and an implementer. The user typically initiates the conversations with the implementer. It fulfills one-half of the use model contract. The implementer supplies the other half of the use-model contract. A protocol normally has more 
implementers than users.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 It is important to realize that the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
is unaware of any protocols that have been defined. It supports protocol setup and the resulting communication, but it does not know anything more about them. A protocol is typically defined for a set of operations where one object does not know the type 
of the other object it is communicating with; in other words, if an object knows that it needs t
o talk to an object of type Number, then it is more appropriate to use the Number object APIs to talk to the object. A truly useful protocol allows any number of ALMs to implement it meaningfully.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
AppWare supports two protocol categories: event-based and class-based. Event-based protocols use events for communication between objects, and class-based protocols use a stack-based procedure invocation for communication between objects.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_event_based_prot}{\*\bkmkend idx_event_based_prot}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_event_based_protocols}} {\plain \caps\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Event-based Protocols}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +}
 CH533:0010}} {\plain \caps\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Event-based Protocols}} {\plain \caps\f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_chapter_5')')}} Event-based Protocols{\pard\plain \s2\sb240\sa120\keepn \b\v\f3\fs36\cf2\lang1033 {\tc {\v Event-based Protocols}}}
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 An event-b
ased protocol is a set of events and their parameter information with accompanying documentation. The syntax is the description of the parameter information and the use model is an example of the documentation. Event-based protocols have no language suppo
rt for the syntax definition of the protocol: the event parameters are not compiler-enforced, and there is no language grouping that binds all of the related events together. Because of this lack of language support, correct use and implementation of the 
protocol is entirely up to the user and the implementer.
\par Because protocols are a two-way communication device and because events are not always synchronous, event-based protocols have some special considerations. In traditional programming architectures, there is a single point of data transfer between the call
er and the callee: the invocation of a procedure or function. All of the data that goes into the procedure is given to the procedure before the procedure is given control, and all of the data being rec
eived from the procedure is returned to the caller before control is returned. 
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 There are two ways to deal with these considerations in AppWare. First, you can use the {\uldb\cf11 AEvtCallMethod}{\v idx_aevtcallmethod}{\field{\*\fldinst {\cf1 macrobutton NextField 
}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevtcallmethod}}{\fldrslt }}{\cf1 (}
) API to force synchronous event processing. Use of AEvtCallMethod() avoids the problems because it mimics a procedure call. To use {\uldb\cf11 AEvtCallMethod}{\v idx_aevtcallmethod}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aev}{\cf1 tcallmethod}}{\fldrslt }}{\cf1 (}), a protocol user would do the following: 
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 1.\tab The protocol user (the "caller") initializes the event record appropriately and calls {\uldb\cf11 AEvtCallMethod}{\v idx_aevtcallmethod}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevtcallmethod}}{\fldrslt }}{\cf1 (}). 
\par \pard \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 2.\tab The implementer (the "callee") receives the event and retrieves any necessary data from the event record.
\par \pard \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 3.\tab The implementer fills in the event record's return data.
\par \pard \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 4.\tab {\uldb\cf11 AEvtCallMethod}{\v idx_aevtcallmethod}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJum}
{\cf6 p <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevtcallmethod}}{\fldrslt }}{\cf1 (}) returns control to the user.
\par \pard \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 5.\tab The user retrieves the data from the implementer's filled-in event record.
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 If you do not need synchronous event processing, you can post the event to the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
event queue with the AEVT_DIRECT and AEVT_SELF event-routing flags set so that the event will be posted first to the callee and then to the caller. The caller can then exami
ne the event for modifications made by the callee. Using this method, a protocol user would do the following:
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 1.\tab 
The protocol user initializes the event record and posts it with the AEVT_DIRECT and AEVT_SELF event-routing flags set, the user's ID stored in the sourceObject field, and the implementer's ID stored in the targetObject's field. 
\par \pard \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 2.\tab The implementer eventually receives the event and retrieves any necessary data from the event record.
\par \pard \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 3.\tab The implementer fills in the event record's return data.
\par \pard \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 4.\tab The user eventually receives the event.
\par \pard \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 5.\tab The user retrieves data from the implementer's filled-in event record.
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
Either of these methods will work. The first method has the advantage of localizing the logic of one particular communication with an implementer within one procedure. It has the disadvantage of using extra stack space, and it cannot offer asynchronous pr
ocessing. The second method requires splitting the logic on the user side into two pieces (one procedure posts the event, and another proc
edure handles the data being returned from the implementer), but it does not use extra stack space, and it does offer asynchronous processing.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 An implementer indicates protocol support by having an event handler for one or more of the events in the protocol. By using {\uldb\cf11 AEvtCheckForMethod}{\v idx_aevtcheckformethod}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevtcheckformeth}}{\fldrslt }}{\cf1 (}
), the protocol user checks whether an object implements the protocol. The protocol definition has to define which event is to be checked.
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 The Text-interchange Protocol}{\v idx_the_text_interchang_protocol}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf6 gotobutton idx_the_text_interch}}{\fldrslt }}
\par {\uldb\cf11 Defining Event-based Protocols}{\v idx_defining_event_based_protocols}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_defining_event_b}}{\fldrslt }}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_the_text_interch}{\*\bkmkend idx_the_text_interch}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_the_text_interchang_protocol}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} The Text-interchange Protocol}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +}
 CH534:0005}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} The Text-interchange Protocol}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_event_based_protocols')')}} The Text-interchange Protocol{\pard\plain \s2\sb240\sa120\keepn \b\v\f3\fs36\cf2\lang1033 {\tc {\v The Text-interchange Protocol}}}
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 A system-defined, event-based protocol that is commonly implemented by objects is the text-interchange protocol. The protocol user is the {\uldb\cf11 AppWare Bus
}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1 ,}
 and the implementers are the ALMs whose objects can represent their values as text. This protocol converts the value of objects between internal, textual, and numerical representations. For example, if an object that supports the text-interchange protoco
l is used as a function parameter and that parameter is typed as a number, then the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextF}{\cf1 ield }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
uses the text-interchange protocol to convert the object's value to text. Once the value has been converted to text, it converts the text to a number.
\par An object type implements the text-interchange protocol by providing event handlers for {\uldb\cf11 AEVENT_OBJECTTOTEXT}{\v idx_aevent_objecttotext}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevent_objecttot}}{\fldrslt }}{\cf1  }and {\uldb\cf11 AEVENT_TEXTTOOBJECT}{\v idx_aevent_texttoobject}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton Do}{\cf6 Jump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevent_texttoobj}}{\fldrslt }}{\cf1 .} 
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}}\tab When an object receives {\uldb\cf11 AEVENT_OBJECTTOTEXT}{\v idx_aevent_objecttotext}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevent_objecttot}}{\fldrslt }}{\cf1 ,} the object converts its value to text. 
\par {\cf5 \{bmc rr.bmp\}}\tab When an object receives {\uldb\cf11 AEVENT_TEXTTOOBJECT}{\v idx_aevent_texttoobject}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf1 gotobutton idx_aevent_texttoobj}}{\fldrslt }}{\cf1 ,} the object assigns its value from the incoming text. 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\uldb\cf11 Chapter 8}{\v idx_chapter_8}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}
}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_chapter_8}}{\fldrslt }}{\cf1  }contains more information about these events.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_defining_event_b}{\*\bkmkend idx_defining_event_b}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_defining_event_based_protocols}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Defining Event-based Protocols}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {
\fs16\up6 +} CH534:0010}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Defining Event-based Protocols}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_event_based_protocols')')}} Defining Event-based Protocols{\pard\plain \s2\sb240\sa120\keepn \b\v\f3\fs36\cf2\lang1033 {\tc {\v Defining Event-based Protocols}}}
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
Defining an event-based protocol is quite easy. All the events that compose the protocol have to be defined first. Since these are just ordinary events, no special step is necessary to make them part of a protocol. Once the events have been defined and do
cumented, their protocol use has to be documented. To check whether an object implements a protocol, it is required that the documentation define which event is used by the protocol user. An object that implements a protocol has to respond to that event. 

\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_class_based_prot}{\*\bkmkend idx_class_based_prot}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_class_based_protocols}} {\plain \caps\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Class-based Protocols}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +}
 CH533:0015}} {\plain \caps\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Class-based Protocols}} {\plain \caps\f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_chapter_5')')}} Class-based Protocols
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
In contrast to event-based protocols, class-based protocols are groupings of operations that the compiler supports directly. Class-based protocols are defined by using a C++ class-like syntax. This definition is done in such a way that protocols can also 
be defined, used, and implemented by the C language. Class-based protocols group procedures and their parameters. Accompanying documentation on protocol use and implementation is also required.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
C++ is usually used to write the users and implementers of a class-based protocol because of the natural mapping between the protocol definition and a C++ class; when C++ is being used, in fact, the protocol definition is just an abstract class definition
. The user and the implementer both use normal C++ method invocations to communicate. This communication is an advantage over event-based protocols because of the synchronous nature of procedure calls and the reduced communication overhead.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
The communication between a user and an implementer is done through a protocol instance that is associated with the implementing object. The user of the protocol queries the object for protocol support, and the object responds with information that can th
en be used to create a protocol instance. All objects of a given type usually support a particular protocol. However, th
ere are some types where not all instances of that type support that protocol all of the time. (This is different from event-based protocols, where the support is guaranteed for all objects of a type.)
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 An example of class-based protocols is the window item protocol.
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 The Query Protocol Message}{\v idx_the_query_protocol_message}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf6 gotobutton idx_the_query_protoc}}{\fldrslt }}
\par {\uldb\cf11 Defining Class-based Protocols}{\v idx_defining_class_based_protocols}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJ}{\cf6 ump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_defining_class_b}}{\fldrslt }}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_the_query_protoc}{\*\bkmkend idx_the_query_protoc}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_the_query_protocol_message}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} The Query Protocol Message}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +}
 CH535:0005}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} The Query Protocol Message}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_class_based_protocols')')}} The Query Protocol Message{\pard\plain \s2\sb240\sa120\keepn \b\v\f3\fs36\cf2\lang1033 {\tc {\v The Query Protocol Message}}}
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
Class-based protocols require a more formal method of asking an object whether it implements the protocol. The reason for the formal method is that the protocol user needs an instance of a C++ class to talk to. (This is not the case with event-based proto
cols, since all communication is done through the event architecture within the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobu}{\cf6 tton DoJump <+>}
}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1 .}) In order to support the creation of the C++ instance, a special message is sent to the object's administration function. This message, {\uldb\cf11 
AOBJ_QUERYPROTOCOL}{\v idx_aobj_queryprotocol}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_queryprotoc}}{\fldrslt }}{\cf1 ,}
 asks the object to return a pointer to the function that can be called to create the protocol instance. If an object does not support the protocol, it returns NULL; otherwise, it returns a valid function pointer.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
This special function, which is used to create protocol instances, is called either the ProtocolCreate function or the create function. There is one function for each protocol that the object implements. The protocol defines the parameters that the create
 function takes. All protocol implementers have to adhere to these parameters.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 An object's support for a particular protocol might be conditional on something. For example, a Menu object can be placed in a window only if it is a popup menu. In o
ther words, the menu object conditionally supports the window item protocol. Conditional support can be indicated by the return of the AP_DYNAMIC flag from the {\uldb\cf11 AOBJ_QUERYPROTOCOL}{\v idx_aobj_queryprotocol}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_queryprotoc}}{\fldrslt }}{\cf1  }message. Unconditional support is indicated by the return of AP_STATIC.

\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_defining_class_b}{\*\bkmkend idx_defining_class_b}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_defining_class_based_protocols}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Defining Class-based Protocols}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {
\fs16\up6 +} CH535:0010}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Defining Class-based Protocols}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_class_based_protocols')')}} Defining Class-based Protocols{\pard\plain \s2\sb240\sa120\keepn \b\v\f3\fs36\cf2\lang1033 {\tc {\v Defining Class-based Protocols}}}
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 A class-based protocol definition requires the following: a unique ProtocolID
, a protocol definition, a default protocol implementation, and documentation. The protocolID is a four-byte identifier of type PROTOCOLID. It is created by the MAKEPROTOCOLID macro. The protocol user passes in the protocolID to {\uldb\cf11 
AObjQueryProtocol}{\v idx_aobjqueryprotocol}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjqueryprotoco}}{\fldrslt }}{\cf1 (}
), and the implementer compares the protocolID to its list of supported protocols. The protocolID is not used anywhere else. To guarantee its uniqueness, you have to register the protocolID with Novell.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
The protocol definition is created with a set of macros that declare the protocol and the operations within that protocol. When compiled with C++, these macros expand directly to a class declaration; when compiled with C, they expand to structures that co
ntain pointers to functions. All protocol definitions have to inherit from the base-protocol definition of ApObjectD (the D stands for "definition"). In C++ terminology, this protocol definition contains method decla
rations that all protocols are required to have. When compiled with C++, all methods are declared to be pure virtual.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
The protocol definition can contain field declarations. For each field declaration, a C macro has to be defined that will retrieve that field when it is given a pointer to a structure of that type. This requirement is for ease of use, since using C to com
pile the protocol definition will produce nested structures.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 The prototype for the Protocol Create function also has to be defined for an
y protocol implementer. The create function has to accept at least an OBJECTID of the object that is implementing the protocol.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
Once the protocol has been defined, a default implementation is next. A default implementation provides method bodies for all of the methods in a protocol. The default implementation should either gracefully do nothing or provide useful default behavior. 
While creation of a default implementation is not strictly necessary, it makes protocol support much easier and gives more unifo
rmity in the protocol's behavior. The default implementation has to be designed so it can be called by an object type that implements the protocol using C\emdash usually there are C-based APIs into a DLL. The DLL contains the default implementation.

\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 If a class-based protocol changes in any way, which happens whenever there is a new, deleted, or changed method or field, {\i all }
implementers have to be either recompiled or recompiled and recoded.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 The last step of the protocol definition is the documentation of the protocol's use model.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\fs16\up6 {\*\bkmkstart idx_chapter_6}{\*\bkmkend idx_chapter_6}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_chapter_6}} {\fs16\up6 ${\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 $} Chapter 6}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} chap:0006}} {\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Chapter 6}} {\fs16\up6 !
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_contents')')}} Chapter 6
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 
\par \pard\plain \s29\ri432 \f11\fs60\lang1033 Supporting the UPSF Format
\par \pard\plain \s2\sb240\sa120 \b\f3\fs36\cf2\lang1033 Introduction to UPSF{\pard\plain \s2\sb240\sa120 \b\v\f3\fs36\cf2\lang1033 {\tc {\v Supporting the UPSF Format}}}
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The Universal Program Structure File (UPSF) format was designed to import and export data. It has two purposes:
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }The UPSF format allows a project created on one platform to be transferred to another platform. 
\par {\cf5 \{bmc rr.bmp\}\tab }The UPSF format also allows projects to be upgraded from one major revision of AppWare to the next. 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 It is important that an ALM support the UPSF
 format, even if the ALM does not exist on more than one platform, because the UPSF format is also used to upgrade projects from one version of AppWare to the next.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 If an object type is to support the UPSF format, it has to respond to the {\uldb\cf11 AOBJ_EXPORTOBJECT}{\v idx_aobj_exportobject}{\field{\*\fldinst {\cf1 macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_exportobjec}}{\fldrslt }}{\cf1  }and {\uldb\cf11 AOBJ_IMPORTOBJECT}{\v idx_aobj_importobject}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_importobjec}}{\fldrslt }}{\cf1  }messages in the object's administration function. 
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 This chapter contains information about how to write an object type that supports the UPSF format.
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 UPSF Concepts}{\v idx_upsf_concepts}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_upsf_concepts}}{\fldrslt }}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_upsf_concepts}{\*\bkmkend idx_upsf_concepts}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_upsf_concepts}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} UPSF Concepts}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch64:0010}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} UPSF Concepts}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_chapter_6')')}} UPSF Concepts
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The UPSF format involves use of the following concepts: 
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 UPSF Scopes}{\v idx_upsf_scopes}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_upsf_scopes}}{\fldrslt }}
\par {\uldb\cf11 UPSF Fields}{\v idx_upsf_fields}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton id}{\cf6 x_upsf_fields}}{\fldrslt }}
\par {\uldb\cf11 UPSF Arrays}{\v idx_upsf_arrays}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_upsf_arrays}}{\fldrslt }}
\par {\uldb\cf11 UPSF Data Types}{\v idx_upsf_data_types}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_upsf_data_types}}{\fldrslt }}
\par {\uldb\cf11 UPSF Examples}{\v idx_upsf_examples}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_upsf_examples}}{\fldrslt }}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_upsf_scopes}{\*\bkmkend idx_upsf_scopes}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_upsf_scopes}}{\plain 
\f3\fs16\cf2\up6\lang1033  }{\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch65:0005}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} UPSF Scopes}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} UPSF Scopes}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_upsf_concepts')')}} UPSF Scopes
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 When a user creates a project in AppWare, the project contains several fields. The fields contain information about the subjects in the projec
t, the application's icon, and the project's name. Each subject contains another set of fields. The fields consist of information such as the subject's objects, functions, and flows. 
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
A scope is a field that contains more fields. It is similar to a C structure because it contains related fields. Each subject in a project is a scope because it contains additional information about the subject at a lower level. Objects are also scopes be
cause, like projects, they contain additional information at a lower level. Scopes are used during object export and import when an object needs to keep some part of its data together. 
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
Two analogies are useful for understanding the relationship between a scope and its fields. In the first analogy, the scope is the parent and its fields are the children. In the second analogy, each parent-child relationship forms one branch of a data tre
e. The branch is called a scope. 
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 It is possible to have several scopes open at the same time as long as they are all on the same path; for e
xample, if an object scope is open, its subject scope also has to be open. When you create a scope, you are essentially creating a tree-branch structure that can be used to store data. You can open and close a scope after it has been created, but you do h
ave to create the scope before you can place data into it. 
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
It is imperative that you close any scope you open. The code for scopes is written in such a way that the scope to be closed is identified by context rather than by name. When the command that clo
ses a scope is encountered, the command is applied to the last open scope. If an error in program logic causes program execution to skip over an open scope and go to an earlier, unclosed scope instead, the earlier scope will be closed. If the wrong scope 
is closed, program execution is on the wrong branch of the tree from that point on, has no way of correcting itself, and causes errors whose source can be extremely difficult to find.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 Scopes are controlled by three functions: {\uldb\cf11 AUpsfCreateScope}{\v idx_aupsfcreat}{\v escope}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsfcreatescope}}{\fldrslt }}{\cf1 ,} {\uldb\cf11 AUpsfOpenScope}{\v idx_aupsfopenscope}{\field{\*\fldinst {\cf1 macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsfopenscope}}{\fldrslt }}{\cf1 ,} and {\uldb\cf11 AUpsfCloseScope}{\v idx_aupsfclosescope}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsfclosescope}}{\fldrslt }}{\cf1 .} The prototypes for each function are shown in the following table: 
\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Action\tab \tab Function Prototype\tab \tab 
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 Create scope\tab LONG AUpsfCreateScope(LPCSTR scopeName, LONG index)
\par Open scope\tab LONG AUpsfOpenScope(LPCSTR scopeName, LONG index)
\par Close scope\tab LONG AUpsfCloseScope(void)\line 
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\uldb\cf11 Chapter 8}{\v idx_chapter_8}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_chapter_8}}{\fldrslt }}{\cf1  }contains more information about these functions.
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Using Scopes During Export}{\v idx_using_scopes_during_export}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf6 gotobutton idx_using_scopes_dur}}{\fldrslt }}
\par {\uldb\cf11 Using Scopes During Import}{\v idx_n1_using_scopes_during_import}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_n1_using_scopes_}}{\fldrslt }}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_using_scopes_dur}{\*\bkmkend idx_using_scopes_dur}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_using_scopes_during_export}} {
\caps\fs16\up6 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Using Scopes During Export}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch66:0005}} {\caps\fs16\up6 K{\footnote \pard\plain 
\s245 \f3\fs20\lang1033 {\fs16\up6 K} Using Scopes During Export}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_upsf_scopes')')}} Using Scopes During Export
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 During export, use {\uldb\cf11 AUpsfCreateScope}{\v idx_aupsfcreatescope}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsfcreatescope}}{\fldrslt }}{\cf1  }and {\uldb\cf11 AUpsfCloseScope}{\v idx_aupsfclosescope}{\field{\*\fldinst {\cf1 macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsfclosescope}}{\fldrslt }}{\cf1  }functions to group data together in the UPSF format. The function prototype for {\uldb\cf11 
AUpsfExportField}{\v idx_aupsfexportfield}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsfexportfield}}{\fldrslt }}{\cf1  }
is as follows:\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Action\tab \tab Function Prototype
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 Export field\tab LONG AUpsfExportField(LPCSTR fieldName, LONG fieldIndex, TYPEID nativeType, TYPEID universalType, LPVOID sourceAddress, LONG sourceSize)\line 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\uldb\cf11 Chapter 8}{\v idx_chapter_8}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}
}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_chapter_8}}{\fldrslt }}{\cf1  }contains more information about this function.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
For an object to support cross-version compatibility, the object has to keep a current version identifier in its private data. If the Version field is exported, an import handler can reference i
t in order to determine what the required conversion process is.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 In the following code fragment, the structure is grouped in the scopeName field. Since the object is being exported, the scope is created through {\uldb\cf11 AUpsfCreateScope}{\v 
idx_aupsfcreatescope}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsfcreatescope}}{\fldrslt }}{\cf1 ,}
 the data is exported one field at a time with {\uldb\cf11 AUpsfExportField}{\v idx_aupsfexportfield}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {
\cf1 gotobutton idx_aupsfexportfield}}{\fldrslt }}{\cf1 ,} and then the scope is closed with {\uldb\cf11 AUpsfCloseScope}{\v idx_aupsfclosescope}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsfclosescope}}{\fldrslt }}{\cf1 .} 
\par \pard\plain \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 lUpsfRet = AUpsfCreateScope("Position", 0L);
\par if(lUpsfRet == AUPSF_NOERROR)
\par \tab \{
\par \tab /* Exporting inside of a scope is identical to
\par \tab  * exporting any other location. Scopes just
\par \tab  * provide a way to hide or group data.
\par \tab  */
\par \tab AUpsfExportField("X", 0L, AUPSF_NATV_DOUBLE,
\par \tab \tab \tab AUPSF_UNIV_NUMBER, (LPVOID)(&pData->pos.x),
\par \tab \tab \tab sizeof(double));
\par 
\par \tab AUpsfExportField("Y", 0L, AUPSF_NATV_DOUBLE,
\par \tab \tab \tab AUPSF_UNIV_NUMBER,  (LPVOID)(&pData->pos.y),
\par \tab \tab \tab sizeof(double));
\par       
\par \tab /* ALWAYS close a scope that is created */
\par \tab AUpsfCloseScope();
\par \tab \}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_n1_using_scopes_}{\*\bkmkend idx_n1_using_scopes_}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_n1_using_scopes_during_import}} {
\caps\fs16\up6 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Using Scopes During Import}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch66:0010}} {\caps\fs16\up6 K{\footnote \pard\plain 
\s245 \f3\fs20\lang1033 {\fs16\up6 K} Using Scopes During Import}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_upsf_scopes')')}} Using Scopes During Import
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 During import, use {\uldb\cf11 AUpsfOpenScope}{\v idx_aupsfopenscope}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {
\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsfopenscope}}{\fldrslt }}{\cf1 ,} and {\uldb\cf11 AUpsfCloseScope}{\v idx_aupsfclosescope}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsfclosescope}}{\fldrslt }}{\cf1 .} If data encapsulation is required at the object level, thes
e functions allow the object to retrieve groups of data. Although {\uldb\cf11 AUpsfOpenScope}{\v idx_aupsfopenscope}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf1 gotobutton idx_aupsfopenscope}}{\fldrslt }}{\cf1  }is similar to {\uldb\cf11 AUpsfCreateScope}{\v idx_aupsfcreatescope}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsfcreatescope}}{\fldrslt }}{\cf1 ,}
 the AUpsfOpenScope function is valid only at import time. The main difference between the two functions is that at import time the scope has already been created, so all you need to do is to activate it. The function prototype for {\uldb\cf11 
AUpsfImportField}{\v idx_aupsfimportfield}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsfimportfield}}{\fldrslt }}{\cf1  }
is as follows:\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Action\tab \tab Function Prototype
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 Import field\tab LONG AUpsfImportField(LPCSTR fieldName, LONG fieldIndex, TYPEID nativeType, LPVOID destinationAddress, LONG destinationSize)\line 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\uldb\cf11 Chapter 8}{\v idx_chapter_8}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}
}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_chapter_8}}{\fldrslt }}{\cf1  }contains more information about this function.
\par {\uldb\cf11 AUpsfImportField}{\v idx_aupsfimportfie}{\v ld}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsfimportfield}
}{\fldrslt }}{\cf1  }
fetches data from the current scope and places it into the buffer that was specified by the destinationAddress parameter. The field is identified by the fieldName and fieldIndex parameters, and the data in the field is converted to a native type. If an er
ror occurs while a field is being imported, {\uldb\cf11 AUpsfImportField}{\v idx_aupsfimportfield}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_aupsfimportfield}}{\fldrslt }}{\cf1  }returns a nonzero value. The return value should be checked so that the user can be notified that there was a problem when the object was being imported. {\uldb\cf11 Chapter 8}{\v idx_chapter_8}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_chapter_8}}{\fldrslt }}{\cf1  }contains more information about {\uldb\cf11 
AUpsfImportField}{\v idx_aupsfimportfield}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsfimportfield}}{\fldrslt }}{\cf1 .}

\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 The following code fragment demonstrates use of a scope during import.
\par \pard\plain \s26\li1440\ri432\tx288\tlhyph\tx576\tqdec\tldot\tx864\tx1152\tx1440\tlhyph\tx1728\tx1890\tqdec\tldot\tx1980\tlhyph\tx2304\tqdec\tldot\tx2592\tlul\tx2880\tqc\tlul\tx3168\tx3240\tx3456\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 
\f9\fs18\lang1033 lUpsfRet = AUpsfOpenScope("Position", 0L);
\par if(lUpsfRet == AUPSF_NOERROR)
\par \pard \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \tab \{
\par \tab /* Importing inside of a scope is identical to
\par \tab  * importing any other location. Scopes just
\par \tab  * provide a way to hide or group data.
\par \tab  */
\par \tab AUpsfImportField("X", 0L, AUPSF_NATV_DOUBLE,
\par \tab \tab \tab (LPVOID)(&pData->pos.x), sizeof(double));
\par 
\par \tab AUpsfExportField("Y", 0L, AUPSF_NATV_DOUBLE,
\par \tab \tab \tab (LPVOID)(&pData->pos.y), sizeof(double));
\par 
\par \tab /* ALWAYS close a scope that is opened */
\par \tab AUpsfCloseScope();
\par \tab \}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_upsf_fields}{\*\bkmkend idx_upsf_fields}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_upsf_fields}}{\plain 
\f3\fs16\cf2\up6\lang1033  }{\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch65:0010}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} UPSF Fields}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} UPSF Fields}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_upsf_concepts')')}} UPSF Fields
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 Fields are universal data elements inside scopes. This section contains information about using fields during export and import. 
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Exporting Fields}{\v idx_exporting_fields}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_exporting_fields}}{\fldrslt }}
\par {\uldb\cf11 Importing Fields}{\v idx_importing_fields}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_importing_fields}}{\fldrslt }}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_exporting_fields}{\*\bkmkend idx_exporting_fields}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_exporting_fields}} {\caps\fs16\up6 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Exporting Fields}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch67:0005}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {
\fs16\up6 K} Exporting Fields}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_upsf_fields')')}} Exporting Fields
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 When an object type responds to the administration function's {\uldb\cf11 AOBJ_EXPORTOBJECT}{\v idx_aobj_exportobject}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj}{\cf1 _exportobjec}}{\fldrslt }}{\cf1  }
message, it has to export enough information so that the object type can be  re-created at {\uldb\cf11 AOBJ_IMPORTOBJECT}{\v idx_aobj_importobject}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_importobjec}}{\fldrslt }}{\cf1  }
time. Therefore, you have to decide which object data-block values should be exported and how they should be formatted. In general, anything that can be entered or modified in an object's editing dialog should be exported. There is usually no need to expo
rt other data. 
\par There are four functions that can be used to export an object: {\uldb\cf11 AUpsfExportField}{\v idx_aupsfexportfield}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf1 gotobutton idx_aupsfexportfield}}{\fldrslt }}{\cf1 ,} {\uldb\cf11 AUpsfLogComment}{\v idx_aupsflogcomment}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}
}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsflogcomment}}{\fldrslt }}{\cf1 ,} {\uldb\cf11 AUpsfCreateScope}{\v idx_aupsfcreatescope}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsfcreatescope}}{\fldrslt }}{\cf1 ,} and {\uldb\cf11 AUpsfCloseScope}{\v idx_aupsfclosescope}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsfclo}{\cf1 sescope}}{\fldrslt }}{\cf1 .} Their prototypes are shown below:\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Action\tab \tab Function Prototype\tab \tab 
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 Export field\tab LONG AUpsfExportField(LPCSTR fieldName, LONG fieldIndex, TYPEID nativeType, TYPEID universalType, LPVOID sourceAddress, LONG sourceSize)
\par \pard \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 Log comment\tab LONG AUpsfLogComment(LPCSTR comment)
\par Create scope\tab LONG AUpsfCreateScope(LPCSTR scopeName, LONG index)
\par Close scope\tab LONG AUpsfCloseScope(void)\line 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\uldb\cf11 Chapter 8}{\v idx_chapter_8}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}
}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_chapter_8}}{\fldrslt }}{\cf1  }contains more information about these functions, including the possible return values for {\uldb\cf11 AUpsfExportField}{\v idx_aupsfexportfield}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsfexportfield}}{\fldrslt }}{\cf1 .}
 The return value is generally not tested, however, because the object cannot do anything to correct a failure. (The return value could be referenced if there were a need to notify the export event handler of a critical error, such as a general memory err
or.)
\par The {\uldb\cf11 AUpsfExportField}{\v idx_aupsfexportfield}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutt}{\cf6 on DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsfexportfield}
}{\fldrslt }}{\cf1  }
function has six parameters: the field name and the field index, the native type and the universal type, and the size and address of the source. The field name is a case-sensitive, space-padded string that identifies the field. It has a maximum length of 
eight characters. The field index can be any long integer; in general, arrays use nonzero values. The source address is a pointer to the source buffer, and the source size is the length of the source buffer.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_importing_fields}{\*\bkmkend idx_importing_fields}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_importing_fields}} {\caps\fs16\up6 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Importing Fields}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch67:0010}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {
\fs16\up6 K} Importing Fields}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_upsf_fields')')}} Importing Fields
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 When the {\uldb\cf11 AOBJ_IMPORTOBJECT}{\v idx_aobj_importobject}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_importobjec}}{\fldrslt }}{\cf1  }
message is received in the administration function, the object has been created and initialized to its default state. In other words, an object will not get an AOBJ_IMPORTOBJECT event until after it has received the {\uldb\cf11 AOBJ_CREATED}{\v 
idx_aobj_created}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_created}}{\fldrslt }}{\cf1  }message. In fact, when a project
 is being imported, all of the objects will be created before any individual object is imported. 
\par There are six functions that can be used to import an object. The functions are {\uldb\cf11 AUpsfImportField}{\v idx_aupsfimportfield}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}
}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsfimportfield}}{\fldrslt }}{\cf1 ,} {\uldb\cf11 AUpsfFieldCount}{\v idx_aupsffieldcount}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsffieldcount}}{\fldrslt }}{\cf1 ,} {\uldb\cf11 AUpsfFieldInfo}{\v idx_aupsffieldinfo}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {
\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_au}{\cf1 psffieldinfo}}{\fldrslt }}{\cf1 ,} {\uldb\cf11 AUpsfLogComment}{\v idx_aupsflogcomment}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsflogcomment}}{\fldrslt }}{\cf1 ,} {\uldb\cf11 AUpsfOpenScope}{\v idx_aupsfopenscope}{\field{\*\fldinst {\cf1 macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsfopenscope}}{\fldrslt }}{\cf1 ,} and {\uldb\cf11 AUpsfCloseScope}{\v idx_aupsfclosescope}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsfclosescope}}{\fldrslt }}{\cf1 .} Their function prototypes are shown in the following table:\line 

\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Action\tab \tab Function Prototype
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 Import field\tab LONG AUpsfImportField(LPCSTR fieldName, LONG fieldIndex, TYPEID nativeType, LPVOID destinationAddress, LONG destinationSize)
\par \pard \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 Count fields\tab LONG AUpsfFieldCount(LPCSTR fieldName)
\par \pard \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 Get field information\line LONG AUpsfFieldInfo(LPCSTR fieldName, LONG fieldIndex, TYPEID nativeType, LPTYPEID universalType, LPLONG convertedSize)
\par \pard \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 Log comment\tab LONG AUpsfLogComment(LPCSTR comment)
\par Open scope\tab LONG AUpsfOpenScope(LPCSTR scopeName, LONG index)
\par Close scope\tab LONG AUpsfCloseScope(void)\line 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 Refer to the section on scopes for more information about {\uldb\cf11 AUpsfOpenScope}{\v idx_aupsfo}{\v penscope}{\field{\*\fldinst {\cf1 macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsfopenscope}}{\fldrslt }}{\cf1  }and {\uldb\cf11 AUpsfCloseScope}{\v idx_aupsfclosescope}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsfclosescope}}{\fldrslt }}{\cf1 .} {\uldb\cf11 Chapter 8}{\v idx_chapter_8}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_chapter_8}}{\fldrslt }}{\cf1  }contains more information about all of these functions.
\par The {\uldb\cf11 AUpsfImportField}{\v idx_aupsfimportfield}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsfimportfield}
}{\fldrslt }}{\cf1  }function does most of the wo
rk when an object is being imported. It fetches data from the current scope and places it into the buffer that was specified by the destinationAddress parameter. If an error occurs while an object is being imported, {\uldb\cf11 AUpsfImportField}{\v 
idx_aupsfimportfield}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsfimportfield}}{\fldrslt }}{\cf1  }
returns a nonzero value. The return value should be checked so that the user can be notified if a problem occurred when the object was being imported.
\par The {\uldb\cf11 AUpsfFieldCount}{\v idx_aup}{\v sffieldcount}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsffieldcount}
}{\fldrslt }}{\cf1  }
function returns the count of all fields that have the specified name. It provides a way to enter a variable number of fields without having to store the count. As shown in the following example, it also provides an easy way to import a list that has an u
nknown number of entries:
\par \pard\plain \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 numStrings = AUpsfFieldCount("STRINGS");
\par \pard \s26\li1440\ri432\tx288\tlhyph\tx576\tqdec\tldot\tx864\tx1152\tx1440\tlhyph\tx1728\tx1890\tqdec\tldot\tx1980\tlhyph\tx2304\tqdec\tldot\tx2592\tlul\tx2880\tqc\tlul\tx3168\tx3240\tx3456\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The {\uldb\cf11 AUpsfFieldInfo}{\v idx_aupsffieldinfo}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutt}{\cf1 on idx_aupsffieldinfo}}{\fldrslt }}{\cf1  }
function allows you to fetch information about a UPSF field. For example, you can use the convertedSize parameter to retrieve the required length of a field. Similarly, you can use the universalType parameter to get the field's universal type. (Passing a 
NULL pointer for either one of these parameters indicates that you do not want the information it accesses.) This function is most often used when strings or bitmaps of an unknown length are being imported. As seen in the following co
de fragment, a buffer can be allocated based on the required size for a string. Please note that the required size for a string includes the NULL terminator.
\par \pard\plain \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 \tab ret = AUpsfFieldInfo("STRINGS", currentIndex,
\par \tab \tab \tab \tab \tab AUPSF_NATV_STRING, NULL,
\par \tab \tab \tab \tab \tab (LPLONG)&size);
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 If data encapsulation is required at the object level, the {\uldb\cf11 AUpsfOpenScope}{\v idx_aupsfopenscope}{\field{\*\fldinst {\cf1 macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsfopenscope}}{\fldrslt }}{\cf1  }and {\uldb\cf11 AUpsfCloseScope}{\v idx_aupsfclosescope}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump}{\cf6  <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsfclosescope}}{\fldrslt }}{\cf1  }functions allow the object to retrieve groups of data. 
\par If {\uldb\cf11 AUpsfFieldInfo}{\v idx_aupsffieldinfo}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsffieldinfo}}{\fldrslt }}{
\cf1  }fails, do not return an error message to the user. Instead, set the object-data field in question to a default value and use {\uldb\cf11 AUpsfLogComment}{\v idx_aupsflogcomment}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsflogcomment}}{\fldrslt }}{\cf1  }to record the error. The {\uldb\cf11 AUpsfLogComment}{\v idx_aupsflogcomment}{\field{\*\fldinst {\cf1 ma}{
\cf1 crobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsflogcomment}}{\fldrslt }}{\cf1  }
function takes the argument string and writes it in the imported project's pjt_name.log. (The name of the UPSF file is pjt_name.ups.) Using {\uldb\cf11 AUpsfLogComment}{\v idx_aupsflogcomment}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsflogcomment}}{\fldrslt }}{\cf1  }allows the object to default to a good value and notify the user without stopping the import.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_upsf_arrays}{\*\bkmkend idx_upsf_arrays}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_upsf_arrays}}{\plain 
\f3\fs16\cf2\up6\lang1033  }{\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch65:0015}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} UPSF Arrays}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} UPSF Arrays}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_upsf_concepts')')}} UPSF Arrays
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The best way to store an array is to keep the same field nam
e but to change the index. This concept is illustrated in the following code fragment, which is taken from the example for exporting fields: 
\par \pard\plain \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 /* An array can be exported without storing the
\par  * number of items.  Usually each element in an
\par  * array uses the same field name with an index
\par  * that corresponds to its position in the array.
\par  */    
\par for(i=0; i<pData->nOwnedObj; i++)
\par \tab \{
\par \tab AUpsfExportField("OwnedObj", i,
\par \tab \tab \tab AUPSF_NATV_OBJECTREF, AUPSF_UNIV_OBJECTREF,
\par \tab \tab \tab (LPVOID)(&pData->aoiOwned[i]),
\par \tab \tab \tab sizeof(OBJECTID));
\par \tab \}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_upsf_data_types}{\*\bkmkend idx_upsf_data_types}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_upsf_data_types}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} UPSF Data Types}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch65:0020}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} UPSF Data Types}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_upsf_concepts')')}} UPSF Data Types

\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
When a file that uses the UPSF format is being exported, it generally converts native data types into universal types. During import, the data is then converted from the universal type back into the native type. The native type is supported by the operati
ng system and the universal type is supported by the UPSF format. The universal type is used for cross-platform compatibility. The next two sections contain information about exporting and importing data types. 
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Exporting Data Types}{\v idx_exporting_data_types}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {
\cf6 gotobutton idx_exporting_data_t}}{\fldrslt }}
\par {\uldb\cf11 Importing Data Types}{\v idx_importing_data_types}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_importing_data_t}
}{\fldrslt }}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_exporting_data_t}{\*\bkmkend idx_exporting_data_t}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_exporting_data_types}} {\caps\fs16\up6 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Exporting Data Types}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch69:0005}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {
\fs16\up6 K} Exporting Data Types}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_upsf_data_types')')}} Exporting Data Types
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
Although the UPSF format generally allows for translation of a native type into a universal type, there are occasions when it is better to circumvent the translation. {\uldb\cf11 AUpsfExportField}{\v idx_aupsfexportfield}{\field{\*\fldinst {\cf1 
macrobutton Next}{\cf1 Field }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsfexportfield}}{\fldrslt }}{\cf1  }
allows you to specify a native type for the universal type parameter so that you can export the native type without changing its value. If the value for the two types were the same, the data would be written directly to the UPSF file and retrieved at impo
rt time without any translation.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 You could use this scheme for an object that contains a Microsoft Windows metafile. Since metafiles are a collection of operating-system graphics commands, an
d since there is no universal metafile type, you would normally be forced to use the AUPSF_UNIV_BITMAP universal type. The problem is that the resulting translation would cause a loss of quality if the field were to be converted from a metafile to a bitma
p. If the same type identifier were specified in both the native type and the universal type parameter, however, the data could be stored without an attempt at translation and the true metafile could be retrieved at import time.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 The export of the OTHRITEM field in the following code fragment is an example where the native type and the universal type are both unsupported.
\par \pard\plain \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 AUpsfExportField("OTHRITEM", 0L, NEW_TYPE, NEW_TYPE,
\par \tab (LPVOID)&(objData->otherItem), (long)sizeof(NewType));
\par \pard \s26\li1440\ri432\tx288\tlhyph\tx576\tqdec\tldot\tx864\tx1152\tx1440\tlhyph\tx1728\tx1890\tqdec\tldot\tx1980\tlhyph\tx2304\tqdec\tldot\tx2592\tlul\tx2880\tqc\tlul\tx3168\tx3240\tx3456\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
The following table lists the supported native types that can be exported. The first column lists the operating-system type. The second column lists the corresponding native type.  
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Operating-system Type\tab Native Type
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 BITMAP\tab \tab AUPSF_NATV_BITMAP
\par BITMAPCOREINFO\tab AUPSF_NATV_BITMAPCORE
\par BITMAPINFO\tab \tab AUPSF_NATV_BITMAPINFO
\par BOOL\tab \tab AUPSF_NATV_BOOL
\par BYTE\tab \tab AUPSF_NATV_BYTE
\par char\tab \tab AUPSF_NATV_CHAR
\par COLORREF\tab \tab AUPSF_NATV_RGBCOLOR
\par double\tab \tab AUPSF_NATV_DOUBLE
\par DWORD\tab \tab AUPSF_NATV_DWORD
\par float\tab \tab AUPSF_NATV_FLOAT
\par HBITMAP\tab \tab AUPSF_NATV_HBITMAP
\par HBRUSH\tab \tab AUPSF_NATV_HBRUSH
\par HMETAFILE\tab \tab AUPSF_NATV_METAFILE
\par int\tab \tab AUPSF_NATV_INT
\par long{\b \tab }\tab AUPSF_NATV_LONG
\par long double\tab AUPSF_NATV_LONGDOUBLE
\par LPSTR, char*\tab AUPSF_NATV_STRING
\par OBJECTID\tab \tab AUPSF_NATV_OBJECTREF
\par POINT\tab \tab AUPSF_NATV_POINT
\par RECT\tab \tab AUPSF_NATV_RECT
\par short\tab \tab AUPSF_NATV_SHORT
\par unsigned char\tab AUPSF_NATV_UCHAR
\par unsigned int\tab AUPSF_NATV_UINT
\par unsigned long{\b \tab }AUPSF_NATV_ULONG
\par unsigned short\tab AUPSF_NATV_USHORT
\par WORD\tab \tab AUPSF_NATV_WORD
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\expnd-3 
There is a native type that is not listed in the previous table because it does not have an operating-system equivalent. The native type is AUPSF_NATV_FONT. }
Its type is a string that specifies the name of the font. When a font is exported, the name of the font is separate from the font's other attributes, such as its size and style, because the font mi
ght not exist on the import platform. If it does not exist on import, the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
has a list of font translations that can be used in place of the original font. The default font is the system font. To build the translation table in the APPBLDR.INI file, go to the font translations section of the file and use the following syntax:

\par \pard\plain \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 [FontTranslations]
\par Font Name=Local Font Name
\par \pard \s26\li1440\ri432\tx288\tlhyph\tx576\tqdec\tldot\tx864\tx1152\tx1440\tlhyph\tx1728\tx1890\tqdec\tldot\tx1980\tlhyph\tx2304\tqdec\tldot\tx2592\tlul\tx2880\tqc\tlul\tx3168\tx3240\tx3456\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The font name is the unive
rsal font being imported, and the local font name is the name of the translation font on the computer that is to receive the imported data.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
The following table lists the UPSF native types for Microsoft Windows data structures and their universal counterparts. AUPSF_UNIV_INTEGER is used for integers and AUPSF_UNIV_NUMBER is used for floating-point numbers.
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Native Type\tab \tab Universal Types
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 AUPSF_NATV_BITMAP\tab AUPSF_UNIV_BITMAP (device-dependent bitmap)
\par \pard \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 AUPSF_NATV_BITMAPCORE\tab AUPSF_UNIV_BITMAP
\par AUPSF_NATV_BITMAPINFO\tab AUPSF_UNIV_BITMAP
\par AUPSF_NATV_BOOL\tab AUPSF_UNIV_BOOL
\par \pard \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 AUPSF_NATV_BYTE\tab AUPSF_UNIV_INTEGER, AUPSF_UNIV_NUMBER
\par AUPSF_NATV_CHAR\tab AUPSF_UNIV_INTEGER, AUPSF_UNIV_NUMBER
\par \pard \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 AUPSF_NATV_RGBCOLOR\tab AUPSF_UNIV_COLOR
\par AUPSF_NATV_DOUBLE\tab AUPSF_UNIV_NUMBER
\par \pard \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 AUPSF_NATV_DWORD\tab AUPSF_UNIV_INTEGER, AUPSF_UNIV_NUMBER
\par \pard \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 AUPSF_NATV_FLOAT\tab AUPSF_UNIV_NUMBER
\par AUPSF_NATV_FONT\tab AUPSF_UNIV_FONT
\par \pard \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 AUPSF_NATV_HBITMAP\tab AUPSF_UNIV_BITMAP (device-dependent bitmap)
\par AUPSF_NATV_HBRUSH\tab AUPSF_UNIV_BITMAP (eight-by-eight, monochrome bitmap)
\par AUPSF_NATV_METAFILE\tab AUPSF_UNIV_BITMAP (device-dependent bitmap)
\par AUPSF_NATV_INT\tab AUPSF_UNIV_INTEGER, AUPSF_UNIV_NUMBER
\par AUPSF_NATV_LONG\tab AUPSF_UNIV_INTEGER, AUPSF_UNIV_NUMBER
\par \pard \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 AUPSF_NATV_LONGDOUBLE\tab AUPSF_UNIV_NUMBER
\par AUPSF_NATV_STRING\tab AUPSF_UNIV_STRING
\par AUPSF_NATV_OBJECTREF\tab AUPSF_UNIV_OBJECTREF
\par AUPSF_NATV_POINT\tab AUPSF_UNIV_POINT
\par AUPSF_NATV_RECT\tab AUPSF_UNIV_RECT
\par \pard \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 AUPSF_NATV_SHORT\tab AUPSF_UNIV_INTEGER, AUPSF_UNIV_NUMBER
\par AUPSF_NATV_UCHAR\tab AUPSF_UNIV_INTEGER, AUPSF_UNIV_NUMBER
\par AUPSF_NATV_UINT\tab AUPSF_UNIV_INTEGER, AUPSF_UNIV_NUMBER
\par AUPSF_NATV_ULONG\tab AUPSF_UNIV_INTEGER, AUPSF_UNIV_NUMBER
\par AUPSF_NATV_USHORT\tab AUPSF_UNIV_INTEGER, AUPSF_UNIV_NUMBER
\par AUPSF_NATV_WORD\tab AUPSF_UNIV_INTEGER, AUPSF_UNIV_NUMBER
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_importing_data_t}{\*\bkmkend idx_importing_data_t}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_importing_data_types}} {\caps\fs16\up6 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Importing Data Types}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch69:0010}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {
\fs16\up6 K} Importing Data Types}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_upsf_data_types')')}} Importing Data Types
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 For most data types, the data types that are supported during export are also supported during import. The exceptions are HBITMAP, HBRUSH, and {\expnd-5 
HMETAFILE. Instead of creating a handle, the UPSF converts these types to one of three native types: AUPSF_NATV_BITMAP, AUPSF_NATV_BITMAPINFO, }or AUPSF_NATV_BI
TMAPCORE. Refer to the examples at the end of this chapter for more information about using these three native types. 
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 During data import, you can use the universalType parameter in the {\uldb\cf11 AUpsfFieldInfo}{\v idx_aupsffieldinfo}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsffieldinfo}}{\fldrslt }}{\cf1  }
function to get the field's universal type. (Passing a NULL pointer for the universalType parameter indicates that you do not want the information it accesses.)
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 The following table shows a list of supported native types that can be imported. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Universal Type\tab Identifier
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 AUPSF_UNIV_BITMAP\tab AUPSF_NATV_BITMAP, AUPSF_NATV_BITMAPCORE, AUPSF_NATV_BITMAPINFO, 
\par \pard \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 AUPSF_UNIV_BOOL\tab AUPSF_NATV_BOOL
\par AUPSF_UNIV_COLOR\tab AUPSF_NATV_RGBCOLOR
\par \pard \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 AUPSF_UNIV_INTEGER\tab AUPSF_NATV_BYTE, AUPSF_NATV_CHAR, \line AUPSF_NATV_DWORD,\line AUPSF_NATV_INT, AUPSF_NATV_LONG, AUPSF_NATV_SHORT, AUPSF_NATV_UCHAR, AUPSF_NATV_UINT, AUPSF_NATV_ULONG,\line 
AUPSF_NATV_USHORT,\line AUPSF_NATV_WORD 
\par \pard \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 AUPSF_UNIV_NUMBER\tab AUPSF_NATV_BYTE, AUPSF_NATV_CHAR, AUPSF_NATV_DOUBLE, AUPSF_NATV_D
WORD, AUPSF_NATV_FLOAT, AUPSF_NATV_INT, AUPSF_NATV_LONG, AUPSF_NATV_LONGDOUBLE, AUPSF_NATV_SHORT, AUPSF_NATV_UCHAR, AUPSF_NATV_UINT, AUPSF_NATV_ULONG, AUPSF_NATV_USHORT, AUPSF_NATV_WORD
\par \pard \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 AUPSF_UNIV_OBJECTREF\tab AUPSF_NATV_OBJECTREF
\par AUPSF_UNIV_POINT\tab AUPSF_NATV_POINT
\par AUPSF_UNIV_RECT\tab AUPSF_NATV_RECT
\par AUPSF_UNIV_STRING\tab AUPSF_NATV_STRING
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_upsf_examples}{\*\bkmkend idx_upsf_examples}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_upsf_examples}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} UPSF Examples}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch65:0025}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} UPSF Examples}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_upsf_concepts')')}} UPSF Examples
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The rest of this chapter contains UPSF code examples.
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 UPSF Administration Function Example}{\v idx_upsf_administration_function_example}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}
}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_upsf_administrat}}{\fldrslt }}
\par {\uldb\cf11 UPSF Exporting Example}{\v idx_upsf_exporting_example}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_upsf_exporting_e}
}{\fldrslt }}
\par {\uldb\cf11 UPSF Importing Examples}{\v idx_upsf_importing_examples}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_upsf_importing_e}
}{\fldrslt }}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_upsf_administrat}{\*\bkmkend idx_upsf_administrat}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_upsf_administration_function_example}} {
\caps\fs16\up6 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} UPSF Administration Function Example}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch610:0005}} {\caps\fs16\up6 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} UPSF Administration Function Example}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_upsf_examples')')}}
 UPSF Administration Function Example
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The following code is a sample administration function for an object type that supports the UPSF format.
\par \pard\plain \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 #include <windows.h>
\par #include <a_alm.h>
\par 
\par long ExportMyObject(OBJECTID);
\par long ImportMyObject(OBJECTID);
\par 
\par LONG ALMAPI AdministrationFunction
\par \tab (
\par \tab OBJECTID\tab \tab oi,
\par \tab pAObjMessage\tab pMsg
\par \tab )
\par 
\par \tab \{
\par \tab LONG\tab lRet;
\par   
\par \tab switch((int)(pMsg->message1))
\par \tab \tab \{
\par \tab \tab \tab o
\par \tab \tab \tab o
\par \tab \tab \tab o
\par \tab \tab case AOBJ_EXPORTOBJECT:
\par \tab \tab \tab lRet = ExportMyObject(oi);
\par \tab \tab \tab break;
\par 
\par \tab \tab case AOBJ_IMPORTOBJECT:
\par \tab \tab \tab lRet = ImportMyObject(oi);
\par \tab \tab \tab break;
\par \tab \tab \tab o
\par \tab \tab \tab o
\par \tab \tab \tab o
\par \tab \tab default:
\par \tab \tab \tab lRet = A_NOTHANDLED;
\par \tab \tab \tab break;
\par \tab \tab \}
\par 
\par \tab return lRet;
\par \tab \}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_upsf_exporting_e}{\*\bkmkend idx_upsf_exporting_e}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_upsf_exporting_example}} {\caps\fs16\up6 
${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} UPSF Exporting Example}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch610:0010}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 K} UPSF Exporting Example}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_upsf_examples')')}} UPSF Exporting Example
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The sam
ple routine in this section is for an object type that is being exported and that has many different data types.The code in the example exports a field whose name is Version. 
\par \pard\plain \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 /*  Our hypothetical object has the following
\par  *  data fields.
\par  */
\par 
\par typedef ... myType; /* private (nonstandard) type */
\par 
\par #define MYOBJDAT_IDX\tab \tab 0
\par #define BLOB_TYPE\tab \tab \tab MAKEID('B', 'l', 'o', 'b')
\par typedef struct
\par \tab \{
\par \tab double\tab x;
\par \tab double\tab y;
\par \tab \} Position;
\par 
\par typedef struct
\par \tab \{
\par \tab short\tab \tab sVersion;
\par \tab myType\tab blob;
\par \tab char\tab \tab szTitle[255];
\par \tab Position\tab pos;
\par \tab int\tab \tab nOwnedObj;
\par \tab OBJECTID*\tab \tab aoiOwned;
\par \tab \} MyObjData;
\par 
\par long ExportMyObject
\par \tab (
\par \tab OBJECTID\tab oi
\par \tab )
\par \tab \{
\par \tab long\tab \tab lUpsfRet;
\par \tab int\tab i;
\par \tab MyObjData*\tab pData;
\par \tab pData = (MyObjData*)AObjLockData(oi, MYOBJDAT_IDX);
\par 
\par \tab /* Export the object one field at a time.
\par \tab  * There is no need to check for export errors
\par \tab  * because UPSF will automatically stop working with 
\par \tab  * serious errors.
\par \tab  */
\par \tab AUpsfExportField("Version", 0L, 
\par \tab \tab \tab \tab \tab AUPSF_NATV_SHORT,
\par \tab \tab \tab \tab \tab AUPSF_UNIV_INTEGER, 
\par \tab \tab \tab \tab \tab (LPVOID)(&pData->sVersion),
\par \tab \tab \tab \tab \tab sizeof(short));
\par 
\par \tab /* Exporting with the native type equaling the
\par \tab  * universal type stores the data with no
\par \tab  * translation.
\par \tab  */
\par \tab AUpsfExportField("MyBlob", 0L, BLOB_TYPE,
\par \tab \tab \tab BLOB_TYPE, (LPVOID)(&pData->blob),
\par \tab \tab \tab sizeof(myType));
\par \tab /* The sourceSize of a string does NOT include the
\par \tab  * terminating NULL ('\\0') character
\par \tab  */                        
\par \tab AUpsfExportField("Title", 0L, AUPSF_NATV_STRING,
\par \tab \tab \tab AUPSF_UNIV_STRING, (LPVOID)(&pData->szTitle),
\par \tab \tab \tab strlen(pData->szTitle));
\par 
\par \tab /* To group items in structures together, scopes
\par \tab  * can be used. You CREATE scopes when exporting.
\par  \tab  */
\par \tab lUpsfRet = AUpsfCreateScope("Position", 0L);
\par \tab if(lUpsfRet == AUPSF_NOERROR)
\par \tab \tab \{
\par \tab \tab /* Exporting inside of a scope is identical to
\par \tab \tab  * exporting any other location. Scopes just
\par \tab \tab  * provide a way to hide or group data.
\par \tab \tab  */
\par \tab \tab AUpsfExportField("X", 0L, AUPSF_NATV_DOUBLE,
\par \tab \tab \tab \tab AUPSF_UNIV_NUMBER, (LPVOID)(&pData->pos.x),
\par \tab \tab \tab \tab sizeof(double));
\par \tab \tab AUpsfExportField("Y", 0L, AUPSF_NATV_DOUBLE,
\par \tab \tab \tab \tab AUPSF_UNIV_NUMBER,  (LPVOID)(&pData->pos.y),
\par \tab \tab \tab \tab sizeof(double));
\par \tab \tab /* ALWAYS close a scope that is created */
\par \tab \tab AUpsfCloseScope();
\par \tab \tab \}
\par 
\par \tab /* An array can be exported without storing the
\par \tab  * number of items.  Usually each element in an
\par \tab  * array uses the same field name with an index
\par \tab  * that corresponds to its position in the array.
\par \tab  */    
\par \tab for(i=0; i<pData->nOwnedObj; i++)
\par \tab \tab \{
\par \tab \tab AUpsfExportField("OwnedObj", i,
\par \tab \tab \tab \tab AUPSF_NATV_OBJECTREF, AUPSF_UNIV_OBJECTREF,
\par \tab \tab \tab \tab (LPVOID)(&pData->aoiOwned[i]),
\par \tab \tab \tab \tab sizeof(OBJECTID));
\par \tab \tab \}
\par 
\par \tab AObjUnlockData(oi, MYOBJDAT_IDX);
\par \tab return A_OK;\tab /* Always return A_OK. */
\par \tab \}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_upsf_importing_e}{\*\bkmkend idx_upsf_importing_e}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_upsf_importing_examples}} {
\caps\fs16\up6 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} UPSF Importing Examples}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch610:0015}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 K} UPSF Importing Examples}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_upsf_examples')')}} UPSF Importing Examples
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The following example is the import routine for the object that was exported in the UPSF export example.
\par \pard\plain \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 long ImportMyObject
\par \tab (
\par \tab OBJECTID\tab \tab oi
\par \tab )
\par   
\par \tab \{
\par \tab long\tab \tab lUpsfRet;
\par \tab MyObjData*\tab pData;
\par \tab short\tab sVer;
\par   
\par \tab pData = (MyObjData*)AObjLockData(oi, MYOBJDAT_IDX);
\par 
\par \tab /* Import the version to make sure which version of
\par \tab  * the object has been exported.
\par \tab  */
\par \tab lUpsfRet = AUpsfImportField("Version", 0L,
\par \tab \tab \tab \tab \tab \tab AUPSF_NATV_SHORT,
\par \tab \tab \tab \tab \tab \tab (LPVOID)&sVer, sizeof(short));
\par       
\par \tab if((lUpsfRet == AUPSF_NOERROR) &&
\par \tab \tab (sVer != CURRENT_VERSION))
\par \tab \tab \{
\par \tab \tab /* Import the old object so that it will work
\par \tab \tab  * in the new version of the object. When it has
\par \tab \tab  * finished importing, the object should be
\par \tab \tab  * configured for the new version. This might not
\par \tab \tab  * be necessary, however; if you are upgrading an
\par \tab \tab  * object, nonexistent fields will use the object's
\par \tab \tab  * default, and existing fields will use the old 
\par \tab \tab  * field name. 
\par \tab \tab  */
\par \tab \tab \tab o
\par \tab \tab \tab o
\par \tab \tab \tab o
\par \tab \tab \}
\par \tab else if (lUpsfRet == AUPSF_NOERROR)
\par \tab \tab \{
\par \tab \tab /* We are importing the current version. Import
\par \tab \tab  * all exported fields
\par \tab \tab  */
\par 
\par \tab \tab /* Importing a blob of data only requires the
\par \tab \tab  * native type to match the universal type. When
\par \tab \tab  * both types are the same, no translation occurs.
\par \tab \tab  */
\par \tab \tab AUpsfImportField("MyBlob", 0L, BLOB_TYPE,
\par \tab \tab \tab \tab (LPVOID)(&pData->blob), sizeof(myType));
\par 
\par \tab \tab /* Importing strings into a fixed length buffer
\par \tab \tab  * will work, but an error is returned if the
\par \tab \tab  * buffer cannot accept the whole string.
\par \tab \tab  */                        
\par \tab \tab AUpsfImportField("Title", 0L, AUPSF_NATV_STRING,
\par \tab \tab \tab \tab (LPVOID)(&pData->szTitle),
\par \tab \tab \tab \tab sizeof(pData->szTitle));
\par 
\par \tab \tab /* To group items in structures together, scopes
\par \tab \tab  * can be used. You OPEN scopes when importing.
\par \tab \tab  */
\par \tab \tab lUpsfRet = AUpsfOpenScope("Position", 0L);
\par \tab \tab if(lUpsfRet == AUPSF_NOERROR)
\par \tab \tab \tab \{
\par \tab \tab \tab /* Importing inside of a scope is identical to
\par \tab \tab \tab  * importing any other location. Scopes just
\par \tab \tab \tab  * provide a way to hide or group data.
\par \tab \tab \tab  */
\par \tab \tab \tab AUpsfImportField("X", 0L, AUPSF_NATV_DOUBLE,
\par \tab \tab \tab \tab \tab (LPVOID)(&pData->pos.x),
\par \tab \tab \tab \tab \tab sizeof(double));
\par 
\par \tab \tab \tab AUpsfExportField("Y", 0L, AUPSF_NATV_DOUBLE,
\par \tab \tab \tab \tab \tab (LPVOID)(&pData->pos.y),
\par \tab \tab \tab \tab \tab sizeof(double));
\par         
\par \tab \tab \tab /* ALWAYS close a scope that is opened */
\par \tab \tab \tab AUpsfCloseScope();
\par \tab \tab \tab \}
\par 
\par \tab \tab /* The number of elements in an array can be
\par \tab \tab  * determined by counting the number of fields
\par \tab \tab  * with a particular name.
\par \tab \tab  */
\par \tab \tab pData->nOwnedObj = 
\par \tab \tab \tab \tab (int)AUpsfFieldCount(\tab "OwnedObj");
\par   
\par 
\par \tab if(pData->nOwnedObj < 0)
\par \tab \tab \{
\par \tab \tab /* log the error */
\par \tab \tab AUpsfLogComment(
\par \tab \tab \tab "Unable to find the list of owned objects.");
\par \tab \tab \}
\par \tab else
\par \tab \tab \{
\par \tab \tab int i;
\par \tab \tab /* Allocate the memory for the owned objs. */
\par \tab \tab \tab o
\par \tab \tab \tab o
\par \tab \tab \tab o
\par      
\par \tab \tab for(i=0; i<pData->nOwnedObj; i++)
\par \tab \tab \tab \{
\par \tab \tab \tab lUpsfRet = AUpsfImportField("OwnedObj", i,
\par \tab \tab \tab \tab AUPSF_NATV_OBJECTREF,
\par \tab \tab \tab \tab (LPVOID)(&pData->aoiOwned[i]),
\par \tab \tab \tab \tab sizeof(OBJECTID));
\par             
\par \tab \tab \tab \tab if(lUpsfRet != UPSF_NOERROR)
\par \tab \tab \tab \tab \tab \{
\par \tab \tab \tab \tab \tab /* shrink the array */
\par \tab \tab \tab \tab \tab ...
\par           
\par \tab \tab \tab \tab \tab /* log the error */
\par \tab \tab \tab \tab \tab AUpsfLogComment(
\par \tab \tab \tab \tab \tab "Owned Object lost during import.");
\par \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \}
\par \tab \tab \tab \}
\par \tab \tab \}
\par \tab else
\par \tab \tab \{
\par \tab \tab /* The object could not be imported because the
\par \tab \tab  * version information was unknown.  Log this
\par \tab \tab  * error to the log file.
\par \tab \tab  */
\par      
\par \tab \tab AUpsfLogComment(
\par \tab \tab \tab "Bad version \emdash  object is in default state.");
\par \tab \tab \}
\par     
\par \tab AObjUnlockData(oi, MYOBJDAT_IDX);
\par \tab return A_OK;  /* Always return A_OK. */
\par \tab \}
\par 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 There are three native bitmap types: AUPSF_NATV_BITMAP, A_NATV_BITMAPCORE, and AUPSF_NATV_BITMAPINFO.
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }
AUPSF_NATV_BITMAP is a device-dependent, Microsoft Windows bitmap. Since it is device-dependent, you should avoid using it.
\par \pard \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 {\cf5 \{bmc rr.bmp\}\tab }AUPSF_NATV_BITMAPCORE is a device-independent, OS/2 bitmap.
\par {\cf5 \{bmc rr.bmp\}\tab }AUPSF_NATV_BITMAPINFO  is a device-independent, Microsoft Windows bitmap. 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 If your import handler requests a bitmap with the AUPSF_NATV_BITMAP native type, the UPSF fills the operating
 system's BITMAP structure with the correct data, immediately followed by the bitmap's bits. This order allows the bitmap and the bits to be retrieved by a single call to {\uldb\cf11 AUpsfImportField}{\v idx_aupsfimportfield}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsfimportfield}}{\fldrslt }}{\cf1 .}
 The AUPSF_NATV_BITMAPINFO type is the BITMAPINFOHEADER structure. It is followed by the color table (the RGBQUAD structures, if necessary), and the bits. Similarly, the AUPSF_NATV_BITMAPCORE type is the BITMAPCOREHEADER st
ructure, followed by the color table (the RGBTRIPLE structures, if necessary), and the bits. The next three examples demonstrate the use of these types.
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 UPSF AUPSF_NATV_BITMAPINFO Import Example}{\v idx_upsf_aupsf_natv_bitm_import_example}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>
}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_upsf_aupsf_natv_}}{\fldrslt }}
\par {\uldb\cf11 UPSF AUPSF_NATV_BITMAPCORE Import Example}{\v idx_n1_upsf_aupsf_natv_bitm_import_example}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_n1_upsf_aupsf_na}}{\fldrslt }}
\par {\uldb\cf11 UPSF AUPSF_NATV_BITMAP Import}{\uldb\cf11  Example}{\v idx_n2_upsf_aupsf_natv_bitm_import_example}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {
\cf6 gotobutton idx_n2_upsf_aupsf_na}}{\fldrslt }}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_upsf_aupsf_natv_}{\*\bkmkend idx_upsf_aupsf_natv_}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_upsf_aupsf_natv_bitm_import_example}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} UPSF AUPSF_NATV_BITMAPINFO Import Example}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 +} ch611:0005}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} UPSF AUPSF_NATV_BITMAPINFO Import Example}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_upsf_importing_examples')')}} UPSF{\plain \f3\fs36\cf2\lang1033  }AUPSF_NATV_BITMAPINFO Import Example
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The following example shows an AUPSF_NATV_BITMAPINFO import.
\par \pard\plain \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 void ImportBitmapInfo 
\par \tab ( 
\par \tab )
\par 
\par \tab \{
\par \tab long\tab \tab \tab \tab ret;
\par \tab LPBITMAPINFOHEADER\tab \tab bIH;
\par \tab LPSTR\tab \tab \tab \tab bits = NULL;
\par \tab long\tab \tab \tab \tab bmpSize;
\par 
\par \tab ret = AUpsfFieldInfo("BITMAP", 0L, AUPSF_NATV_BITMAPINFO,
\par \tab \tab \tab \tab \tab NULL, (LPLONG)&bmpSize);
\par \tab if(ret == AUPSF_NOERROR)
\par \tab \tab \{
\par \tab \tab MEMBLOCKID\tab \tab \tab \tab mi = AMemAllocate(bmpSize);
\par \tab \tab bIH = (LPBITMAPINFOHEADER)AMemLock(mi);
\par 
\par \tab \tab ret = AUpsfImportField("BITMAP", 0L, 
\par \tab \tab \tab AUPSF_NATV_BITMAPINFO, (LPVOID)bIH, bmpSize);
\par \tab \tab if(ret != AUPSF_NOERROR)
\par \tab \tab \tab AUpsfLogComment("Error importing BITMAP.");
\par \tab \tab else
\par \tab \tab \tab \{
\par \tab \tab \tab int\tab \tab \tab \tab colorTableSize = 0;
\par \tab \tab \tab if(bIH->biBitCount != 24)
\par \tab \tab \tab \tab colorTableSize = 
\par \tab \tab \tab \tab \tab (0x0001 << bIH->biBitCount) * 
\par \tab \tab \tab \tab \tab \tab sizeof(RGBQUAD);
\par \tab \tab \tab bits = (LPSTR)bIH + sizeof(BITMAPINFOHEADER) + 
\par \tab \tab \tab \tab colorTableSize;
\par 
\par \tab \tab \tab /* Store bitmap as needed.... */
\par \tab \tab \tab \tab o
\par \tab \tab \tab \tab o
\par \tab \tab \tab \tab o
\par \tab \tab \tab \}
\par 
\par \tab \tab AMemUnlock(mi);
\par \tab \tab AMemFree(mi);
\par \tab \tab \}
\par \tab else
\par \tab \tab AUpsfLogComment("Error importing BITMAP.");
\par \tab \}
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_n1_upsf_aupsf_na}{\*\bkmkend idx_n1_upsf_aupsf_na}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_n1_upsf_aupsf_natv_bitm_import_example}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} UPSF AUPSF_NATV_BITMAPCORE Import Example}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 +} ch611:0010}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} UPSF AUPSF_NATV_BITMAPCORE Import Example}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_upsf_importing_examples')')}} UPSF{\plain \f3\fs36\cf2\lang1033  }AUPSF_NATV_BITMAPCORE Import Example
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The following example shows an AUPSF_NATV_BITMAPCORE import.
\par \pard\plain \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 void ImportBitmapCore 
\par \tab ( 
\par \tab )
\par 
\par \tab \{
\par \tab long\tab \tab \tab \tab ret;
\par \tab LPBITMAPCOREHEADER\tab \tab bCH;
\par \tab LPSTR\tab \tab \tab bits = NULL;
\par \tab long\tab \tab \tab \tab bmpSize;
\par 
\par \tab ret = AUpsfFieldInfo("BITMAP", 0L, AUPSF_NATV_BITMAPCORE, 
\par \tab \tab NULL, (LPLONG)&bmpSize);
\par \tab if(ret == AUPSF_NOERROR)
\par \tab \tab \{
\par \tab \tab MEMBLOCKID  mi = AMemAllocate(bmpSize);
\par \tab \tab bCH = (LPBITMAPCOREHEADER)AMemLock(mi);
\par 
\par \tab \tab ret = AUpsfImportField("BITMAP", 0L, 
\par \tab \tab \tab AUPSF_NATV_BITMAPCORE, (LPVOID)bCH, bmpSize);
\par \tab \tab if(ret != AUPSF_NOERROR)
\par \tab \tab \tab AUpsfLogComment("Error importing BITMAP.");
\par \tab \tab else
\par \tab \tab \tab \{
\par \tab \tab \tab int\tab colorTableSize = 0;
\par \tab \tab \tab if(bCH->bcBitCount != 24)
\par \tab \tab \tab \tab colorTableSize = 
\par \tab \tab \tab \tab \tab (0x0001 << bCH->bcBitCount) * 
\par \tab \tab \tab \tab sizeof(RGBTRIPLE);
\par \tab \tab \tab bits = (LPSTR)bCH + sizeof(BITMAPCOREHEADER) + 
\par \tab \tab \tab \tab colorTableSize;
\par 
\par \tab \tab \tab /* Store bitmap as needed.... */
\par \tab \tab \tab \tab \tab o
\par \tab \tab \tab \tab \tab o
\par \tab \tab \tab \tab \tab o
\par \tab \tab \tab \}
\par 
\par \tab \tab AMemUnlock(mi);
\par \tab \tab AMemFree(mi);
\par \tab \tab \}
\par \tab else
\par \tab \tab AUpsfLogComment("Error importing BITMAP.");
\par \tab \}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_n2_upsf_aupsf_na}{\*\bkmkend idx_n2_upsf_aupsf_na}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} i
dx_n2_upsf_aupsf_natv_bitm_import_example}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} UPSF AUPSF_NATV_BITMAP Import Example}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 +} ch611:0015}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} UPSF AUPSF_NATV_BITMAP Import Example}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_upsf_importing_examples')')}} UPSF{\plain \f3\fs36\cf2\lang1033  }AUPSF_NATV_BITMAP Import Example
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The following example shows an AUPSF_NATV_BITMAP import.
\par \pard\plain \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 void ImportBitmap 
\par \tab ( 
\par \tab )
\par 
\par \tab \{
\par \tab long\tab ret;
\par \tab LPBITMAP\tab \tab bitmap;
\par \tab LPSTR\tab bits = NULL;
\par \tab long\tab bmpSize;
\par 
\par \tab ret = AUpsfFieldInfo("BITMAP", 0L, AUPSF_NATV_BITMAP, \tab 
\par \tab \tab \tab \tab \tab NULL, (LPLONG)&bmpSize);
\par \tab if(ret == AUPSF_NOERROR)
\par \tab \tab \{
\par \tab \tab MEMBLOCKID\tab \tab mi = AMemAllocate(bmpSize);
\par \tab \tab bitmap = (LPBITMAP)AMemLock(mi);
\par 
\par \tab \tab ret = AUpsfImportField("BITMAP", 0L, AUPSF_NATV_BITMAP, 
\par \tab \tab \tab \tab \tab \tab (LPVOID)bitmap, bmpSize);
\par \tab \tab if(ret != AUPSF_NOERROR)
\par \tab \tab \tab AUpsfLogComment("Error importing BITMAP.");
\par \tab \tab else
\par \tab \tab \tab \{
\par \tab \tab \tab bits = (LPSTR)(bitmap + 1);
\par 
\par \tab \tab \tab /* Store bitmap as needed.... */
\par \tab \tab \tab \tab o
\par \tab \tab \tab \tab o
\par \tab \tab \tab \tab o
\par \tab \tab \tab \}
\par 
\par \tab \tab AMemUnlock(mi);
\par \tab \tab AMemFree(mi);
\par \tab \tab \}
\par \tab else
\par \tab \tab AUpsfLogComment("Error importing BITMAP.");
\par \tab \}
\par 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\fs16\up6 {\*\bkmkstart idx_chapter_7}{\*\bkmkend idx_chapter_7}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_chapter_7}} {\fs16\up6 ${\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 $} Chapter 7}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} chap:0007}} {\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Chapter 7}} {\fs16\up6 !
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_contents')')}} Chapter 7
\par \pard\plain \s29\ri432 \f11\fs60\lang1033 The ALM Builder Utility
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 
\par }\pard \s21\li720\ri432 {\uldb\cf11 ALM Builder Utility Overview}{\v idx_alm_builder_utili}{\v ty_overview}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {
\cf6 gotobutton idx_alm_builder_util}}{\fldrslt }}
\par {\uldb\cf11 The Configuration File}{\v idx_the_configuration_file}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_the_configuratio}
}{\fldrslt }}
\par {\uldb\cf11 Operations}{\v idx_operations}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_operations}}{\fldrslt }}
\par \pard \s21\li720\ri432 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_alm_builder_util}{\*\bkmkend idx_alm_builder_util}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_alm_builder_utility_overview}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ALM Builder Utility Overview}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +}
 Ch783:0005}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ALM Builder Utility Overview}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_chapter_7')')}} ALM Builder Utility Overview{\pard\plain \s2\sb240\sa120\keepn \b\v\f3\fs36\cf2\lang1033 {\tc {\v The ALM Builder Utility}}}
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 From the perspective of an AppWare developer who is creating applications, an ALM is a collection of related obje
cts and functions. From the perspective of an ALM developer, however, an ALM can be viewed as a configuration file and one or more DLL files that are referenced by the configuration file.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
The ALM Builder Utility is used by ALM developers to create and edit the ALM configuration files; in turn, the configuration files make ALM objects and functions available to the AppWare developer. If a configuration file is to be recognized by AppWare, t
he directory where it is located has to be identified in the appbldr.ini file. Since the directory is usually the config directory, it is identified by that name in this chapter. (The full default address is c:\\appware\\config.)
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_the_configuratio}{\*\bkmkend idx_the_configuratio}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_the_configuration_file}
} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} The Configuration File}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} Ch783:0010}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} The Configuration File}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_chapter_7')')}} The Configuration File{\pard\plain \s2\sb240\sa120\keepn \b\v\f3\fs36\cf2\lang1033 {\tc {\v The Configuration File}}}
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The configuration file holds the information that the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
needs in order to access an ALM's compiled code, which is stored in DLLs. It also groups related object types, functions, and events. 
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 Upon startup, AppWare reads the configuration files it finds in the config directory and places their objects and functions into the Object & Function Palette. 
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
After you finish creating or editing a configuration file and have placed it in the config directory, you can update the Palette window with the new information in the configuration file by restarting AppWare. 
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 
\par }\pard \s21\li720\ri432 {\uldb\cf11 Opening the Configuration Dialog}{\v idx_opening_the_configuration_dialog}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {
\cf6 gotob}{\cf6 utton idx_opening_the_conf}}{\fldrslt }}
\par {\uldb\cf11 Using the Configuration Dialog}{\v idx_using_the_configuration_dialog}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_using_the_config}}{\fldrslt }}
\par \pard \s21\li720\ri432 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_opening_the_conf}{\*\bkmkend idx_opening_the_conf}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_opening_the_configuration_dialog}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Opening the Configuration Dialog}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {
\fs16\up6 +} ch784:0005}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Opening the Configuration Dialog}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_the_configuration_file')')}} Opening the Configuration Dialog
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 To use the ALM Builder utility, you must first open a configuration file's dialog:
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 1.\tab 
Double-click the ALM Builder utility's icon. A menu bar appears at the top of the window. The menu bar has three menus: File, Edit, and Windows. 
\par 2.\tab Open a new configuration file or an existing configuration file by pulling down the File menu and selecting either New or Edit. The configuration dialog appears. 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
By using the configuration dialog and the dialogs that are associated with it, you can create, edit, and delete objects types, functions, and events from configuration files.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_using_the_config}{\*\bkmkend idx_using_the_config}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_using_the_configuration_dialog}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Using the Configuration Dialog}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {
\fs16\up6 +} ch784:0010}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Using the Configuration Dialog}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_the_configuration_file')')}} Using the Configuration Dialog
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The configuration dialog is shown in the following figure. 
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 {\cf5 \{bml create.bmp\}}{\cf1 
\par }You should know the following: 
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }The label for the Objects radio button is an abbreviatio
n of the phrase Object Types; when you select it, the ALM Builder utility lists all of the object types that are in the configuration file. 
\par \pard \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 {\cf5 \{bmc rr.bmp\}\tab }
All of the functions that are defined in a configuration file are grouped under a single function category in AppWare's Object & Function Palette. Use the Function Category field in this dialog to specify a category's name so that your function will be gr
ouped correctly in the palette. 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The general procedure for editing or creating a configuration file is always the same:
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 1.\tab Create a new configuration file or open an existing one. To open an existing file, double-click it. 
\par \pard \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 2.\tab 
Select your view within the configuration file by clicking the Objects, Functions, or Events radio button. The dialog displays a list of the objects, functions, or events that are defined in this file. The items in the list are called configuration com
ponents.
\par \pard \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 3.\tab To edit an existing file, select an item from the list and click Edit. One of the following dialogs appears: Object Def
inition, Function Definition, or Event Definition.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_operations}{\*\bkmkend idx_operations}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_operations}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Operations}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} Ch783:0015}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Operations}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_chapter_7')')}} Operations
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
This section contains information on the operations that are available to you when you work on an object type, a function, or an event. The operations are creating, editing, and removing.
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 
\par }\pard \s21\li720\ri432 {\uldb\cf11 Creating}{\v idx_creating}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_creating}}{\fldrslt }}
\par {\uldb\cf11 Editing}{\v idx_editing}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_editing}}{\fldrslt }}
\par {\uldb\cf11 Removing}{\v idx_removing}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton Do}{\cf6 Jump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_removing}}{\fldrslt }}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_creating}{\*\bkmkend idx_creating}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_creating}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Creating}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch785:0005}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Creating}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_operations')')}} Creating
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
To create a new object type, function, or event, go to the configuration dialog's view box and click the appropriate radio button, then click Insert. After the New Object, New Function, or New Event dialog appears, enter a name and a unique, four-characte
r ID.
\par If you plan to distribute your ALM, it is very important that you call \line 1-800-277-2717 and register your IDs with Novell. Otherwise, the identification conflicts that might result between ALMs can cause unpredictable problems.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 The following illustration shows the New Object dialog. 
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 {\cf5 \{bml crebutn.bmp\}}{\cf1 
\par }\pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_editing}{\*\bkmkend idx_editing}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_editing}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Editing}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch785:0010}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Editing}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_operations')')}} Editing
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
When you create a configuration component, you have to enter some additional information before you can use the component. Editing allows you to complete the creation of a new component and change the information for existing components. You can edit obje
ct types, functions, and events. 
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 Since each kind of editing is quite different from the others, information for each one is presented in the following sections.
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Object-type Editing}{\v idx_object_type_editing}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {
\cf6 gotobutton idx_object_type_edit}}{\fldrslt }}
\par {\uldb\cf11 Function Editing}{\v idx_function_editing}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_function_editing}}{\fldrslt }}
\par {\uldb\cf11 Event Editing}{\v idx_event_editing}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_event_editing}}{\fldrslt }}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_object_type_edit}{\*\bkmkend idx_object_type_edit}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_object_type_editing}} {\caps\fs16\up6 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Object-type Editing}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch786:0005}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {
\fs16\up6 K} Object-type Editing}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_editing')')}} Object-type Editing
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The Object Definition Dialog allows you to enter the following information for your object type:
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }The unique, four-character ID. To register the ID, call \line 
1-800-277-2717. After you've entered the four-character ID, {\i do not }modify it later. If you modify it, you will not be able to open or access existing projects that contain the original object-type ID. 
\par \pard \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 {\cf5 \{bmc rr.bmp\}\tab }
The object type's name. Your choice of name for the object type can be arbitrary. To see some of the names that have been used in the past, look at the object names in AppWare's Object & Function Palette. 
\par \pard \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 {\cf5 \{bml obj}{\cf5 def.bmp\}}{\cf1 
\par }\pard \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 {\cf5 \{bmc rr.bmp\}\tab }
The name of a help file. If you want to associate a help file with your object type, enter the name of a help file in the Help File field. The help file should contain help topics that have context IDs that match your function and object IDs. Use the long
 hexadecimal value of the ID, not the string representation.
\par {\cf5 \{bmc rr.bmp\}\tab }An icon. The dialog has buttons for importing and editing the icon for your object. You can import, export, and edit both the color and the black-and-white rep
resentations by clicking either the Color button or the B/W button. The object type's icon is displayed in the Object & Function Palette window. 
\par \pard \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 {\cf5 \{bmc rr.bmp\}\tab }The object type's reference to an administration routine. Administration routines are also called {\uldb\cf11 administration functions}{\v 
idx_administration_functions}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_administration_f}}{\fldrslt }}{\cf1 .}
 To set up a reference, enter the DLL entry-point name and the DLL filename. Each object type has to have an associated administration function.
\par {\cf5 \{bmc rr.bmp\}\tab }The object type's support of runtime persistence. ({\uldb\cf11 Chapter 2}{\v idx_chapter_2}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf1 gotobutton idx_chapter_2}}{\fldrslt }}{\cf1  }contains more information about persistence.) 
\par \pard \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 {\cf5 \{bmc rr.bmp\}\tab }Optional event responses. 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 If you click the Responses button, the following dialog appears. It contains a list of all of the events that your object type will respond to. 
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 {\cf5 \{bml eventrsp.bmp\}}{\cf1 
\par }\pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 On the bottom of the list, there are controls that allow you to specif
y the DLL function that is to handle the event. Use the list and the controls to connect events to event handlers. Your object type listens for the events it is connected to and responds by invoking the specified DLL functions.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
Among the controls in the lower part of the dialog, there is a drop-down list that contains all of the events that are defined by the files in the config directory. You can add an event from this list to your object type's response list.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 To specify that a DLL routine is to be invoked by a particular event: 
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 1.\tab Select the event in the drop-down list. 
\par \pard \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 2.\tab Enter the DLL and function names you want the shell to invoke when the event occurs. 
\par \pard \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 3.\tab Click the Add button. 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 When an application is built that incorporates this object type and the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
processes the selected event, it will call the DLL routine whose name you entered. The same DLL can be used to respond to several events. Each event handler should have a different entry point within the DLL.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 To change the event handler:
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 1.\tab Select the event in the upper list.
\par 2.\tab Change the DLL name or the function name. 
\par 3.\tab Click the Update button.
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 To remove an event handler:
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 1.\tab Select the event in the upper list.
\par 2.\tab Click the Remove button.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_function_editing}{\*\bkmkend idx_function_editing}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_function_editing}} {\caps\fs16\up6 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Function Editing}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch786:0010}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {
\fs16\up6 K} Function Editing;editing:parameters}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_editing')')}} Function Editing
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
The Function Definition dialog, which is shown below, specifies a function's inputs, outputs, flows, DLL entry point, help file, and icon. Keep in mind that much of the
 function's definition tells AppWare how to present your ALM function to the user. For example, the function name you select will appear under the function's icon in AppWare's Object & Function Palette. 
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 {\cf5 \{bml fnctdef.bmp\}}{\cf1 
\par }\pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
The Function Definition dialog allows you to enter the function name and the four-character ID that uniquely specifies the function. To prevent any function conflicts, call 1-800-277-2717 and register the four-character ID with Novell before you distribut
e your ALM.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 When your ALM function is invoked, the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
calls the DLL name and entry point. The Function Definition dialog also allows you to edit inputs, outputs, and flows by pressing the appropriate button. Selecting one of these radio buttons allows  you to work with the corresponding type of function conn
ection.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Parameters\tab }The dialog for {\uldb\cf11 input parameters}{\v idx_input_parameters}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobu}{\cf1 tton idx_input_parameters}}{\fldrslt }}{\cf1  }is essentially the same as the dialog for {\uldb\cf11 
output parameters}{\v idx_output_parameters}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_output_parameter}}{\fldrslt }}{\cf1 .}
 The following illustration shows the Input Parameters dialog.
\par \pard\plain \s22\li1440\ri432\sb240\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bml inptparm.bmp\}}{\cf1 
\par }\pard \s22\li1440\ri432\sb120\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 To create a new input or output parameter, enter its name, select its object type and options, and click the Insert button. Your new parameter instantly appears in the list. 
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 The Inputs and Outputs lists display parameters as they appear above and below the function icons on AppWare's function worksheet. In the DLL code for an ALM function's input and {
\uldb\cf11 output parameters}{\v idx_output_parameters}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_output_parameter}
}{\fldrslt }}{\cf1 ,} the parameters are identified by their indexes. The index of the first parameter is one, the second is two, and so forth. 
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 To edit a parameter, select it. The current parameter-data fields will be initialized. Edit the name field, the object type, and the options. Keep the 
name short so that it will be fully visible above the function icons.
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }For {\uldb\cf11 input parameters}{\v idx_input_parameters}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_input_parameters}}{\fldrslt }}{\cf1 ,}
 the "No temporary objects" checkbox should be selected if the parameter cannot be a temporary object. For some input parameters, such as those for Window objects, you never want temporary objects to be passed in to the function. An example of this is the
 Open Window function, which always wants a permane
nt Window object to be passed in to the function. If this checkbox is deselected, AppWare will allow the user to pass in constants or objects of a different type as long as both types support text-interchange protocol. The {\uldb\cf11 AppWare Bus}{\v 
idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
can then convert the constants or objects to temporary objects at run time by using text interchange.
\par {\cf5 \{bmc rr.bmp\}\tab }For {\uldb\cf11 output parameters}{\v idx_output_parameters}{\field{\*\fldinst {\cf1 macrobutton NextFie}{\cf1 ld }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_output_parameter}}{\fldrslt }}{\cf1 ,} the "No temporary objects" checkbox should be selected if that output of your function is a permanent object, such as the real Window object from the Front Window function. If your function {\i 
creates }an object and passes it out, this checkbox should be left deselected, since such an object is a temporary object. 
\par \pard \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 {\cf5 \{bmc rr.bmp\}\tab }The Optional checkbox allows you to specify whether AppWare will require the user to make a link for this parameter. If yo
u check this box, AppWare will compile the project even if the user did not make a parameter link for this parameter. If you do not check this box and a user does not specify a link for the parameter, AppWare will not allow the project to be compiled.

\par \pard \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 {\cf5 \{bmc rr.bmp\}\tab }
With the Type drop-down menu, you can tell AppWare which type of object can be connected to this parameter. If you select Untyped, AppWare will allow a user to connect any object, regardless of its type, to this parameter. 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 When you have finished your edit of a parameter, click the Update button. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Flows}\tab The following illustration shows the Flows dialog. It lists the function's user-visible signals. {\uldb\cf11 
Function flows}{\v idx_function_flows}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_function_flows}}{\fldrslt }}{\cf1  }
offer directional control of the program flow to the user so that a user can implement conditional functionality and error handling. The flow index is the index into this list, and the first flow's index is one. 
\par \pard\plain \s22\li1440\ri432\sb240\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 In the flow Name field, enter a very brief flow title\emdash two words at most. This title will appear along signal-flow links on the function worksheet. 

\par \pard \s22\li1440\ri432\sb240\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 {\cf5 \{bml flow.bmp\}}{\cf1 
\par }\pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_event_editing}{\*\bkmkend idx_event_editing}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_event_editing}} {\caps\fs16\up6 ${\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Event Editing}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch786:0015}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K}
 Event Editing;editing:events}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_editing')')}} Event Editing
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
To edit new events, you will need to set their IDs, their names, and the associated object type. When you double-click an event, a dialog appears that allows you to edit the event's characteristics. 
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 1.\tab 
Enter the four-character ID that uniquely identifies your event. This is the value deposited in the "what" field of the event record. Make sure 
you call 1-800-277-2717 and register the ID with Novell. If you do not, DLLs could be called at unexpected times during the execution of your programs. 
\par \pard \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 2.\tab Enter an arbitrary name for your event. 
\par \pard \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 3.\tab Use the Associated Object drop-down list to set the associated object type. 
\par \pard \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 {\cf5 \{bml evntdscr.bmp\}}{\cf1 
\par }\pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_removing}{\*\bkmkend idx_removing}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_removing}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Removing}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch785:0015}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Removing}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_operations')')}} Removing
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
You can use the configuration dialog to remove object types, functions, or events. To remove an object type, a function, or an event from the configuration dialog: 
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 1.\tab Select it.
\par 2.\tab Click the Delete button. 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
When the ALM Builder utility removes an object type, it deletes only the object type itself. It does not delete the associated events and functions, nor does it delete the DLLs that are connected to the object type or the function.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 When the {\uldb\cf11 ALM Builder utility}{\v idx_the_alm_builder_utility}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_alm_builder}}{\fldrslt }}{\cf1  }removes an event, it removes the structure of the event. Object types that referenced the event will continue to reference 
the event. To remove the event-handler connection, you have to enter the object-type setup dialog.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 
\par \pard\plain \s41\li720\ri14\sb240\sa120\keepn \b\f3\fs28\cf2\lang1033 \page {\fs16\up6 {\*\bkmkstart idx_chapter_8}{\*\bkmkend idx_chapter_8}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_chapter_8}}{\fs16\up6  }{\plain 
\f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} chap:0008}} {\fs16\up6 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Chapter 8}} {\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K}
 Chapter 8}} {\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_contents')')}} Chapter 8
\par \pard\plain \s29\ri432 \f11\fs60\lang1033 AppWare Bus APIs
\par for Microsoft Windows
\par \pard\plain \s2\sb120\sa120 \b\f3\fs36\cf2\lang1033 Introduction to Bus APIs
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The AppWare Bus APIs consist of functions, data types, structures, and constants that allow you to construct {\uldb\cf11 ALM functions}{\v idx_alm_functions}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_alm_functions}}{\fldrslt }}{\cf1  }
and objects. This chapter contains reference information for all elements of the AppWare Bus APIs. 
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 Th
e elements of the AppWare Bus APIs are defined in the C-language include file a_alm.h. The include file is supplied as part of the ALM Builder product. You have to include a_alm.h in all of the source code files that use the AppWare Bus APIs.
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Types and Structure Definitions}{\v idx_types_and_structure_definitions}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf6 gotobutton idx_types_and_struct}}{\fldrslt }}
\par {\uldb\cf11 Administration Functions}{\v idx_administration_functions}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_adm}{\cf6 
inistration_f}}{\fldrslt }}
\par {\uldb\cf11 AppWare Bus Events}{\v idx_appware_bus_events}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_appware_bus_even}}{\fldrslt }}

\par {\uldb\cf11 AppWare Bus APIs}{\v idx_appware_bus_apis}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_appware_bus_apis}}{\fldrslt }}
\par \pard \s21\li720\ri432 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_types_and_struct}{\*\bkmkend idx_types_and_struct}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_t
ypes_and_structure_definitions}}{\plain \f3\fs16\cf2\up6\lang1033  }{\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} eight:0010}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 
{\fs16\up6 $} Types and Structure Definitions}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Types and Structure Definitions}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_chapter_8')')}} Types and Structure Definitions
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\f7\fs22 
\par }\pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 This section describes the data types, function types, and data structure definitions used in the {\uldb\cf11 AppWare Bus APIs}{\v idx_appware_bus_apis}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_appware_}{\cf1 bus_apis}}{\fldrslt }}{\cf1 .} 
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 AppWare Bus Data Types}{\v idx_appware_bus_data_types}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 gotobutton idx_appware_bus_data}}{\fldrslt }}
\par {\uldb\cf11 AppWare Bus Function Types}{\v idx_appware_bus_function_types}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_appware_bus_func}
}{\fldrslt }}
\par {\uldb\cf11 AppWare Bus Data Structure Definitions}{\v idx_n1_appware_bus_data_structure_definitions}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_n1_appware_bus_d}}{\fldrslt }}
\par \pard \s21\li720\ri432 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_appware_bus_data}{\*\bkmkend idx_appware_bus_data}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_appware_bus_data_types}}{\plain \caps\f3\fs16\cf2\up6\lang1033  }{\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} APITYPES:0005}} {\plain \caps\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 $} AppWare Bus Data Types}} {\plain \caps\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AppWare Bus Data Types}} {\plain \caps\f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_types_and_structure_definitions')')}} AppWare Bus Data Types
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 The following data types are AppWare Bus API keywords that define the size and meaning of the parameters and return values that are associated with {\uldb\cf11 AppWare Bus functions}{
\v idx_n2_appware_bus_functions}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_n2_appware_bus_f}}{\fldrslt }}{\cf1 .}
 The names of integer data types are in uppercase letters. The pointers to integer data types begin with an LP prefix. Data types that are pointers to structures are in mixed case and begin with the prefix p.
\par In addition to the data types described here, the {\uldb\cf11 AppWare Bus APIs}{\v idx_appware_bus_apis}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {
\cf1 gotobutton idx_appware_bus_apis}}{\fldrslt }}{\cf1  }also use data types that are defined by the Microsoft Windows SDK.
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 The following table describes the data types.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Data Type\tab Description
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 EVENTID\tab A signed, 32-bit integer that uniquely identifies an event.
\par \pard \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 LPOBJECTID\tab A long pointer to an OBJECTID.
\par LPTYPEID\tab A long pointer to a TYPEID.
\par \pard \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 MEMBLOCKID\tab A signed, 32-bit integer that identifies a memory block.
\par OBJECTID\tab A signed, 32-bit integer that identifies a unique object instance.
\par PROTOCOLID\tab A signed, 32-bit integer that identifies a protocol.
\par TYPEID\tab A signed, 32-bit integer that identifies a unique object type.
\par \pard \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 pAEvtInfo\tab A long pointer to an {\uldb\cf11 AEvtInfo}{\v idx_aevtinfo}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}
}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevtinfo}}{\fldrslt }}{\cf1  }structure.
\par \pard \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 pAObjMessage
\par \pard \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \tab A long pointer to an {\uldb\cf11 AObjMessage}{\v idx_aobjmessage}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}
}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjmessage}}{\fldrslt }}{\cf1  }structure.
\par \pard \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 pAObjOwnerInfo
\par \pard \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \tab A long pointer to an ObjOwnerInfo structure.
\par \pard \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 pAObjSignalRecord\line A long pointer to an ObjSignalRecord structure.
\par \pard \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 pAPQueryInfo
\par \pard \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \tab A long pointer to an {\uldb\cf11 APQueryInfo}{\v idx_apqueryinfo}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}
}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_apqueryinfo}}{\fldrslt }}{\cf1  }structure.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_appware_bus_func}{\*\bkmkend idx_appware_bus_func}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_appware_bus_function_types}}{\plain \caps\f3\fs16\cf2\up6\lang1033  }{\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} APITYPES:0010}} {\plain \caps\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 $} AppWare Bus Function Types}} {\plain \caps\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AppWare Bus Function Types}} {\plain \caps\f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain 
\s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_types_and_structure_definitions')')}} AppWare Bus Function Types
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 The following table lists function-type modifiers that should be used when you declare the functions to be exported by ALM DLLs. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Function Type\tab \tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 ALMAPI\tab \tab This type modifier should be used when you declare an entry point for an ALM API. It is defined as:\line   FAR PASCAL _export
\par \pard \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 ALM CALLBACK\tab This type modifier should be used when you declare entry points for {\uldb\cf11 administration functions}{\v idx_administration_functions}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_administration_f}}{\fldrslt }}{\cf1 ,} {\uldb\cf11 ALM functions}{\v idx_alm_functions}{\field{\*\fldinst {
\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_alm_functions}}{\fldrslt }}{\cf1 ,} and event handlers. It is defined as:\line {\f9   }{\f9\fs18 
FAR PASCAL _export}\tab 
\par \pard \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 ALMCAPI\tab \tab This type modifier should only be used when you declare an entry point for an ALM API that requires the C calling convention. It is defined as:\line {\f9   }{\f9\fs18 
FAR CDECL _export
\par }\pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_n1_appware_bus_d}{\*\bkmkend idx_n1_appware_bus_d}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_n1_appware_bus_data_structure_definitions}}{\plain \caps\f3\fs16\cf2\up6\lang1033  }{\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} APITYPES:0015}} {\plain \caps\f3\fs16\cf2\up6\lang1033 ${\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AppWare Bus Data Structure Definitions}} {\plain \caps\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AppWare Bus Data Structure Definitions}} {\plain 
\caps\f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_types_and_structure_definitions')')}} AppWare Bus Data Structure Definitions
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
\par \pard \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 The following section describes the data structures that are used by the {\uldb\cf11 AppWare Bus APIs}{\v idx_appware_bus_apis}{\field{\*\fldinst {\cf1 macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_appware_bus_apis}}{\fldrslt }}{\cf1 .} The structure definition is followed by a description of each of the structure's fields. 

\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 AEvtInfo}{\v idx_aevtinfo}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_aevtinfo}}{\fldrslt }}
\par {\uldb\cf11 AObjMessage}{\v idx_aobjmessage}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjmessage}}{\fldrslt }}
\par {\uldb\cf11 AObjOwnerInfo}{\v idx_aobjownerinfo}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjownerinfo}}{\fldrslt }}
\par {\uldb\cf11 AObjSignalRecord}{\v idx_aobjsignalrecord}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjsignalrecord}}{\fldrslt }}
\par {\uldb\cf11 APQueryInfo}{\v idx_apqueryinfo}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_apqueryinfo}}{\fldrslt }}
\par \pard \s21\li720\ri432 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aevtinfo}{\*\bkmkend idx_aevtinfo}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aevtinfo}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AEvtInfo}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} STRCTDFS:0005}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AEvtInfo}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_appware_bus_data_structure_definitions')')}} AEvtInfo

\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Description}\tab The AEvtInfo (AppWare Event Information) structure is a block of information that describes {\uldb\cf11 
AppWare Bus events}{\v idx_appware_bus_events}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_appware_bus_even}}{\fldrslt }}{\cf1 .}
 It is used when events are posted to the AppWare Bus event queue. When the event is processed by the AppWare Bus, event information is passed to the event handler in the AEvtInfo structure. 
\par \pard\plain \s33\fi-1440\li1440\ri432\sb240\tqr\tx1260\tx1440\tlul\tx1728\tx1890\tqr\tlul\tx1980\tlul\tx2304\tqr\tlul\tx2592\tlul\tx2880\tqc\tlul\tx3168\tx3240\tx3456\tqr\tx3600\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 \tab {\b\f12 
Syntax\tab }typedef struct tagAEvtInfo
\par \pard\plain \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 \tab \{
\par \tab OBJECTID sourceObject;
\par \tab OBJECTID targetObject;
\par \tab EVENTID what;
\par \tab LONG details;
\par \tab LONG modifiers;
\par \tab LONG when;
\par \tab LONG how;
\par \tab LONG variation;
\par \tab \}  AEvtInfo, FAR * pAEvtInfo;
\par \pard\plain \s33\fi-1440\li1440\ri432\sb240\tqr\tx1260\tx1440\tlul\tx1728\tx1890\tqr\tlul\tx1980\tlul\tx2304\tqr\tlul\tx2592\tlul\tx2880\tqc\tlul\tx3168\tx3240\tx3456\tqr\tx3600\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The AEvtInfo structure has the following fields:\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Field\tab Description
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 sourceObject
\par \pard \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \tab The object that originated the event. This is a required field.
\par \pard \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 targetObject
\par \tab The object where the event is directed. 
\par \pard \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 what\tab The event that occurred. Refer to {\uldb\cf11 AppWare Bus Events}{\v idx_appware_bus_events}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_appware_bus_even}}{\fldrslt }}{\cf1  }for more information.
\par \pard \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 details\tab Event-specific data. Refer to individual event descriptions for more information. 
\par modifiers\tab Event-specific data. Refer to individual event descriptions for more information. 
\par when\tab Specifies when an event occurs, in sixtieths of a second. 
\par \pard \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 how\tab Specifies the Event Posting Protocol. It controls the event priority and any other posting options.
\par \pard \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 variation\tab Event-specific data. Refer to individual event descriptions for more information. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Comments}\tab None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aobjmessage}{\*\bkmkend idx_aobjmessage}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobjmessage}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AObjMessage}} {\plain \f3\fs16\cf2\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} STRCTDFS:0010}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AObjMessage}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`',
 `idx_n1_appware_bus_data_structure_definitions')')}} AObjMessage{\cf1 
\par }\pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Description}\tab The AObjMessage (AppWare Objec
t Message) structure defines the AppWare Bus message and is used to pass message-specific data to the receiving object. This structure is passed to the administration function.
\par \pard\plain \s33\fi-1440\li1440\ri432\sb240\tqr\tx1260\tx1440\tlul\tx1728\tx1890\tqr\tlul\tx1980\tlul\tx2304\tqr\tlul\tx2592\tlul\tx2880\tqc\tlul\tx3168\tx3240\tx3456\tqr\tx3600\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 {\b\f12 \tab 
Syntax}\tab typedef struct tagAObjMessage
\par \pard\plain \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 \tab \{
\par \tab LONG \tab message1;
\par \tab LONG \tab message2;
\par \tab LONG\tab message3;
\par \tab LONG \tab message4;
\par \tab char \tab errorMessage[256];
\par \tab \}  AObjMessage, FAR * pAObjMessage;
\par \pard \s26\li1440\ri432\tx288\tlul\tx576\tqr\tlul\tx864\tx1152\tx1440\tlul\tx1728\tx1890\tqr\tlul\tx1980\tlul\tx2304\tqr\tlul\tx2592\tlul\tx2880\tqc\tlul\tx3168\tx3240\tx3456\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The AObjMessage structure has the following fields:\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Field\tab Description
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 message1\tab A unique message identifier.  Refer to the Administration Function Messages for more information. 
\par message2\endash 4\tab Message-specific data. Refer to individual message descriptions for more information. \tab 
\par \pard \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 errorMessage
\par \pard \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \tab Message-specific data. Refer to individual message descriptions for more information. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Comments}\tab None.
\par \pard \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aobjownerinfo}{\*\bkmkend idx_aobjownerinfo}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobjownerinfo}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AObjOwnerInfo}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} STRCTDFS:0015}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AObjOwnerInfo}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_appware_bus_data_structure_definitions')')}} AObjOwnerInfo
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Description}\tab 
The AObjOwnerInfo (AppWare Object Ownership Information Record) structure stores the ownership information for an AppWare Bus object.
\par \pard\plain \s33\fi-1440\li1440\ri432\sb240\tqr\tx1260\tx1440\tlul\tx1728\tx1890\tqr\tlul\tx1980\tlul\tx2304\tqr\tlul\tx2592\tlul\tx2880\tqc\tlul\tx3168\tx3240\tx3456\tqr\tx3600\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 {\b\f12 \tab 
Syntax}\tab typedef struct tagAObjOwnerInfo
\par \pard\plain \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 \tab \{
\par \tab OBJECTID\tab ownerID;
\par \tab LONG\tab ownerData;
\par \tab LONG\tab key;
\par \tab LONG\tab reserved1;
\par \tab \} AObjOwnerInfo, FAR * pAObjOwnerInfo;
\par \pard \s26\li1440\ri432\tx288\tlul\tx576\tqr\tlul\tx864\tx1152\tx1440\tlul\tx1728\tx1890\tqr\tlul\tx1980\tlul\tx2304\tqr\tlul\tx2592\tlul\tx2880\tqc\tlul\tx3168\tx3240\tx3456\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The AObjOwnerInfo structure has the following fields:\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Field\tab Description
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 ownerID\tab The owner of the object.
\par \pard \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 ownerData\tab A value to be stored with the ownership registration. The owner object can set this field to any value. 
\par \pard \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 key\tab Used by {\uldb\cf11 AObjGetNextOwner}{\v idx_aobjgetnextowner}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}
}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjgetnextowner}}{\fldrslt }}{\cf1 .} 
\par \pard \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 reserved1\tab Reserved. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Comments}\tab None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aobjsignalrecord}{\*\bkmkend idx_aobjsignalrecord}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobjsignalrecord}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AObjSignalRecord}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} STRCTDFS:0020}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AObjSignalRecord}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_appware_bus_data_structure_definitions')')}} AObjSignalRecord
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Description}\tab The 
AObjSignalRecord (AppWare Signal Record) structure defines information for individual signals. An array of these records is used to pass signal information to AppWare or any other AppWare Bus tool. 
\par \pard\plain \s33\fi-1440\li1440\ri432\sb240\tqr\tx1260\tx1440\tlul\tx1728\tx1890\tqr\tlul\tx1980\tlul\tx2304\tqr\tlul\tx2592\tlul\tx2880\tqc\tlul\tx3168\tx3240\tx3456\tqr\tx3600\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 {\b\f12 \tab 
Syntax}\tab typedef struct tagAObjSignalRecord
\par \pard\plain \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 \tab \{
\par \tab LONG\tab theID;
\par \tab char\tab theName[256];
\par \tab \}\tab AObjSignalRecord, FAR * pAObjSignalRecord;
\par \pard \s26\li1440\ri432\tx288\tlul\tx576\tqr\tlul\tx864\tx1152\tx1440\tlul\tx1728\tx1890\tqr\tlul\tx1980\tlul\tx2304\tqr\tlul\tx2592\tlul\tx2880\tqc\tlul\tx3168\tx3240\tx3456\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The AObjSignalRecord structure has the following fields:\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Field\tab Description
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 theID\tab The signal ID.
\par theName\tab The buffer contains a NULL-terminated signal name. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Comments}\tab None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_apqueryinfo}{\*\bkmkend idx_apqueryinfo}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_apqueryinfo}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} APQueryInfo}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} STRCTDFS:0025}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} APQueryInfo}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_appware_bus_da
ta_structure_definitions')')}} APQueryInfo
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Description}\tab 
The APQueryInfo (AppWare Protocol Information) structure defines an item protocol size, the object or type identification, the supported protocol identifier, and an associated create function. The structure is passed to the object type's administration f
unction when the {\uldb\cf11 AObjQueryProtocol}{\v idx_aobjqueryprotocol}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_aobjqueryprotoco}}{\fldrslt }}{\cf1  }function or the {\uldb\cf11 ATypeQueryProtocol}{\v idx_atypequeryprotocol}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macro}{\cf6 button DoJump <+>}
}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_atypequeryprotoc}}{\fldrslt }}{\cf1  }function is called.  
\par \pard\plain \s33\fi-1440\li1440\ri432\sb240\tqr\tx1260\tx1440\tlul\tx1728\tx1890\tqr\tlul\tx1980\tlul\tx2304\tqr\tlul\tx2592\tlul\tx2880\tqc\tlul\tx3168\tx3240\tx3456\tqr\tx3600\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 {\b\f12 \tab 
Syntax}\tab typedef struct tagApQueryInfo       ApQueryInfo;
\par \pard\plain \s26\li1440\ri432\tx288\tlul\tx576\tqr\tlul\tx864\tx1152\tx1440\tlul\tx1728\tx1890\tqr\tlul\tx1980\tlul\tx2304\tqr\tlul\tx2592\tlul\tx2880\tqc\tlul\tx3168\tx3240\tx3456\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 
typedef void* (API* APPCFN)(ApQueryInfo*);
\par \pard \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 
\par typedef struct tagApQueryInfo
\par \tab \{
\par \tab LONG\tab size;
\par \tab OBJECTID\tab object;
\par \tab TYPEID\tab type;
\par \tab PROTOCOLID\tab protocol;
\par \tab APPCFN\tab pfnCreate;
\par \tab \}\tab ApQueryInfo,\tab FAR * pApQueryInfo;
\par 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The APQueryInfo structure has the following fields:\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Field\tab Description
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 size\tab Contains the size of the ApQueryInfo structure.
\par object\tab This field is used if a specific object is being queried. It is the object's ID. If the object field equals zero, the object's type is being queried for general protocol support and the type field is used instead. 
\par type\tab This field is used if the object field indicates that a specific type is being queried. It is the object type's TYPEID. 
\par protocol\tab The supported protocol. 
\par pfnCreate\tab The function that can be used to create a protocol instance.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Comments}\tab None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_administration_f}{\*\bkmkend idx_administration_f}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_administration_functions}}{\plain \f3\fs16\cf2\up6\lang1033  }{\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} eight:0015}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {
\fs16\up6 $} Administration Functions}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Administration Functions}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {
\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_chapter_8')')}} Administration Functions
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\f7\fs22 
\par }\pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 As an ALM developer, you have the responsibility of providing administration functions for all of your ALM object types. 
\par This section contains detailed technical information about the ALM administration function. It includes descriptions of the administration function's prototype and messages.
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Administration Function Prototype}{\v idx_n1_administration_function_prototype}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}
}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_n1_administratio}}{\fldrslt }}
\par {\uldb\cf11 Administration Messages}{\v idx_administration_messages}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_administration_m}
}{\fldrslt }}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_n1_administratio}{\*\bkmkend idx_n1_administratio}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_n1_administration_function_prototype}}{\plain \caps\f3\fs16\cf2\up6\lang1033  }{\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ADMFNCTS:0005}} {\plain \caps\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain 
\s245 \f3\fs20\lang1033 {\fs16\up6 $} Administration Function Prototype}} {\plain \caps\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Administration Function Prototype}} {\plain \caps\f3\fs16\cf2\up6\lang1033 !
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_administration_functions')')}} Administration Function Prototype
\par \pard\plain \s33\fi-1440\li1440\ri432\sb240\tqr\tx1260\tx1440\tlul\tx1728\tx1890\tqr\tlul\tx1980\tlul\tx2304\tqr\tlul\tx2592\tlul\tx2880\tqc\tlul\tx3168\tx3240\tx3456\tqr\tx3600\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 \tab {\b\f12 
Syntax}\tab LONG ALMCALLBACK\tab <Admin>\tab \tab (
\par \pard\plain \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 \tab \tab \tab \tab \tab OBJECTID\tab \tab oiObject, 
\par \tab \tab \tab \tab \tab pAObjMessage\tab pMessageRecord
\par \pard \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx3600\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \tab \tab \tab \tab )
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Description}
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Description
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiObject\tab The ID of the object that is to be operated on by the administration function. 
\par pMessageRecord
\par \tab The address of the pAObjMessage record. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 Return Value\tab \tab }
Refer to the individual message descriptions for a list of the values that can be returned by the administration function. 
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_administration_m}{\*\bkmkend idx_administration_m}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_administration_messages}}{\plain \caps\f3\fs16\cf2\up6\lang1033  }{\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ADMFNCTS:0010}} {\plain \caps\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 $} Administration Messages}} {\plain \caps\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Administration Messages}} {\plain \caps\f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_administration_functions')')}} Administration Messages
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 During an object's life cycle, there are times when the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
sends object administration messages to the object's administration function. The administration function processes the message and, based on the results, returns a value. Individual administration messages are associated with specific return values.  

\par This section contains descriptions of the administration function messages. Each description includes information about the administration function's two parameters: the ObjectID parameter and the fields of the {\uldb\cf11 AObjMessage}{\v idx_aobjmessage}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjmessage}}{\fldrslt }}{\cf1  }
parameter. The descriptions also include a list of appropriate return values.
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 AOBJ_ASLEEP}{\v idx_aobj_asleep}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_aobj_asleep}}{\fldrslt }}
\par {\uldb\cf11 AOBJ_ASSIGNOBJECT}{\v idx_aobj_assignobject}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobu}{\cf6 tton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobj_assignobjec}
}{\fldrslt }}
\par {\uldb\cf11 AOBJ_AWAKENED}{\v idx_aobj_awakened}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobj_awakened}}{\fldrslt }}
\par {\uldb\cf11 AOBJ_BUILDSIGNALS}{\v idx_aobj_buildsignals}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobj_buildsignal}}{\fldrslt }}

\par {\uldb\cf11 AOBJ_CHECKOBJECT}{\v idx_aobj_checkobject}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobj_checkobject}}{\fldrslt }}
\par {\uldb\cf11 AOBJ_CREATED}{\v idx_aobj_created}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobj_created}}{\fldrslt }}
\par {\uldb\cf11 AOBJ}{\uldb\cf11 _DESTROYED}{\v idx_aobj_destroyed}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobj_destroyed}}{\fldrslt }}

\par {\uldb\cf11 AOBJ_EDITOBJECT}{\v idx_aobj_editobject}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobj_editobject}}{\fldrslt }}
\par {\uldb\cf11 AOBJ_EXPORTOBJECT}{\v idx_aobj_exportobject}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobj_exportobjec}}{\fldrslt }}

\par {\uldb\cf11 AOBJ_IMPORTOBJECT}{\v idx_aobj_importobject}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobj_importobjec}}{\fldrslt }}

\par {\uldb\cf11 AOBJ_POSTWRITE}{\v idx_aobj_postwrite}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobj_postwrite}}{\fldrslt }}
\par {\uldb\cf11 AOBJ_PREWRITE}{\v idx_aobj_prewrite}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobj_prewrite}}{\fldrslt }}
\par {\uldb\cf11 AOBJ_QUERYPROTOCOL}{\v idx_aobj_queryprotocol}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobj_queryprotoc}}{\fldrslt }}

\par {\uldb\cf11 AOBJ_READ}{\v idx_aobj_read}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobj_read}}{\fldrslt }}
\par {\uldb\cf11 AOBJ_REPORTREQUIREDFILES}{\v idx_aobj_reportrequiredfiles}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton i}{\cf1 
dx_aobj_reportrequi}}{\fldrslt }}{\cf1 
\par }{\uldb\cf11 AOBJ_VALIDATEOBJECTIDS}{\v idx_aobj_validateobjectids}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobj_validateobj}
}{\fldrslt }}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aobj_asleep}{\*\bkmkend idx_aobj_asleep}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobj_asleep}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AOBJ_ASLEEP}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} OBJMSGS:0005}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AOBJ_ASLEEP}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_administration_messages')')}} AOBJ_ASLEEP
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Description}\tab When a project is closed or an application stops execution, the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
sends this message to the object type's administration function. The administration function should perform any required cleanup and notify the App
Ware Bus that the cleanup is done. The AppWare Bus can then make the object inactive by releasing it from memory. When the administration function is done processing AOBJ_ASLEEP, it should return A_CONTINUE so that the AppWare Bus will continue to send th
e AOBJ_ASLEEP message to all objects of this type until they do not require any more processing. If an object type does not need to process the AOBJ_ASLEEP message, it should return A_OK or A_NOTHANDLED.
\par \tab {\b\f12\fs18 ObjectID}\tab The ID of the awakened object.
\par \pard \s32\fi-1350\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \tab {\b\f12\fs18 AObjMessa}{\b\f12\fs18 ge}
\par \pard \s32\fi-1267\li1440\ri432\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \tab {\b\f12\fs18 Fields}
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Field\tab Value
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 message1\tab AOBJ_ASLEEP
\par message2\tab Not used.
\par message3\tab Not used.
\par message4\tab Not used.
\par errorMessage
\par \tab Not used.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab If the administration function calls the {\uldb\cf11 AObjReportError}{\v idx_aobjreporterror}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjreporterror}}{\fldrslt }}{\cf1  }
function, it should return the result from the AObjReportError function.  Otherwise, the administration function should return one of the following responses to the AOBJ_ASLEEP message. 
\par 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab Meaning
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 A_OK \tab The administration function handled the message, and no more messages need to be sent for this type's instances.
\par A_CONTINUE\tab The AppWare Bus should continue sending AOBJ_ASLEEP messages for the remaining objects of this type in the application.
\par A_NOTHANDLED\line The administration function did not handle the message.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aobj_assignobjec}{\*\bkmkend idx_aobj_assignobjec}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobj_assignobject}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AOBJ_ASSIGNOBJECT}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} OBJMSGS:0010}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AOBJ_ASSIGNOBJECT}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_administration_messages')')}} AOBJ_ASSIGNOBJECT
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Description}\tab The {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }sends this message to the object type's administration function when it receives a call to the 
{\uldb\cf11 AObjAssign}{\v idx_aobjassign}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjassign}}{\fldrslt }}{\cf1  }
function or when the AppWare Bus needs to assign one object to another object. The administration function should copy data from the source object to the destination object and should determine exactly which information is copied. The source object type a
nd the destination object type are always the same.
\par \tab {\b\f12\fs18 ObjectID}\tab The ID of the destination object.
\par \pard \s32\fi-1350\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \tab {\b\f12\fs18 AObjMessage}
\par \pard \s32\fi-1267\li1440\ri432\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \tab {\b\f12\fs18 Fields}
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Field\tab Value\tab Meaning
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 message1\tab AOBJ_ASSIGNOBJECT
\par message2\tab Not used.     \tab 
\par message3\tab OBJECTID\tab The ID of the source object.
\par message4\tab Not used.
\par errorMessage
\par \tab Not used.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab If the administration function calls the {\uldb\cf11 AObjReportError}{\v idx_aobjreporterror}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjreporterror}}{\fldrslt }}{\cf1  }
function, it should return the result from the AObjReportError function. Otherwise, the administration function should return one of the following responses to the AOBJ_ASSIGNOBJECT message. 
\par 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab Meaning
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 A_OK \tab The administration function assigned the object successfully.
\par A_ERROR\tab An error prevented the administration function from assigning the object correctly.
\par A_WARNING\tab An unexpected condition occurred while the administration function was processing the message, but the object can continue operating.
\par A_NOTHANDLED\line The administration function did not handle the message. This message should be returned if an assignment is not supported by the object type.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aobj_awakened}{\*\bkmkend idx_aobj_awakened}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobj_awakened}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AOBJ_AWAKENED}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} OBJMSGS:0015}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AOBJ_AWAKENED}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_administration_messages')')}}
 AOBJ_AWAKENED
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Description}\tab When the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
reads an existing object and its data from a project file, an executable, or a persistent-object file, it sends this message to the object type's administration function. The administration function should perform any required object initialization. When 
the administration function is done processing AOBJ_AWAKENED, it should return A_CONTI
NUE so that the AppWare Bus will continue sending AOBJ_AWAKENED to objects of this type until the administration function has initialized all of them. If the object type does not need to process AOBJ_AWAKENED, it should return A_OK or A_NOTHANDLED.
\par \tab {\b\f12\fs18 ObjectID}\tab The ID of the awakened object.
\par \pard \s32\fi-1350\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \tab {\b\f12\fs18 AObjMessage}
\par \pard \s32\fi-1267\li1440\ri432\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \tab {\b\f12\fs18 Fields}
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Field\tab Value\tab \tab Meaning
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 message1\tab AOBJ_AWAKENED
\par message2\tab Not used.
\par message3\tab Not used.
\par message4\tab Not used.
\par errorMessage
\par \tab Not used.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab If the administration function calls the {\uldb\cf11 AObjReport}{\uldb\cf11 Error}{\v idx_aobjreporterror}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjreporterror}}{\fldrslt }}{\cf1  }
function, it should return the result from the AObjReportError function. Otherwise, the administration function should return one of the following responses to the AOBJ_AWAKENED message. 
\par 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab Meaning
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 A_OK \tab The administration function handled the message, and no more messages need to be sent for this type's instances.
\par A_CONTINUE\tab The AppWare Bus should continue sending AOBJ_AWAKENED messages for the remaining objects of this type in the application.
\par A_NOTHANDLED\line The administration function did not handle the message.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aobj_buildsignal}{\*\bkmkend idx_aobj_buildsignal}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobj_buildsignals}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AOBJ_BUILDSIGNALS}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} OBJMSGS:0020}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AOBJ_BUILDSIGNALS}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_administration_messages')')}} AOBJ_BUILDSIGNALS
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Description}\tab The {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
sends this message to an object type's administration function whenever AppWare or another AppWare Bus tool requires a list of the valid signals for the specified object. The list of signals is returned as an array of {\uldb\cf11 AObjSignalRec}{
\uldb\cf11 ord}{\v idx_aobjsignalrecord}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjsignalrecord}}{\fldrslt }}{\cf1  }
structures contained in a memory block. The AppWare Bus sizes the memory block to zero when it calls the administration function, and the administration function should size the memory block so that it will be large enough to hold the required number of A
ObjSignalRecords. After the memory block has been sized, the signal records have to be initialized with their signal IDs and signal names.
\par \tab {\b\f12\fs18 ObjectID}\tab The ID of the object whose signal list is needed.
\par \pard \s32\fi-1350\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \tab {\b\f12\fs18 AObjMessage}
\par \pard \s32\fi-1267\li1440\ri432\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \tab {\b\f12\fs18 Fields}
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Field\tab Value
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 message1\tab AOBJ_BUILDSIGNALS
\par message2\tab The MEMBLOCKID of  the memory block that contains the array of {\uldb\cf11 AObjSignalRecord}{\v idx_aobjsignalrecord}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}
}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjsignalrecord}}{\fldrslt }}{\cf1  }structures.
\par message3\tab Not used.
\par message4\tab Not used.
\par errorMessage
\par \tab Not used.\line 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab If the administration function calls the {\uldb\cf11 AObjReportError}{\v idx_aobjreporterror}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJ}{\cf6 ump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjreporterror}}{\fldrslt }}{\cf1  }
function, it should return the result from the AObjReportError function. Otherwise, the administration function should return one of the following responses to the AOBJ_BUILDSIGNALS message. 
\par 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab Meaning
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 A_OK\tab The message was handled without error.
\par A_ERROR\tab An error occurred while the administration function was processing the message.
\par A_NOTHANDLED\line The administration function did not handle the message.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aobj_checkobject}{\*\bkmkend idx_aobj_checkobject}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobj_checkobject}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AOBJ_CHECKOBJECT}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} OBJMSGS:0025}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AOBJ_CHECKOBJECT}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_administration_messages')')}} AOBJ_CHECKOBJECT
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Description}\tab The {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
sends this message to the object type's administration function at compilation time and at the request of an AppBuilder user. The administration function should verify that the object data is correct. If possible, it should correct data errors or inconsis
tencies; in particular, it should use the {\uldb\cf11 AObjCheckType}{\v idx_aobjchecktype}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_aobjchecktype}}{\fldrslt }}{\cf1  }function to validate stored object IDs, if any. It should also remove invalid object IDs and any associated information from the object's data structure. Use the {\uldb\cf11 AObjReportError}{\v 
idx_aobjreporterror}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjreporterror}}{\fldrslt }}{\cf1  }
function to display a warning or error message to the user.
\par \tab {\b\f12\fs18 ObjectID}\tab The ID of the object to be checked.
\par \pard \s32\fi-1350\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \tab {\b\f12\fs18 AObjMessage}
\par \pard \s32\fi-1267\li1440\ri432\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \tab {\b\f12\fs18 Fields}
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Field\tab Value
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 message1\tab AOBJ_CHECKOBJECT
\par message2\tab Not used.
\par message3\tab Not used.
\par message4\tab Not used.
\par errorMessage
\par \tab Not used.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab If the administration function calls the {\uldb\cf11 AObjReportError}{\v idx_aobjreporterror}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjreporterror}}{\fldrslt }}{\cf1  }
function, it should return the result from the AObjReportError function. Otherwise, the administration function should return one of the following responses to the AOBJ_CHECKOBJECT message. 
\par 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab Meaning
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 A_OK \tab There were no uncorrected problems.
\par A_ERROR\tab An error in the object's data will prevent the application from executing.
\par A_WARNING\tab The administration function found a potential problem in the object's data, but it is still possible to execute the application.
\par A_NOTHANDLED\line The administration function did not handle the message.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aobj_created}{\*\bkmkend idx_aobj_created}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobj_created}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AOBJ_CREATED}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} OBJMSGS:0030}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AOBJ_CREATED}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_administration_messages')')}} AOBJ_CREATED

\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Description}\tab 
The AppWare Bus sends this message to the object type's administration function when it creates a new object. It initializes the object with a count of zero data blocks. The administration function has to allocate and initialize the data blocks required 
by the object.
\par \tab {\b\f12\fs18 ObjectID}\tab The ID of the newly created object.
\par \pard \s32\fi-1350\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \tab {\b\f12\fs18 AObjMessage}
\par \pard \s32\fi-1267\li1440\ri432\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \tab {\b\f12\fs18 Fields}
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Field\tab Value\tab Meaning\tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 message1\tab AOBJ_CREATED
\par message2\tab <protocol ID>
\par \tab \tab The field specifies either the protocol ID or zero. If it specifies the protocol ID, the created object has to support the indicated protocol.
\par message3\tab Not used.
\par message4\tab <temporary flag>
\par \tab \tab The value is AOBJ_TEMPORARY for temporary objects and is zero for objects that are not temporary. 
\par errorMessage\tab Not used.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab If the administration function calls the {\uldb\cf11 AObjReportError}{\v idx_aobjreporterror}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjreporterror}}{\fldrslt }}{\cf1  }
function, it should return the result from the AObjReportError function. Otherwise, the administration function should return one of the following responses to the AOBJ_CREATED message. 
\par 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab Meaning
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 A_OK \tab The administration function handled the message, and no more messages need to be sent for this type's instances.
\par A_ERROR\tab An error prevented the administration function from initializing the object correctly.
\par A_WARNING\tab An unexpected condition occurred while the administration function was processing the message, but the object can continue operating.
\par A_NOTHANDLED\line The administration function did not handle the message.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aobj_destroyed}{\*\bkmkend idx_aobj_destroyed}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobj_destroyed}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AOBJ_DESTROYED}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} OBJMSGS:0035}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AOBJ_DESTROYED}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_administration_messages')')}}
 AOBJ_DESTROYED
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Description}\tab The {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
sends this message to the object type's administration function when it deletes an object from a proj
ect and when it destroys a temporary object during application execution. The administration function should perform any required cleanup before the AppWare Bus destroys the object.  The AppWare Bus{\cf1  }
frees the object's data-block memory, so the administration function does not have to delete the data blocks.
\par \tab {\b\f12\fs18 ObjectID}\tab The ID of the destroyed object.
\par \pard \s32\fi-1350\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \tab {\b\f12\fs18 AObjMessage}
\par \pard \s32\fi-1267\li1440\ri432\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \tab {\b\f12\fs18 Fields}
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Field\tab Value
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 message1\tab AOBJ_DESTROYED
\par message2\tab Not used.
\par message3\tab Not used.
\par message4\tab Not used.
\par errorMessage
\par \tab Not used.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Valu}{\b\f12\fs18 e}\tab If the administration function calls the {\uldb\cf11 AObjReportError}{\v idx_aobjreporterror}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjreporterror}}{\fldrslt }}{\cf1  }
function, it should return the result from the AObjReportError function. Otherwise, the administration function should return one of the following responses to the AOBJ_DESTROYED message. 
\par 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab Meaning
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 A_OK \tab The administration function destroyed the object successfully.
\par A_NOTHANDLED\line The administration function did not handle the message.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aobj_editobject}{\*\bkmkend idx_aobj_editobject}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobj_editobject}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AOBJ_EDITOBJECT}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} OBJMSGS:0040}} {\plain \f3\fs16\cf2\up6\lang1033 
K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AOBJ_EDITOBJECT}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_administration_messages')')}}
 AOBJ_EDITOBJECT
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Description}\tab The {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
sends this message to the object type's administration function when an object's data has to be edited. The administration function should display one or more editing dialogs so that an AppBuilder user can edit the object's data. If there is an error in t
he data, the administration function should fix the error before it returns.
\par \tab {\b\f12\fs18 ObjectID}\tab The ID of the object to be edited.
\par \pard \s32\fi-1350\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \tab {\b\f12\fs18 AObjMessage}
\par \pard \s32\fi-1267\li1440\ri432\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \tab {\b\f12\fs18 Fields}
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Field\tab Use/Value
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 message1\tab AOBJ_EDITOBJECT
\par message2\tab Not used.
\par message3\tab Not used.
\par message4\tab Not used.
\par errorMessage
\par \tab Not used.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab If the administration function calls the {\uldb\cf11 AObjReportError}{\v idx_aobjreporterror}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjreporterror}}{\fldrslt }}{\cf1  }
function, it should return the result from the AObjReportError function. Otherwise, the administration function should return one of the following responses to the AOBJ_EDITOBJECT message. 
\par 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab Meaning
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 A_OK \tab The administration function handled the message, and no more messages need to be sent for this type's instances. 
\par A_MODIFIED\tab The user modified the object's data.
\par A_NOTHANDLED\line The administration function did not handle the message.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aobj_exportobjec}{\*\bkmkend idx_aobj_exportobjec}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobj_exportobject}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AOBJ_EXPORTOBJECT}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} OBJMSGS:0045}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AOBJ_EXPORTOBJECT}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_administration_messages')')}} AOBJ_EXPORTOBJECT
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Description}\tab The {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }sends this message to the object type's administration function when an object's
 data is to be exported. The data has to be exported in UPSF format. Use the UPSF functions that are described later.
\par \tab {\b\f12\fs18 ObjectID}\tab The ID of the object to be exported.
\par \pard \s32\fi-1350\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \tab {\b\f12\fs18 AObjMessage}
\par \pard \s32\fi-1267\li1440\ri432\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \tab {\b\f12\fs18 Fields}
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Field\tab Use/Value
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 message1\tab AOBJ_EXPORTOBJECT 
\par message2\tab Not used.
\par message3\tab Not used.
\par message4\tab Not used.
\par errorMessage
\par \tab Not used.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab If the administration function calls the {\uldb\cf11 AObjReportError}{\v idx_aobjreporterror}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjreporterror}}{\fldrslt }}{\cf1  }function, it should 
return the result from the AObjReportError function. Otherwise, the administration function should return one of the following responses to the AOBJ_EXPORTOBJECT message.  
\par 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab Meaning
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 A_OK \tab The administration function handled the message, and no more messages need to be sent for this type's instances. 
\par A_ERROR\tab An error prevented the administration function from exporting the object correctly.
\par A_WARNING\tab An unexpected condition occurred during the processing of the message but the object can continue operating.
\par A_NOTHANDLED
\par \tab The administration function did not handle the message.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aobj_importobjec}{\*\bkmkend idx_aobj_importobjec}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobj_importobject}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AOBJ_IMPORTOBJECT}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} OBJMSGS:0050}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AOBJ_IMPORTOBJECT}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_administration_messages')')}} AOBJ_IMPORTOBJECT
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Description}\tab The {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
sends this message to the object type's administration function when an object's data is to be imported. The data has to be imported in UPSF format. Use the UPSF functions that are described later.  
\par \tab {\b\f12\fs18 ObjectID}\tab The {\caps id }of the object to be imported.
\par \pard \s32\fi-1350\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \tab {\b\f12\fs18 AObjMessage}
\par \pard \s32\fi-1267\li1440\ri432\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \tab {\b\f12\fs18 Field}{\b\f12\fs18 s}
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Field\tab Use/Value
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 message1\tab AOBJ_IMPORTOBJECT 
\par message2\tab Not used.
\par message3\tab Not used.
\par message4\tab Not used.
\par errorMessage
\par \tab Not used.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab If the administration function calls the {\uldb\cf11 AObjReportError}{\v idx_aobjreporterror}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjreporterror}}{\fldrslt }}{\cf1  }
function, it should return the result from the AObjReportError function. Otherwise, the administration function should return one of the following responses to the AOBJ_IMPORTOBJECT message.
\par 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab Meaning
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 A_OK \tab The administration function handled the message, and no more messages need to be sent for this type's instances. 
\par A_ERROR\tab An error prevented the administration function from importing the object successfully.
\par A_WARNING\tab An unexpected condition occurred while the administration function was processing the message, but the object can continue operating.
\par A_NOTHANDLED\line The administration function did not handle the message.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aobj_postwrite}{\*\bkmkend idx_aobj_postwrite}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobj_postwrite}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AOBJ_POSTWRITE}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} OBJMSGS:0055}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AOBJ_POSTWRITE}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_administration_messages')')}}
 AOBJ_POSTWRITE
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Description}\tab When the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bu}{\v s}{\field{\*\fldinst {\cf1 macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
saves a project, it writes all of the objects and then sends this message to the object type's administration function. The AOBJ_POSTWRITE message is most often used to undo the effects of {\uldb\cf11 AOBJ_PREWRITE}{\v idx_aobj_prewrite}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_prewrite}}{\fldrslt }}{\cf1 .} Decide whether the AppWare Bus{\cf1  }
should continue sending the AOBJ_POSTWRITE message to objects of this type. If the administration function does not need to process the message for each object, have it return A_OK or A_NOTHANDLED. Otherwise, it should return A_CONTINUE. 
\par \tab {\b\f12\fs18 ObjectID}\tab The ID of the object that was saved.
\par \pard \s32\fi-1350\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \tab {\b\f12\fs18 AObjMessage}
\par \pard \s32\fi-1267\li1440\ri432\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \tab {\b\f12\fs18 Fields}
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Field\tab Value
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 message1\tab AOBJ_POSTWRITE
\par message2\tab Not used.
\par message3\tab Not used.
\par message4\tab Not used.
\par errorMessage
\par \tab Not used.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab If the administration function calls the {\uldb\cf11 AObjReportError}{\v idx_aobjreporterror}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjreporterror}}{\fldrslt }}{\cf1  }functio
n, it should return the result from the AObjReportError function. Otherwise, the administration function should return one of the following responses to the AOBJ_POSTWRITE message. 
\par 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab Meaning
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 A_OK \tab The administration function handled the message, and no more messages need to be sent for this type's instances. 
\par A_CONTINUE\tab The AppWare Bus should continue sending the AOBJ_POSTWRITE messages for the remaining objects of this type in the project or executable.
\par A_NOTHANDLED\line The administration function did not handle the message.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aobj_prewrite}{\*\bkmkend idx_aobj_prewrite}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobj_prewrite}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AOBJ_PREWRITE}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} OBJMSGS:0060}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AOBJ_PREWRITE}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_administration_messages')')}}
 AOBJ_PREWRITE
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Description}\tab The {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
sends this message to the object type's administration function before it writes the object's data to a project file, an executable, or a persistent-object file. This message, which is sent to all of the objects before the AppWare Bus{\cf1  }
writes any of the objects to disk, is most often used to avoid writing specific information to 
a project file, an executable, or a persistent-object file. Decide whether the AppWare Bus should continue sending the AOBJ_PREWRITE message to objects of this type. If the administration function does not need to process the message for each object, have
 it return A_OK or A_NOTHANDLED. Otherwise, it should return A_CONTINUE. 
\par \tab {\b\f12\fs18 ObjectID}\tab The ID of the object that will be written to disk.
\par \pard \s32\fi-1350\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \tab {\b\f12\fs18 AObjMessage}
\par \pard \s32\fi-1267\li1440\ri432\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \tab {\b\f12\fs18 Fields}
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Field\tab Value
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 message1\tab AOBJ_PREWRITE
\par message2\tab Not used.
\par message3\tab Not used.
\par message4\tab Not used.
\par errorMessage
\par \tab Not used.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab If the administration function calls the {\uldb\cf11 AObjReportError}{\v idx_aobjreporterror}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjreporterror}}{\fldrslt }}{\cf1  }
function, it should return the result from the AObjReportError function. Otherwise, the administration function should return one of the following responses to the AOBJ_PREWRITE message.
\par 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab Meaning
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 A_OK \tab The administration function handled the message, and no more messages need to be send for this type's instances.
\par A_CONTINUE\tab The AppWare Bus is to continue sending AOBJ_PREWRITE messages for the remaining objects of this type in the application.
\par A_NOTHANDLED\line The administration function did not handle the message.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aobj_queryprotoc}{\*\bkmkend idx_aobj_queryprotoc}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobj_queryprotocol}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AOBJ_QUERYPROTOCOL}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} OBJMSGS:0065}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AOBJ_QUERYPROTOCOL}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_administration_messages')')}} AOBJ_QUERYPROTOCOL
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Description}\tab The {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }sends this message to the object type's administration function as a result of a call to the {
\uldb\cf11 AObjQueryProtocol}{\v idx_aobjqueryprotocol}{\field{\*\fldinst {\cf1 macrobutt}{\cf1 on NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjqueryprotoco}
}{\fldrslt }}{\cf1  }or the {\uldb\cf11 ATypeQueryProtocol}{\v idx_atypequeryprotocol}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_atypequeryprotoc}}{\fldrslt }}{\cf1  }
function. If the ALM supports the specified protocol, the administration function should return a pointer to the object type's create function. If the protocol uses the ApQueryInfo structure, the administration function should initialize the structure bef
ore it returns. 
\par \tab {\b\f12\fs18 ObjectID}\tab If the ObjectID parameter equals zero, the AppWare Bus is asking the object type for protocol support. Otherwise, the query is for the specified object.
\par \pard \s32\fi-1350\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \tab {\b\f12\fs18 AObjMessage}
\par \pard \s32\fi-1267\li1440\ri432\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \tab {\b\f12\fs18 Fields}
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Field\tab Value
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 message1\tab AOBJ_QUERYPROTOCOL
\par message2\tab Not used.
\par message3\tab Not used.
\par message4\tab A pointer to an ApQueryInfo structure.
\par errorMessage
\par \tab Not used.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab If the administration function calls the {\uldb\cf11 AObjReportError}{\v idx_aobjreporterror}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjreporterror}}{\fldrslt }}{\cf1  }function, it should return the resul
t from the AObjReportError function. Otherwise, the administration function should return one of the following responses to the AOBJ_QUERYPROTOCOL message. 
\par 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab \tab Meaning
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 AP_SUPPORTED\tab The protocol is supported by the type or object. This value can be combined through a bit-wise OR with the AP_DYNAMIC value.
\par AP_NOTSUPPORTED\tab The protocol is unsupported for the object type or the specified object. This value can be combined through a bit-wise OR with the AP_DYNAMIC value.
\par AP_DYNAMIC \tab Protocol support depends on the specified object's configuration. (In this context, the word {\i dynamic} implies protocol support.) This value can be combined through a bit-wise OR with the AP_SUPPORTED value or the AP_UNSUPPORTED value.

\par A_NOTHANDLED\tab The administration routine did not handle the message. If the administration function sends this message, the implication is that the protocol is unsupported.
\par 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aobj_read}{\*\bkmkend idx_aobj_read}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobj_read}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AOBJ_READ}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} OBJMSGS:0070}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AOBJ_READ}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_administration_messages')')}} AOBJ_READ
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Description}\tab When a project is being opened or an application begins execution, the {\uldb\cf11 AppWare Bus}{\v idx_}{\v 
the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
sends this message to the object type's administration function. The administration function checks the object's version and, if necessary, updates the object's data blocks. (If there are multiple data versions that are possible, the object is responsible
 for their management.) The {\uldb\cf11 AOBJ_AWAKENED}{\v idx_aobj_awakened}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_aobj_awakened}}{\fldrslt }}{\cf1  }message handles additional runtime initialization of the objects. Use the {\uldb\cf11 AObjReportError}{\v idx_aobjreporterror}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjreporterror}}{\fldrslt }}{\cf1  }function to report when object versions are not supported by the current ALM.
\par \tab {\b\f12\fs18 ObjectID}\tab The ID of the object being read from disk.
\par \pard \s32\fi-1350\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \tab {\b\f12\fs18 AObjMessage}
\par \pard \s32\fi-1267\li1440\ri432\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \tab {\b\f12\fs18 Fields}
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Field\tab Value
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 message1\tab AOBJ_READ
\par message2\tab Not used.
\par message3\tab Not used.
\par message4\tab Not used.
\par errorMessage
\par \tab Not used.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab If the administration function calls the {\uldb\cf11 AObjReportError}{\v id}{\v x_aobjreporterror}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjreporterror}}{\fldrslt }}{\cf1  }
function, it should return the result from the AObjReportError function. Otherwise, the administration function should return one of the following responses to the AOBJ_READ message. 
\par 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab Meaning
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 A_OK \tab The current version of the ALM supports the object's version. 
\par A_NOTHANDLED
\par \tab The administration function did not handle the message.
\par 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\up6\lang1033 {\*\bkmkstart idx_aobj_reportrequi}{\*\bkmkend idx_aobj_reportrequi}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobj_reportrequiredfiles}} 
{\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} OBJMSGS:0072}} {\plain \f3\fs16\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AOBJ_REPORTREQUIREDFILES}} {\plain 
\f3\fs16\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AOBJ_REPORTREQUIREDFILES}} {\plain \f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_administration_messages')')}} AOBJ_REPORTREQUIREDFILES{\pard\plain \s2\sb240\sa120\keepn \b\v\f3\fs36\cf2\lang1033 {\tc {\v AOBJ_REPORTREQUIREDFILES}}}
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Description}\tab The {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }sends this message to an object type\rquote 
s administration function when an executable is being created. The object type should report any implicit files that the object type needs in order to run. It does this by calling AObjAddRequiredFile. Implicit files ar
e files that the object type does not explicitly link to, but that it might open by using a LoadLibrary call. Special drivers and other files of the same sort are considered to be implicit files.
\par \tab {\b\f12\fs18 ObjectID}\tab The ID of the destination object.
\par \pard \s32\fi-1350\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \tab {\b\f12\fs18 AObjMessage}
\par \pard \s32\fi-1267\li1440\ri432\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \tab {\b\f12\fs18 Fields}
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Field\tab Value\tab Meaning
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 message1\tab AOBJ_REPORTREQUIREDFILES
\par message2\tab Not used.
\par message3\tab Not used.
\par message4\tab Not used.
\par errorMessage\tab Not used.\line 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab 
The administration function should return one of the following responses to the AOBJ_REPORTREQUIREDFILES message:
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 \line Value\tab Meaning
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 A_OK\tab The administration function added the file to the required list successfully.
\par A_NOTHANDLED\line The administration function did not add the file to the required list.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aobj_validateobj}{\*\bkmkend idx_aobj_validateobj}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobj_validateobjectids}
}{\plain \f3\fs16\cf2\up6\lang1033  ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AOBJ_VALIDATEOBJECTIDS}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} OBJMSGS:0075}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AOBJ_VALIDATEOBJECTIDS}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_administration_messages')')}} AOBJ_VALIDATEOBJECTIDS
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Description}\tab During use of AppWare, the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
sends this message to the object type's administration function when a project is compiled and when a user cuts, copies, or pastes in a way that involves objects. If an object stores the IDs of other objects in its data blocks, the {\uldb\cf11 
AObjValidateID}{\v i}{\v dx_aobjvalidateid}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjvalidateid}}{\fldrslt }}{\cf1  }
function should be called to validate each stored ID.
\par \tab {\b\f12\fs18 ObjectID}\tab The ID of the destination object.
\par \pard \s32\fi-1350\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \tab {\b\f12\fs18 AObjMessage}
\par \pard \s32\fi-1267\li1440\ri432\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \tab {\b\f12\fs18 Fields}
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Field\tab Value\tab Meaning
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 message1\tab AOBJ_VALIDATEOBJECTIDS
\par message2\tab Reserved.\tab Do not modify this field.
\par message3\tab Reserved. \tab Do not modify this field.
\par message4\tab Reserved. \tab Do not modify this field.
\par errorMessage\tab Not used.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab The administration function should return one of the following responses to the AOBJ_VALIDATEOBJECTIDS message.

\par 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab Meaning
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 A_OK\tab The administration function handled the message, and no more messages need to be sent for this type's instances. 
\par A_NOTHANDLED
\par \tab The administration function did not handle the message.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_appware_bus_even}{\*\bkmkend idx_appware_bus_even}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_appware_bus_events}}
{\plain \f3\fs16\cf2\up6\lang1033  }{\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} eight:0020}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AppWare Bus Events
}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AppWare Bus Events}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB
(`btn_up'); CBB(`btn_up', `JI(`', `idx_chapter_8')')}} AppWare Bus Events
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\f7\fs22 
\par }\pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 This section contains detailed technical information about AppWare Bus events and event-posting protocols. {\uldb\cf11 Chapter 4}{\v idx_chapter_4}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_chapter_4}}{\fldrslt }}{\cf1  }contains more
 information about events from a generic and theoretical point of view.
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 AppWare Bus Event Descriptions}{\v idx_n1_appware_bus_event_descriptions}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}
}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_n1_appware_bus_e}}{\fldrslt }}
\par {\uldb\cf11 Event-posting Protocol}{\v idx_event_posting_protocol}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_event_posting_pr}
}{\fldrslt }}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_n1_appware_bus_e}{\*\bkmkend idx_n1_appware_bus_e}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_n1_appware_bus_event_descriptions}}{\plain \caps\f3\fs16\cf2\up6\lang1033  }{\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} BUSEVENTS:0005}} {\plain \caps\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain 
\s245 \f3\fs20\lang1033 {\fs16\up6 $} AppWare Bus Event Descriptions}} {\plain \caps\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AppWare Bus Event Descriptions}} {\plain \caps\f3\fs16\cf2\up6\lang1033 !
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_appware_bus_events')')}} AppWare Bus Event Descriptions
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\f7\fs22 
\par }\pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 This section contains descriptions of events that are defined by the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton N}{
\cf1 extField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1 .}
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 AEVENT_CALLFUNCTION}{\v idx_aevent_callfunction}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {
\cf6 gotobutton idx_aevent_callfunct}}{\fldrslt }}
\par {\uldb\cf11 AEVENT_OBJECTCHANGED}{\v idx_aevent_objectchanged}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aevent_objectcha}
}{\fldrslt }}
\par {\uldb\cf11 AEVENT_OBJECTTOTEXT}{\v idx_aevent_objecttotext}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aevent_objecttot}}{\fldrslt }}

\par {\uldb\cf11 AEVENT_OS_ACTIVATEAPP}{\v idx_aevent_os_activateapp}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aevent_os_activa}
}{\fldrslt }}
\par {\uldb\cf11 AEVENT_SHUTDOWN}{\v idx_aevent_shutdown}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aevent_shutdown}}{\fldrslt }}
\par {\uldb\cf11 AEVENT_SIGNAL}{\v idx_aevent_signal}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aevent_signal}}{\fldrslt }}
\par {\uldb\cf11 AEVENT_STARTUP}{\v idx_aevent_startup}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aevent_startup}}{\fldrslt }}
\par {\uldb\cf11 AEVENT_TEXTTOOBJECT}{\v idx_aevent_texttoobject}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aeve}{\cf6 nt_texttoobj}
}{\fldrslt }}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aevent_callfunct}{\*\bkmkend idx_aevent_callfunct}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aevent_callfunction}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AEVENT_CALLFUNCTION}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch85:0005}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AEVENT_CALLFUNCTION}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_appware_bus_event_descriptions')')}} AEVENT_CALLFUNCTION
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Description}\tab The {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
posts this event when there is a need to call a function in a function chain. The AppWare Bus responds to this event by calling the function's associated DLL entry point. 
\par \pard\plain \s38\fi-1440\li1440\ri432\sb240\tqr\tx1260\tqr\tx1350\tx1440\tx2736\tx3024\tx3456\tx5184 \b\f12\fs18\lang1033 \tab AEvtInfo Fields\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Field\tab Use and Value
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 sourceObject
\par \tab Zero.
\par targetOject
\par \tab Zero.
\par what\tab AEVENT_CALLFUNCTION
\par details\tab Reserved.
\par modifiers\tab Reserved.
\par when\tab The time when the event was posted.
\par how\tab AEVT_ATMARK
\par variation\tab Not used.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Comments}\tab 
The information in the description explains the state of the AEvtInfo record that is passed to the DLL entry point when an ALM function is called.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aevent_objectcha}{\*\bkmkend idx_aevent_objectcha}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aevent_objectchanged}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AEVENT_OBJECTCHANGED}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch85:0010}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AEVENT_OBJECTCHANGED}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`b
tn_up'); CBB(`btn_up', `JI(`', `idx_n1_appware_bus_event_descriptions')')}} AEVENT_OBJECTCHANGED
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Description}\tab 
This event should be posted by an object whenever the object's assignable data changes. Its use allows other objects to respond to the changes. 
\par \pard\plain \s38\fi-1440\li1440\ri432\sb240\tqr\tx1260\tqr\tx1350\tx1440\tx2736\tx3024\tx3456\tx5184 \b\f12\fs18\lang1033 \tab AEvtInfo Fields
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Field\tab Use and Value
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 sourceObject
\par \tab The object that is posting the event.
\par targetOject
\par \tab The object whose data has changed.
\par what\tab AEVENT_OBJECTCHANGED
\par modifiers\tab Not used.
\par when\tab The time when the event was posted.
\par how\tab In general, AEVENT_OBJECTCHANGED should be posted with the priority returned by the {\uldb\cf11 AEvtGetObjectChangedPriority}{\v idx_aevtgetobjectchangedpriority}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevtgetobjectcha}}{\fldrslt }}{\cf1  }function.
\par variation\tab Not used.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Comments}\tab If an object provides an API that exposes functions so that the object's instance data can be changed, t
he functions should post the AEVENT_OBJECTCHANGED event. This frees callers of the functions from having to post the event.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aevent_objecttot}{\*\bkmkend idx_aevent_objecttot}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aevent_objecttotext}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AEVENT_OBJECTTOTEXT}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch85:0015}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AEVENT_OBJECTTOTEXT}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_appware_bus_event_descriptions')')}} AEVENT_OBJECTTOTEXT
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Description}\tab When the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
sends this event to an object, it is requesting that the object's value be converted to a text string and returned in a memory block. The AppWare Bus sends this event when there is a need to perform parameter-type conversion or when the {\uldb\cf11 
AObjConvertToText}{\v idx_aobjconverttotext}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjconverttotex}}{\fldrslt }}{\cf1  }
function is called.
\par \pard\plain \s38\fi-1440\li1440\ri432\sb240\tqr\tx1260\tqr\tx1350\tx1440\tx2736\tx3024\tx3456\tx5184 \b\f12\fs18\lang1033 \tab AEvtInfo Fields
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Field\tab Use and Value
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 sourceObject
\par \tab Zero.
\par targetOject
\par \tab The object whose value is to be converted to text.
\par what\tab AEVENT_OBJECTTOTEXT
\par details\tab An identifying MEMBLOCKID for the memblock that is to contain the NULL-terminated text string. The text string represents the object's value.
\par modifiers\tab Not used.
\par when\tab The time when the event was sent.
\par how\tab AEVT_DIRECT
\par variation\tab Not used.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Comments}\tab 
An object that responds to this event should create a textual representation of  its value. It should then store the value as a {\caps null-}terminated string in the memory block whose {\caps id }
is contained in the details field. The responding object should resize the memblock so that it is just large enough to hold the string.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aevent_os_activa}{\*\bkmkend idx_aevent_os_activa}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aevent_os_activateapp}}
 {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AEVENT_OS_ACTIVATEAPP}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch85:0020}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AEVENT_OS_ACTIVATEAPP}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_appware_bus_event_descriptions')')}} AEVENT_OS_ACTIVATEAPP
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Description}\tab The {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutt}{\cf1 on idx_the_appware_bus}}{\fldrslt }}{\cf1  }posts AEVENT_OS_ACTIVATEAPP when an application is activated or deactivated.
\par \pard\plain \s38\fi-1440\li1440\ri432\sb240\tqr\tx1260\tqr\tx1350\tx1440\tx2736\tx3024\tx3456\tx5184 \b\f12\fs18\lang1033 \tab AEvtInfo Fields
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Field\tab Use and Value
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 sourceObject
\par \tab Zero.
\par targetOject
\par \tab Zero.
\par what\tab AEVENT_OS_ACTIVATEAPP
\par details\tab Zero indicates the application is becoming inactive. A nonzero value indicates the application is being activated.
\par modifiers\tab The low word of the modifiers field contains the task handle for the application being activated or deactivated.
\par when\tab The time when the event was posted to the event queue.
\par how\tab AEVT_ATTAIL
\par variation\tab Not used.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Comments}\tab 
The AEVENT_OS_ACTIVATEAPP event is generated in response to the WM_ACTIVATEAPP Window's message. Since the WM_ACTIVATEAPP message is sent to all of an application's top-level windows, the AEVENT_OS_ACTIVATEAPP event is posted with AEVT_KILLDUPLICATES so 
that only one event will be processed for each activation and deactivation.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aevent_shutdown}{\*\bkmkend idx_aevent_shutdown}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aevent_shutdown}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AEVENT_SHUTDOWN}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch85:0025}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AEVENT_SHUTDOWN}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_appware_bus_event_descriptions')')}}
 AEVENT_SHUTDOWN
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Description}\tab The {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
posts the AEVENT_SHUTDOWN event when the application is being terminated. Except in rare cases, you should not post this event. If you want the application to quit, call {\uldb\cf11 AAppPostShutdown}{\v idx_aapppostshutdown}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aapppostshutdown}}{\fldrslt }}{\cf1 .} It will post this event for you. 
\par \pard\plain \s38\fi-1440\li1440\ri432\sb240\tqr\tx1260\tqr\tx1350\tx1440\tx2736\tx3024\tx3456\tx5184 \b\f12\fs18\lang1033 \tab AEvtInfo Fields 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Field\tab Use and Value
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 sourceObject\tab 
\par \tab Zero.
\par targetOject
\par \tab Zero.
\par what\tab AEVENT_SHUTDOWN
\par details\tab Not used.
\par modifiers\tab Not used.
\par when\tab Not used.
\par how\tab AEVT_ATTAIL
\par variation\tab Not used.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Comments}\tab This event allows an object type to perform any necessary cleanup actions before the application terminates.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aevent_signal}{\*\bkmkend idx_aevent_signal}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aevent_signal}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AEVENT_SIGNAL}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch85:0030}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AEVENT_SIGNAL}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_appware_bus_event_descriptions')')}}
 AEVENT_SIGNAL
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Description}\tab The AEVENT_SIGNAL can be posted by an object or an ALM function to trigger one of an object's signals.
\par \pard\plain \s38\fi-1440\li1440\ri432\sb240\tqr\tx1260\tqr\tx1350\tx1440\tx2736\tx3024\tx3456\tx5184 \b\f12\fs18\lang1033 \tab AEvtInfo Fields
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Field\tab Use and Value
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 sourceObject
\par \tab The object whose signal will be triggered.
\par targetOject
\par \tab Zero.
\par what\tab AEVENT_SIGNAL
\par details\tab The {\caps id }of the signal to be triggered.
\par modifiers\tab Not used.
\par when\tab The time when the signal should be posted to the event queue
\par how\tab The posting protocol to be used for the event.
\par variation\tab Not used.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Comments}\tab 
The AEVENT_SIGNAL event is typically posted with AEVT_ATMARK or AEVT_ATTAIL. If an object requires that any functions hooked to a signal be executed so that additional processing can be done, the AEVENT_SIGNAL event can be posted with AEVT_ATONCE.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aevent_startup}{\*\bkmkend idx_aevent_startup}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aevent_startup}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AEVENT_STARTUP}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch85:0035}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AEVENT_STARTUP}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_appware_bus_event_descriptions')')}}
 AEVENT_STARTUP
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Description}\tab The AEVENT_STARTUP event is posted by the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bu}{\v s}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }when an application begins execution.
\par \pard\plain \s38\fi-1440\li1440\ri432\sb240\tqr\tx1260\tqr\tx1350\tx1440\tx2736\tx3024\tx3456\tx5184 \b\f12\fs18\lang1033 \tab AEvtInfo Fields
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Field\tab Use and Value
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 sourceObject
\par \tab Zero.
\par targetOject
\par \tab Zero.
\par what\tab AEVENT_STARTUP
\par details\tab Not used.
\par modifiers\tab Not used.
\par when\tab The time when the event was posted to the event queue
\par how\tab AEVT_ATMARK
\par variation\tab Not used.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Comments}\tab 
The AEVENT_STARTUP event allows the object type to perform any necessary initialization that has to take place before the application can be run. It is in response to this event that an object type sets up its instances for runtime use.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aevent_texttoobj}{\*\bkmkend idx_aevent_texttoobj}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aevent_texttoobject}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AEVENT_TEXTTOOBJECT}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch85:0040}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AEVENT_TEXTTOOBJECT}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_appware_bus_event_descriptions')')}} AEVENT_TEXTTOOBJECT
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Description}\tab When the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
sends this event to an object, the event sets the object's value from the value of a text string. The AppWare Bus sends this event when there is a need to perform parameter-type conversion or when the {\uldb\cf11 AObjConvertFromText}{\v 
idx_aobjconvertfromtext}{\field{\*\fldinst {\cf1 macro}{\cf1 button NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjconvertfromt}}{\fldrslt }}{\cf1  }
function is called.
\par \pard\plain \s38\fi-1440\li1440\ri432\sb240\tqr\tx1260\tqr\tx1350\tx1440\tx2736\tx3024\tx3456\tx5184 \b\f12\fs18\lang1033 \tab AEvtInfo Fields
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Field\tab Use and Value
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 sourceObject
\par \tab Zero.
\par targetOject
\par \tab The object whose value is to be set.
\par what\tab AEVENT_TEXTTOOBJECT
\par details\tab An identifying MEMBLOCKID for the memblock that contains the {\caps null-}terminated text string. The text string represents the object's new value.
\par modifiers\tab Not used.
\par when\tab The time when the event was sent.
\par how\tab AEVT_DIRECT
\par variation\tab Not used.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Comments}\tab An object that re
sponds to this event should use the value of the text string to set the object's value. Acceptable values for the text string and the affected object data are defined by the object type.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_event_posting_pr}{\*\bkmkend idx_event_posting_pr}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_event_posting_protocol}}{\plain \caps\f3\fs16\cf2\up6\lang1033  }{\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} BUSEVENTS:0010}} {\plain \caps\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 $} Event-posting Protocol}} {\plain \caps\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Event-posting Protocol}} {\plain \caps\f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_appware_bus_events')')}} Event-posting Protocol
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\f7\fs22 
\par }\pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The event-posting protocol controls the way the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
processes an event. The function posting an event uses a bit-wise OR to combine desired behaviors into a protocol value and places it in the "how" field of the {\uldb\cf11 AEvtInfo}{\v idx_aevtinfo}{\field{\*\fldinst {\cf1 macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevtinfo}}{\fldrslt }}{\cf1  }
structure. The event-posting protocol controls event priority, range limiting for event recipients, and the elimination of duplicate events. All three aspects of event-posting protocol can be used in combination with each other. 
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Event Priority}{\v idx_event_priority}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_event_priority}}{\fldrslt }}
\par {\uldb\cf11 Range Limiting}{\v idx_range_limiting}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_range_limiting}}{\fldrslt }}
\par {\uldb\cf11 Duplicate Event Removal}{\v idx_duplicate_event_removal}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_duplicate_event_}
}{\fldrslt }}
\par 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_event_priority}{\*\bkmkend idx_event_priority}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_event_priority}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Event Priority}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch86:0005}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Event Priority}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_event_posting_protocol')')}} Event Priority
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The following table lists the possible priority values for event priorities. They are mutually exclusive. {\uldb\cf11 Chapter 4}{\v idx_chapter_4}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_chapter_4}}{\fldrslt }}{\cf1  }describes these protocols in detail.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Mnemonic\tab Description
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 AEVT_ATMARK
\par \tab Uses the at-mark posting protocol to post the event. 
\par AEVT_ATONCE
\par \tab Uses the at-once posting protocol to post the event. 
\par AEVT_ATTAIL
\par \tab Uses the at-tail posting protocol to post the event. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_range_limiting}{\*\bkmkend idx_range_limiting}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_range_limiting}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Range Limiting}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch86:0010}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Range Limiting}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_event_posting_protocol')')}} Range Limiting
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The following table lists the possible values that limit the range of an event's recipients.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Mnemonic\tab Description
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 AEVT_DIRECT
\par \tab Directs an event to the object specified in the targetObject field of the {\uldb\cf11 AEvtInfo}{\v idx_aevtinfo}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf1 gotobutton idx_aevt}{\cf1 info}}{\fldrslt }}{\cf1  }structure. 
\par AEVT_SELF\tab Directs an event to the object specified in the sourceObject field of the {\uldb\cf11 AEvtInfo}{\v idx_aevtinfo}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}
}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevtinfo}}{\fldrslt }}{\cf1  }structure. \line 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The following comments apply to AEVT_DIRECT and AEVT_SELF:
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\fs16\cf5 \{bmc rr.bmp\}\tab }\tab 
If both AEVT_DIRECT and AEVT_SELF are specified, the event is sent to the target object first and is then sent to the source object. 
\par {\fs16\cf5 \{bmc rr.bmp\}\tab }\tab If neither one is specified, the event is sent to all objects that respond to the event. 
\par {\fs16\cf5 \{bmc rr.bmp\}\tab }\tab If the sourceObject field of the {\uldb\cf11 AEvtInfo}{\v idx_aevtinfo}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf1 gotobutton idx_aevtinfo}}{\fldrslt }}{\cf1  }structure is nonzero, the event will be sent to the source object last.
\par 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_duplicate_event_}{\*\bkmkend idx_duplicate_event_}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_duplicate_event_removal
}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Duplicate Event Removal}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch86:0015}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Duplicate Event Removal}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_event_posting_protocol')')}} Duplicate Event Removal
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
Events are removed from the AppWare Bus's event queue as a result of comparisons between newly posted events and events that are already on the queue. The following table lists possible values.
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 \line Mnemonic\tab \tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 AEVT_KILLSIMILARS\tab Removes any events that have the same what field as this event.
\par AEVT_KILLSOURCE\tab Removes any events that have the same source object as this event.
\par AEVT_KILLTARGET\tab Removes events that have the same target object as this event.
\par AEVT_KILLVARIATION\tab Removes events whose variation is the same as the one for this event.
\par AEVT_KILLWHAT\tab Removes any events that have the same what field as this event. 
\par AEVT_KILLWHEN\tab Removes any events that have the same what field as this event.
\par AEVT_KILLALLQUEUES\tab Removes events from both the wait queue and the normal queue.\tab 
\par AEVT_KILLDETAILS\tab Removes events that have the same details as this event.
\par AEVT_KILLDUPLICATES\tab Removes any events that have the same what field and target object as this event.
\par AEVT_KILLMODIFIERS\tab Removes events that have the same modifiers as this event.
\par AEVT_KILLPARTICULARS\tab Removes any events that are the same what field, target object, and details as this event.
\par AEVT_KILLSELF\tab Prevents an event from being posted. Removal of existing events will occur as specified.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_appware_bus_apis}{\*\bkmkend idx_appware_bus_apis}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_appware_bus_apis}}
{\plain \f3\fs16\cf2\up6\lang1033  }{\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} eight:0025}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AppWare Bus APIs}}
 {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AppWare Bus APIs}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_chapter_8')')}} AppWare Bus APIs
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\plain \b\f3\cf9\lang1033 
\par }{\uldb\cf11 Introduction to AppWare Bus Functions}{\v idx_n1_introduction_to_appware_bus_functions}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_n1_introduction_}}{\fldrslt }}
\par {\uldb\cf11 AppWare Bus Function Categories}{\v idx_n1_appware_bus_function_categories}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_n1_appware_bus_f}}{\fldrslt }}
\par {\uldb\cf11 AppWare Bus Macros}{\v idx_appware_bus_macros}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_appware_bus_macr}}{\fldrslt }}

\par {\uldb\cf11 AppWare Bus Functions}{\v idx_n2_appware_bus_f}{\v unctions}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_n2_appware_bus_f}
}{\fldrslt }}
\par 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_n1_introduction_}{\*\bkmkend idx_n1_introduction_}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_n1_introduction_to_appware_bus_functions}}{\plain \caps\f3\fs16\cf2\up6\lang1033  }{\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} BUSAPIS:0005}} {\plain \caps\f3\fs16\cf2\up6\lang1033 ${\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Introduction to AppWare Bus Functions}} {\plain \caps\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Introduction to AppWare Bus Functions}} {\plain 
\caps\f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_appware_bus_apis')')}} Introduction to AppWare Bus Functions
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
The following sections contain information about the AppWare Bus functions. The next section groups the functions into categories; the categories are arranged alphabetically and contain a brief description of the functions. The remainder of the chapter co
nsists of detailed macro and function descriptions that are also arranged alphabetically. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_n1_appware_bus_f}{\*\bkmkend idx_n1_appware_bus_f}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_n1_appware_bus_function_categories}}{\plain \caps\f3\fs16\cf2\up6\lang1033  }{\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} BUSAPIS:0010}} {\plain \caps\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain 
\s245 \f3\fs20\lang1033 {\fs16\up6 $} AppWare Bus Function Categories}} {\plain \caps\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AppWare Bus Function Categories}} {\plain \caps\f3\fs16\cf2\up6\lang1033 !
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_appware_bus_apis')')}} AppWare Bus Function Categories
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\f7\fs22 
\par }
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }has several different function categories. The following sections contain more information about these categories.
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Debugging Support}{\v idx_debugging_support}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_debugging_suppor}}{\fldrslt }}
\par {\uldb\cf11 Event and Signal APIs}{\v idx_event_and_signal_apis}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_event_and_signal}
}{\fldrslt }}
\par {\uldb\cf11 Funct}{\uldb\cf11 ion Parameters}{\v idx_function_parameters}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_function_paramet}
}{\fldrslt }}
\par {\uldb\cf11 AppWare Bus Memory Management}{\v idx_appware_bus_memory_management}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_appware_bus_memo}}{\fldrslt }}
\par {\uldb\cf11 Miscellaneous AppWare Bus Functions}{\v idx_miscellaneous_appware_bus_functions}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_miscellaneous_ap}}{\fldrslt }}
\par {\uldb\cf11 Object Data-block Management}{\v idx_object_data_block_management}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macro}{\cf6 button DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_object_data_bloc}}{\fldrslt }}
\par {\uldb\cf11 Object Ownership}{\v idx_object_ownership}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_object_ownership}}{\fldrslt }}
\par {\uldb\cf11 Object Type Data-block Management}{\v idx_object_type_data_block_management}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_object_type_data}}{\fldrslt }}
\par {\uldb\cf11 Objects and Object Types}{\v idx_objects_and_object_types}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_objects_and_obje}
}{\fldrslt }}
\par {\uldb\cf11 UPSF Support}{\v idx_upsf_support}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_upsf_support}}{\fldrslt }}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_debugging_suppor}{\*\bkmkend idx_debugging_suppor}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_debugging_support}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Debugging Support}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch87:0005}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Debugging Support}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_appware_bus_function_categories')')}} Debugging Support
\par \pard\plain \f3\fs20\lang1033 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Functions\tab \tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 {\uldb\cf11 ADbgPrint}{\v idx_adbg_print}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf1 gotobutton idx_adbg_print}}{\fldrslt }}{\cf1 \tab }Prints a message to a debugging terminal or window.
\par {\uldb\cf11 ADbgPrintRes}{\v idx_adbgprintres}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_adbgprintres}}{\fldrslt }}{\cf1 \tab }
Retrieves a format string from the string resource ID and prints a message to a debugging terminal or window. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Macros\tab \tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 {\uldb\cf11 ADBG_ASSE}{\uldb\cf11 RT_E}{\v idx_adbg_assert_e}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_adbg_assert_e}}{\fldrslt }}{\cf1 \tab }If the value of an expression is logically false (zero), this macro prints an error message.
\par {\uldb\cf11 ADBG_ASSERT_I}{\v idx_adbg_assert_i}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_adbg_assert_i}}{\fldrslt }}{\cf1 
\tab }If the value of an expression is logically false (zero), this macro prints an information message. 
\par {\uldb\cf11 ADBG_ASSERT_RES_E}{\v idx_adbg_assert_res_e}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_adbg_a}{\cf1 ssert_res}
}{\fldrslt }}{\cf1 
\par }{\cf1 \tab \tab }If the value of an expression is logically false (zero), this macro prints an error message that is located in a resource file.
\par {\uldb\cf11 ADBG_ASSERT_RES_I}{\v idx_n1_adbg_assert_res_i}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_n1_adbg_assert_r}
}{\fldrslt }}{\cf1 
\par }{\cf1 \tab \tab }If the value of an expression is logically false (zero), this macro prints an information message that is located in a resource file.
\par {\uldb\cf11 ADBG_ASSERT_RES_W}{\v idx_n2_adbg_assert_res_w}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_n2_}{\cf1 adbg_assert_r}
}{\fldrslt }}{\cf1 
\par }{\cf1 \tab \tab }If the value of an expression is logically false (zero), this macro prints a warning message that is located in a resource file.
\par {\uldb\cf11 ADBG_ASSERT_W}{\v idx_adbg_assert_w}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_adbg_assert_w}}{\fldrslt }}{\cf1 \tab }
If the value of an expression is logically false (zero), this macro prints a warning message. 
\par {\uldb\cf11 ADBG_EVAL}{\v idx_adb_eval}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_adb_eval}}{\fldrslt }}{\cf1 \tab }
This macro evaluates expressions.
\par {\uldb\cf11 ADBG_PRINT_E}{\v idx_adbg_print_e}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_adbg_print_e}}{\fldrslt }}{\cf1 \tab }
This macro prints error messages.
\par {\uldb\cf11 ADBG_PRINT_I}{\v idx_adbg_print_i}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_adbg_print_i}}{\fldrslt }}{\cf1 \tab }
This macro prints information messages.
\par {\uldb\cf11 ADBG_PRINT_RES_E}{\v idx_adbg_print_res_e}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_adbg_print_res_e}}{\fldrslt }}{\cf1 
\tab }This macro prints an error message that is located in a resource file.
\par {\uldb\cf11 ADBG_PRINT_RES_I}{\v idx_adbg_print_res_i}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 ma}{\cf6 crobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_adbg_print_res_i}}{\fldrslt }}
{\cf1 \tab }This macro prints an information message that is located in a resource file.
\par {\uldb\cf11 ADBG_PRINT_RES_W}{\v idx_adbg_print_res_w}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_adbg_print_res_w}}{\fldrslt }}{\cf1 

\par }{\cf1 \tab \tab }This macro prints a warning message that is located in a resource file.
\par {\uldb\cf11 ADBG_PRINT_W}{\v idx_adbg_print_w}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_adbg_print_w}}{\fldrslt }}{\cf1 \tab }
This macro prints warning messages.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_event_and_signal}{\*\bkmkend idx_event_and_signal}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_event_and_signal_apis}}
 {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Event and Signal APIs}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch87:0010}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Event and Signal APIs}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_appware_bus_function_categories')')}} Event and Signal APIs
\par \pard\plain \s38\fi-1440\li1440\ri432\sb240\tqr\tx1260\tqr\tx1350\tx1440\tx2736\tx3024\tx3456\tx5184 \b\f12\fs18\lang1033 \tab General
\par \pard \s38\fi-1440\li1440\ri432\tqr\tx1260\tqr\tx1350\tx1440\tx2736\tx3024\tx3456\tx5184 \tab Purpose
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Function\tab \tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 {\uldb\cf11 AEvtPost}{\v idx_aevtpost}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf1 gotobutton idx_aevtpost}}{\fldrslt }}{\cf1 \tab }Sends an event to one or more objects.
\par {\uldb\cf11 AEvtPostSignalAtMark}{\v idx_aevtpostsignalatmark}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevtpostsignalat}
}{\fldrslt }}{\cf1 
\par }{\cf1 \tab \tab }Posts a signal event into the queue at the mark. 
\par {\uldb\cf11 AEvtPostSignalAtTail}{\v idx_n1_aevtpostsignalattail}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_n1_aevtpostsigna}
}{\fldrslt }}{\cf1 \tab }Posts a signal event into the tail of the queue.
\par {\uldb\cf11 AEvtPostStandard}{\v idx_aevtpoststandard}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevtpoststandard}}{\fldrslt }}
{\cf1 \tab }A simplified version of {\uldb\cf11 AEvtPost}{\v idx_aevtpost}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevtpost}
}{\fldrslt }}{\cf1 .}
\par 
\par \pard\plain \s38\fi-1440\li1440\ri432\sb240\tqr\tx1260\tqr\tx1350\tx1440\tx2736\tx3024\tx3456\tx5184 \b\f12\fs18\lang1033 \tab Miscellaneous
\par \pard \s38\fi-1440\li1440\ri432\tqr\tx1260\tqr\tx1350\tx1440\tx2736\tx3024\tx3456\tx5184 \tab Event Functions
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Function\tab \tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 {\uldb\cf11 AEvtGetObjectChangedPriority}{\v idx_aevtgetobjectchangedpriority}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {
\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevtgetobjectcha}}{\fldrslt }}{\cf1 
\par }\tab \tab Calculates the correct priority to be used for an object-changed event.
\par 
\par \pard\plain \s38\fi-1440\li1440\ri432\sb240\tqr\tx1260\tqr\tx1350\tx1440\tx2736\tx3024\tx3456\tx5184 \b\f12\fs18\lang1033 \tab Interobject
\par \pard \s38\fi-1440\li1440\ri432\tqr\tx1260\tqr\tx1350\tx1440\tx2736\tx3024\tx3456\tx5184 \tab Messages
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Function\tab \tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 {\uldb\cf11 AEvtCallMethod}{\v idx_aevtcallmethod}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}
}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevtcallmethod}}{\fldrslt }}{\cf1 \tab }Forces the shell to invoke the handler for the specified event.
\par {\uldb\cf11 AEvtCheckForMethod}{\v idx_aevtcheckformethod}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevtcheckformeth}
}{\fldrslt }}{\cf1 
\par }{\cf1 \tab \tab }Determines whether an object type has a defined handler for a given event.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_function_paramet}{\*\bkmkend idx_function_paramet}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_function_parameters}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Function Parameters}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch87:0015}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Function Parameters}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_appware_bus_function_categories')')}} Function Parameters
\par \pard\plain \f3\fs20\lang1033 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Function\tab \tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 {\uldb\cf11 AFuncGet}{\uldb\cf11 Parameter}{\v idx_afuncgetparameter}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_afuncgetparamete}}{\fldrslt }}{\cf1 \tab }Retrieves a parameter for the currently executing function. 
\par {\uldb\cf11 AFuncGetTypedParameter}{\v idx_afuncgettypedparameter}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_afuncgettypedpar}
}{\fldrslt }}{\cf1 
\par }\tab \tab Retrieves a type-checked or coerced parameter for the currently executing function.
\par {\uldb\cf11 AFuncSetParameter}{\v idx_afuncsetparameter}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_afuncsetparamete}
}{\fldrslt }}{\cf1  }\tab Sets the specified output parameter for the current function.
\par {\uldb\cf11 AFuncGetOutput}{\v idx_afuncgetoutput}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_afuncgetoutput}}{\fldrslt }}{\cf1 
\tab }Retrieves the specified output parameter for the current function.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_appware_bus_memo}{\*\bkmkend idx_appware_bus_memo}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_appware_bus_memory_management}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AppWare Bus Memory Management}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +
} ch87:0020}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AppWare Bus Memory Management}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_appware_bus_function_categories')')}} AppWare Bus Memory Management
\par \pard\plain \f3\fs20\lang1033 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Function\tab \tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 {\uldb\cf11 AMemAllocate}{\v idx_amemallocate}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}
}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_amemallocate}}{\fldrslt }}{\cf1  }\tab Allocates a memory block of the specified size.
\par {\uldb\cf11 AMemFree}{\v idx_amemfree}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_amemfree}}{\fldrslt }}{\cf1 \tab }
Releases the specified memory block. 
\par {\uldb\cf11 AMemGetSize}{\v idx_amemgetsize}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_amemgetsize}}{\fldrslt }}{\cf1  }\tab 
Returns the size of the specified memory block.
\par {\uldb\cf11 AMemLock}{\v idx_amemlock}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_amemlock}}{\fldrslt }}{\cf1  }\tab 
Retrieves a pointer to the specified memory block's data.
\par {\uldb\cf11 AMemSetSize}{\v idx_amemsetsize}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_amemsetsize}}{\fldrslt }}{\cf1  }\tab 
Resizes the specified memory block.
\par {\uldb\cf11 AMemUnlock}{\v idx_amemunlock}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_amemunlock}}{\fldrslt }}{\cf1 \tab }
Decrements the lock count of the specified memory block. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_miscellaneous_ap}{\*\bkmkend idx_miscellaneous_ap}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_miscellaneous_appware_bus_functions}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Miscellaneous AppWare Bus Functions}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 
{\fs16\up6 +} ch87:0025}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Miscellaneous AppWare Bus Functions}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_appware_bus_function_categories')')}} Miscellaneous AppWare Bus Functions
\par \pard\plain \f3\fs20\lang1033 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Function\tab \tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 {\uldb\cf11 AAppConvertOSTime}{\v idx_aappconvertostime}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aappconvertostim}}{\fldrslt }}{\cf1 \tab }Translates the specified host-platform tick count into the corresponding AppWare event time. The AppWare time is measured in 60ths of a 
second.
\par {\uldb\cf11 AAppGetIcon}{\v idx_aappgeticon}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aappgeticon}}{\fldrslt }}{\cf1 \tab }
Retrieves an HICON for the application icon.
\par {\uldb\cf11 AAppGetPriorityMode}{\v idx_aappgetprioritymode}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aappgetprioritym}
}{\fldrslt }}{\cf1 
\par }{\cf1 \tab \tab }Retrieves the current priority mode of the application. 
\par {\uldb\cf11 AAppGetTime}{\v idx_aappgettime}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aappgettime}}{\fldrslt }}{\cf1 \tab }
Returns the elapsed time since the system was booted.
\par {\uldb\cf11 AAppIsDesig}{\uldb\cf11 nTime}{\v idx_aappisdesigntime}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aappisdesigntime}
}{\fldrslt }}{\cf1 \tab }Determines whether the application is being executed in design time or run time. 
\par {\uldb\cf11 AAppPostShutdown}{\v idx_aapppostshutdown}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aapppostshutdown}}{\fldrslt }}
{\cf1 \tab }Shuts down the application.
\par {\uldb\cf11 AAppSave}{\v idx_aappsave}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aappsave}}{\fldrslt }}{\cf1  }\tab 
Saves the current state of all of the application's persistent objects. 
\par {\uldb\cf11 AAppSe}{\uldb\cf11 tPriorityMode}{\v idx_aappsetprioritymode}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_aappsetprioritym}}{\fldrslt }}{\cf1  }
\par \tab \tab Sets the application's current priority mode. 
\par {\uldb\cf11 AFuncReportResult}{\v idx_afuncreportresult}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_afuncreportresul}
}{\fldrslt }}{\cf1 \tab }Sets the fields of the system record.
\par {\uldb\cf11 AObjEdit}{\v idx_aobjedit}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjedit}}{\fldrslt }}{\cf1  }\tab Sends the {
\uldb\cf11 AOBJ_EDITOBJECT}{\v idx_aobj_editobject}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump }{\cf6 <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_editobject}
}{\fldrslt }}{\cf1  }message to the specified object's administration function.
\par {\uldb\cf11 AObjReportError}{\v idx_aobjreporterror}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjreporterror}}{\fldrslt }}{
\cf1 \tab }Reports object errors. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_object_data_bloc}{\*\bkmkend idx_object_data_bloc}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_object_data_block_management}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Object Data-block Management}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +}
 ch87:0030}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Object Data-block Management}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_appware_bus_function_categories')')}} Object Data-block Management
\par \pard\plain \f3\fs20\lang1033 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Function\tab \tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 {\uldb\cf11 AObjAddData}{\v idx_aobjadddata}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}
}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjadddata}}{\fldrslt }}{\cf1  }\tab Creates a new object-data block.
\par {\uldb\cf11 AObjCopyDatas}{\v idx_aobjcopydatas}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJu}{\cf6 mp <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjcopydatas}}{\fldrslt }}{
\cf1 \tab }Copies the specified object's data blocks into consecutive data blocks in memory
\par {\uldb\cf11 AObjDeleteData}{\v idx_aobjdeletedata}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjdeletedata}}{\fldrslt }}{\cf1 
 }\tab Destroys an existing object-data block.
\par {\uldb\cf11 AObjGetDataCount}{\v idx_aobjgetdatacount}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjgetdatacount}}{\fldrslt }}
{\cf1  }\tab Retrieves the number of data blocks assigned to the specified object.
\par {\uldb\cf11 AObjGetDataSize}{\v idx_aobjgetdatasize}{\field{\*\fldinst {\cf1 macrobutton N}{\cf1 extField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjgetdatasize}
}{\fldrslt }}{\cf1 \tab }Retrieves the current size of the specified object data block. 
\par {\uldb\cf11 AObjInsertData}{\v idx_aobjinsertdata}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjinsertdata}}{\fldrslt }}{\cf1 
\tab }Inserts a new object data block at the specified index. 
\par {\uldb\cf11 AObjLockData}{\v idx_aobjlockdata}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjlockdata}}{\fldrslt }}{\cf1 \tab }
Retrieves a pointer to the specified object data block and increments the lock count for the data by one. 
\par {\uldb\cf11 AObjReadDatas}{\v idx_aobjreaddatas}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjreaddatas}}{\fldrslt }}{\cf1 
\tab }Reads the data blocks of the specified object from a file.
\par {\uldb\cf11 AObjResizeData}{\v idx_aobjresizedata}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjresizedata}}{\fldrslt }}{\cf1 
 }\tab Resizes the specified data block.
\par {\uldb\cf11 AObjRestoreDatas}{\v idx_aobjrestoredatas}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjrestoredatas}}{\fldrslt }}
{\cf1 \tab }Retrieves the specified object type's data block.
\par {\uldb\cf11 AObjSetData}{\v idx_aobjset}{\v data}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjsetdata}}{\fldrslt }}{\cf1 
\tab }Changes the size and the data of an existing object data block.
\par {\uldb\cf11 AObjSetDataCount}{\v idx_aobjsetdatacount}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjsetdatacount}}{\fldrslt }}
{\cf1  }\tab Sets the number of data blocks for the specified object. 
\par {\uldb\cf11 AObjUnlockData}{\v idx_aobjunlockdata}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjunlockdata}}{\fldrslt }}{\cf1 
\tab }Decrements the lock count of the specified object data block.
\par {\uldb\cf11 AObjWriteData}{\uldb\cf11 s}{\v idx_aobjwritedatas}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjwritedatas}
}{\fldrslt }}{\cf1 \tab }Writes the data blocks of the specified object to a file
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_object_ownership}{\*\bkmkend idx_object_ownership}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_object_ownership}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Object Ownership}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch87:0035}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Object Ownership}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_appware_bus_function_categories')')
}} Object Ownership
\par \pard\plain \f3\fs20\lang1033 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Function\tab \tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 {\uldb\cf11 AObjGetNextOwner}{\v idx_aobjgetnextowner}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}
}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjgetnextowner}}{\fldrslt }}{\cf1 \tab }Retrieves information about the next owner of a given object from a list of registered owners.
\par {\uldb\cf11 AObjRegisterOwner}{\v idx_aobjregisterowner}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjregisterowne}
}{\fldrslt }}{\cf1 \tab }Registers the ownership of an object.
\par {\uldb\cf11 AObjUnregisterOwner}{\v idx_aobjunregisterowner}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjunregisterow}
}{\fldrslt }}{\cf1 
\par }{\cf1 \tab \tab }Unregisters the ownership of an object. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_object_type_data}{\*\bkmkend idx_object_type_data}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_object_type_data_block_management}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Object Type Data-block Management}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {
\fs16\up6 +} ch87:0040}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Object Type Data-block Management}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_appware_bus_function_categories')')}} Object Type Data-block Management
\par \pard\plain \f3\fs20\lang1033 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Function\tab \tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 {\uldb\cf11 ATypeAddData}{\v idx_atypeadddata}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}
}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_atypeadddata}}{\fldrslt }}{\cf1 \tab }Creates a new object-type data block. \tab 
\par {\uldb\cf11 ATypeDeleteData}{\v idx_atypedeletedata}{\field{\*\fldinst {\cf1 macrobutton NextFi}{\cf1 eld }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_atypedeletedata}
}{\fldrslt }}{\cf1 \tab }Destroys an existing object-type data block.
\par {\uldb\cf11 ATypeGetDataCount}{\v idx_atypegetdatacount}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_atypegetdatacoun}
}{\fldrslt }}{\cf1 \tab }Retrieves the number of data blocks for the specified object type.
\par {\uldb\cf11 ATypeGetDataSize}{\v idx_atypegetdatasize}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_atypegetdatasize}}{\fldrslt }}
{\cf1 \tab }Retrieves the current size of the specified object-type data block. 
\par {\uldb\cf11 ATypeGetIcon}{\v idx_atypegeticon}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_atypegeticon}}{\fldrslt }}{\cf1 \tab }
Gets the icon associated with the given object type.
\par {\uldb\cf11 ATypeInsertData}{\v idx_atypeinsertdata}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_atypeinsertdata}}{\fldrslt }}{
\cf1  }\tab Inserts a new object-type data block at the specified index.
\par {\uldb\cf11 ATypeLockData}{\v idx_atypelockdata}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_atypelockdata}}{\fldrslt }}{\cf1  }
\tab Retrieves a pointer to the specified object-type data block and increments the lock count for the data by one.
\par {\uldb\cf11 ATypeResizeData}{\v idx_atyperesizedata}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_atyperesizedata}}{\fldrslt }}{
\cf1  }\tab Resizes the specified data block.
\par {\uldb\cf11 ATypeSetData}{\v idx_atypesetdata}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_atypesetdata}}{\fldrslt }}{\cf1 \tab }
Changes the size and the data of an existing object-type data block.
\par {\uldb\cf11 ATypeSetDataCount}{\v idx_atypesetdatacount}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_atypesetdatacoun}
}{\fldrslt }}{\cf1 \tab }Sets the number of data blocks for the specified object type. 
\par {\uldb\cf11 ATypeUnlockData}{\v idx_atypeunlockdata}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_atypeunlockdata}}{\fldrslt }}{
\cf1 \tab }Decrements the lock count of the specified object-type data block.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_objects_and_obje}{\*\bkmkend idx_objects_and_obje}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_objects_and_object_types}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Objects and Object Types}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +}
 ch87:0045}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Objects and Object Types}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_appware_bus_function_categories')')}} Objects and Object Types
\par \pard\plain \s38\fi-1440\li1440\ri432\sb240\tqr\tx1260\tqr\tx1350\tx1440\tx2736\tx3024\tx3456\tx5184 \b\f12\fs18\lang1033 \tab General Object
\par \pard \s38\fi-1440\li1440\ri432\tqr\tx1260\tqr\tx1350\tx1440\tx2736\tx3024\tx3456\tx5184 \tab Management
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Function\tab \tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 {\uldb\cf11 AObjAssign}{\v idx_aobjassign}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}
}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjassign}}{\fldrslt }}{\cf1 \tab }Assigns the data stored in one object to another object.
\par {\uldb\cf11 AObjCreate}{\v idx_aobjcreate}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton D}{\cf6 oJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjcreate}}{\fldrslt }}{\cf1 \tab 
}Creates a temporary object of the specified type. 
\par {\uldb\cf11 AObjCreateWithProtocol}{\v idx_aobjcreatewithprotocol}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjcreatewithpr}
}{\fldrslt }}{\cf1 
\par }\tab \tab Creates an object of a given type with the given protocol. 
\par {\uldb\cf11 AObjDestroy}{\v idx_aobjdestroy}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjdestroy}}{\fldrslt }}{\cf1  }\tab 
Destroys the specified temporary object.
\par {\uldb\cf11 AObjSetName}{\v idx_aobjsetname}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobut}{\cf1 ton idx_aobjsetname}}{\fldrslt }}{\cf1 
\tab }Sets the name of the given object.
\par {\uldb\cf11 AObjValidateID}{\v idx_aobjvalidateid}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjvalidateid}}{\fldrslt }}{\cf1 
\tab }Translates the specified object ID from a possibly out-of-date ID to a current ID. 
\par \pard\plain \s38\fi-1440\li1440\ri432\sb240\tqr\tx1260\tqr\tx1350\tx1440\tx2736\tx3024\tx3456\tx5184 \b\f12\fs18\lang1033 \tab Object
\par \pard \s38\fi-1440\li1440\ri432\tqr\tx1260\tqr\tx1350\tx1440\tx2736\tx3024\tx3456\tx5184 \tab Enumeration
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Function\tab \tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 {\uldb\cf11 AObjGetNextObject}{\v idx_aobjgetnextobject}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjgetnextobjec}}{\fldrslt }}{\cf1 \tab }Enumerates the real objects of a specified object type.
\par {\uldb\cf11 AObjGetObjectCount}{\v idx_aobjgetobject}{\v count}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjgetobjectcou}
}{\fldrslt }}{\cf1  }
\par \tab \tab Retrieves the current number of object instances for the specified type.
\par \pard\plain \s38\fi-1440\li1440\ri432\sb240\tqr\tx1260\tqr\tx1350\tx1440\tx2736\tx3024\tx3456\tx5184 \b\f12\fs18\lang1033 \tab Object
\par \pard \s38\fi-1440\li1440\ri432\tqr\tx1260\tqr\tx1350\tx1440\tx2736\tx3024\tx3456\tx5184 \tab Information\tab 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Function\tab \tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 {\uldb\cf11 AObjCheckType}{\v idx_aobjchecktype}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}
}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjchecktype}}{\fldrslt }}{\cf1 \tab }Determines whether an object exists and is of a specified type.
\par {\uldb\cf11 AObjGetName}{\v idx_aobjgetname}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjgetname}}{\fldrslt }}{\cf1  }\tab 
Retrieves the name of the specified object.
\par {\uldb\cf11 AObjGetType}{\v idx_aobjgettype}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjgettype}}{\fldrslt }}{\cf1  }\tab 
Retrieves the object type of the specified object.
\par \pard\plain \s38\fi-1440\li1440\ri432\sb240\tqr\tx1260\tqr\tx1350\tx1440\tx2736\tx3024\tx3456\tx5184 \b\f12\fs18\lang1033 \tab Object Runtime
\par \pard \s38\fi-1440\li1440\ri432\tqr\tx1260\tqr\tx1350\tx1440\tx2736\tx3024\tx3456\tx5184 \tab Information
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Function\tab \tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 {\uldb\cf11 AObjGetRuntimeInfo}{\v idx_aobjgetruntimeinfo}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjgetruntimein}}{\fldrslt }}{\cf1 \tab }Returns a long value that was stored with the object at runtime.
\par {\uldb\cf11 AObjSetRuntimeInfo}{\v idx_aobjsetruntimeinfo}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 go}{\cf1 tobutton idx_aobjsetruntimein}
}{\fldrslt }}{\cf1  }\tab Allows a long, four-byte value to be stored with an object during execution.
\par \pard\plain \s38\fi-1440\li1440\ri432\sb240\tqr\tx1260\tqr\tx1350\tx1440\tx2736\tx3024\tx3456\tx5184 \b\f12\fs18\lang1033 \tab Text Interchange
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Function\tab \tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 {\uldb\cf11 AObjConvertFromText}{\v idx_aobjconvertfromtext}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjconvertfromt}}{\fldrslt }}{\cf1  }
\par \tab \tab Uses text-interchange protocol to translate the text string in the specified memory block into the specified object.
\par {\uldb\cf11 AObjConvertToText}{\v idx_aobjconverttotext}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjconvertt}{\cf1 otex}
}{\fldrslt }}{\cf1  }\tab Uses text-interchange protocol to translate the passed object into a text string and store it in the specified memory block.
\par \pard\plain \s38\fi-1440\li1440\ri432\sb240\tqr\tx1260\tqr\tx1350\tx1440\tx2736\tx3024\tx3456\tx5184 \b\f12\fs18\lang1033 \tab Object Type
\par \pard \s38\fi-1440\li1440\ri432\tqr\tx1260\tqr\tx1350\tx1440\tx2736\tx3024\tx3456\tx5184 \tab Enumeration
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Function\tab \tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 {\uldb\cf11 ATypeGetCount}{\v idx_atypegetcount}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}
}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_atypegetcount}}{\fldrslt }}{\cf1 \tab }Retrieves the number of currently defined object types.\tab 
\par {\uldb\cf11 ATypeGetCountCfg}{\v idx_atypegetcountcfg}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_atypegetcountcfg}}{\fldrslt }}
{\cf1 \tab }Gets the count of available object types for the current ALM configuration.
\par {\uldb\cf11 ATypeGetNext}{\v idx_atypegetnext}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_atypegetnext}}{\fldrslt }}{\cf1 \tab }
Enumerates the currently defined object types. 
\par {\uldb\cf11 ATypeGetNextCfg}{\v idx_atypegetnextcfg}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_atypegetnextcfg}}{\fldrslt }}{
\cf1 \tab }Iterates through all possible object types that are available to the current ALM configuration.
\par \pard\plain \s38\fi-1440\li1440\ri432\sb240\tqr\tx1260\tqr\tx1350\tx1440\tx2736\tx3024\tx3456\tx5184 \b\f12\fs18\lang1033 \tab Object Type
\par \pard \s38\fi-1440\li1440\ri432\tqr\tx1260\tqr\tx1350\tx1440\tx2736\tx3024\tx3456\tx5184 \tab Information
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Function\tab \tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 {\uldb\cf11 ATypeGetName}{\v idx_atypegetname}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobu}{\cf6 tton DoJump <+>}
}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_atypegetname}}{\fldrslt }}{\cf1 \tab }Retrieves the name of the specified object type. 
\par {\uldb\cf11 ATypeGetRuntimeInfo}{\v idx_atypegetruntimeinfo}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_atypegetruntimei}
}{\fldrslt }}{\cf1 
\par }{\cf1 \tab \tab }Retrieves runtime information that is associated with the given type.
\par {\uldb\cf11 ATypeSetRuntimeInfo}{\v idx_atypesetruntimeinfo}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_atypesetruntimei}
}{\fldrslt }}{\cf1 
\par }{\cf1 \tab \tab }Allows a long, four-byte value to be stored with an object type during execution. 
\par \pard\plain \s38\fi-1440\li1440\ri432\sb240\tqr\tx1260\tqr\tx1350\tx1440\tx2736\tx3024\tx3456\tx5184 \b\f12\fs18\lang1033 \tab Protocol
\par \pard \s38\fi-1440\li1440\ri432\tqr\tx1260\tqr\tx1350\tx1440\tx2736\tx3024\tx3456\tx5184 \tab Support
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Function\tab \tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 {\uldb\cf11 AObjQueryProtocol}{\v idx_aobjqueryprotocol}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjqueryprotoco}}{\fldrslt }}{\cf1 \tab }Queries the specified object to determine whether the object supports the indicated protocol.
\par {\uldb\cf11 ATypeQueryProtocol}{\v idx_atypequeryprotocol}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_atypequeryprotoc}
}{\fldrslt }}{\cf1 \tab }Queries the specified object type to determine whether it supports the specified protocol. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_upsf_support}{\*\bkmkend idx_upsf_support}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_upsf_support}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} UPSF Support}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch87:0050}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} UPSF Support}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_appware_bus_function_categories')')}} UPSF Support

\par \pard\plain \f3\fs20\lang1033 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Function\tab \tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 {\uldb\cf11 AUpsfCloseScope}{\v idx_aupsfclosescope}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}
}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsfclosescope}}{\fldrslt }}{\cf1 \tab }Signals the end of a scope.\tab  
\par {\uldb\cf11 AUpsfCreateScope}{\v idx_aupsfcreatescope}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsfcreatescope}}{\fldrslt }}
{\cf1 \tab }Creates a scope for private structures within an object. 
\par {\uldb\cf11 AUpsfExportField}{\v idx_aupsfexportfield}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsfexportfield}}{\fldrslt }}
{\cf1 \tab }Exports a field to the UPSF file. 
\par {\uldb\cf11 AUpsfFieldCount}{\v idx_aupsffield}{\v count}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsffieldcount}
}{\fldrslt }}{\cf1  }\tab Counts all the fields in the current scope that have a specified field name.
\par {\uldb\cf11 AUpsfFieldInfo}{\v idx_aupsffieldinfo}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsffieldinfo}}{\fldrslt }}{\cf1 
\tab }Determines the required buffer size. 
\par {\uldb\cf11 AUpsfImportField}{\v idx_aupsfimportfield}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsfimportfield}}{\fldrslt }}
{\cf1 \tab }Reads a specified field from the UPSF file. 
\par {\uldb\cf11 AUpsfLogComment}{\v idx_aupsflogcomme}{\v nt}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsflogcomment}
}{\fldrslt }}{\cf1  }\tab Writes a comment or an error warning to the UPSF log file.
\par {\uldb\cf11 AUpsfOpenScope}{\v idx_aupsfopenscope}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsfopenscope}}{\fldrslt }}{\cf1 
\tab }Opens an existing scope that was created by the {\uldb\cf11 AUpsfCreateScope}{\v idx_aupsfcreatescope}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf1 gotobutton idx_aupsfcreatescope}}{\fldrslt }}{\cf1  }function.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_appware_bus_macr}{\*\bkmkend idx_appware_bus_macr}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_appware_bus_macros
}}{\plain \caps\f3\fs16\cf2\up6\lang1033  }{\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} BUSAPIS:0015}} {\plain \caps\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $}
 AppWare Bus Macros}} {\plain \caps\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AppWare Bus Macros}} {\plain \caps\f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_appware_bus_apis')')}} AppWare Bus Macros
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\f7\fs22 
\par }\pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 This section contains descriptions of the AppWare Bus macros. Entries are arranged alphabetically.
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 ADBG_ASSERT_E}{\v idx_adbg_assert_e}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_adbg_assert_e}}{\fldrslt }}
\par {\uldb\cf11 ADBG_ASSERT_I}{\v idx_adbg_assert_i}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_adbg_assert_i}}{\fldrslt }}
\par {\uldb\cf11 ADBG_ASSERT_RES_E}{\v idx_adbg_assert_res_e}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_adbg_assert_res_}}{\fldrslt }}

\par {\uldb\cf11 ADBG_ASSERT_RES_I}{\v idx_n1_adbg_assert_res_i}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_n1_adbg_asse}{\cf6 rt_r}
}{\fldrslt }}
\par {\uldb\cf11 ADBG_ASSERT_RES_W}{\v idx_n2_adbg_assert_res_w}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_n2_adbg_assert_r}}{\fldrslt }}

\par {\uldb\cf11 ADBG_ASSERT_W}{\v idx_adbg_assert_w}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_adbg_assert_w}}{\fldrslt }}
\par {\uldb\cf11 ADB_EVAL}{\v idx_adb_eval}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_adb_eval}}{\fldrslt }}
\par {\uldb\cf11 ADBG_PRINT_E}{\v idx_adbg_print_e}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_adbg_print_e}}{\fldrslt }}
\par {\uldb\cf11 ADBG_PRINT_I}{\v idx_adbg_print_i}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJu}{\cf6 mp <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_adbg_print_i}}{\fldrslt }}
\par {\uldb\cf11 ADBG_PRINT_RES_E}{\v idx_adbg_print_res_e}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_adbg_print_res_e}}{\fldrslt }}
\par {\uldb\cf11 ADBG_PRINT_RES_I}{\v idx_adbg_print_res_i}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_adbg_print_res_i}}{\fldrslt }}
\par {\uldb\cf11 ADBG_PRINT_RES_W}{\v idx_adbg_print_res_w}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_adbg_print_res_w}}{\fldrslt }}
\par {\uldb\cf11 ADBG_PRINT_W}{\v idx_adbg_print_w}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_adbg_print_w}}{\fldrslt }}
\par 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_adbg_assert_e}{\*\bkmkend idx_adbg_assert_e}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_adbg_assert_e}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ADBG_ASSERT_E}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch88:0005}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ADBG_ASSERT_E}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_appware_bus_macros')')}} ADBG_ASSERT_E
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab ADBG_ASSERT_E(expression, statement, string)
\par {\b\f12\fs18 \tab Description}\tab If the {\uldb\cf11 ADBG_DEBUG}{\v idx_adbg_debug}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_adbg_debug}}{\fldrslt }}{\cf1  }
macro is defined, the ADBG_ASSERT_E macro will evaluate the expression first. If  the expression is true, the macro will print the string to a debugging terminal and then execute the statement. If the ADBG_DEBUG macro is not defined, no action takes place
. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Description
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 expression\tab A Boolean expression that causes a debug message to be printed if the expression is evaluated as being FALSE. 
\par statement\tab An additional routine or statement to be executed if the expression is evaluated as being FALSE. 
\par string\tab The error message to be printed.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab None. 
\par \tab {\b\f12\fs18 Availability}\tab This function is available at design time and run time.
\par \tab {\b\f12\fs18 Comments}\tab None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_adbg_assert_i}{\*\bkmkend idx_adbg_assert_i}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_adbg_assert_i}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ADBG_ASSERT_I}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch88:0010}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ADBG_ASSERT_I}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_appware_bus_macros')')}} ADBG_ASSERT_I
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab ADBG_ASSERT_I(expression, statement, string)
\par {\b\f12\fs18 \tab Description}\tab If the {\uldb\cf11 ADBG_DEBUG}{\v idx_adbg_debug}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJum}{\cf6 p <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_adbg_debug}}{\fldrslt }}{\cf1  }
macro is defined, the ADBG_ASSERT_I macro will evaluate the expression first. If  the expression is true, the macro will print the string to a debugging terminal and then execute the statement. If the ADBG_DEBUG macro is not defined, no action takes place
. \line  
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Description
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 expression\tab A Boolean expression that causes a debug message to be printed if the expression is evaluated as being FALSE. 
\par statement\tab An additional routine or statement to be executed if the expression is evaluated as being FALSE. 
\par string\tab The informative message to be printed. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab None. 
\par \tab {\b\f12\fs18 Availability}\tab This function is available at design time and run time.
\par \tab {\b\f12\fs18 Comments}\tab None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_adbg_assert_res_}{\*\bkmkend idx_adbg_assert_res_}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_adbg_assert_res_e}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ADBG_ASSERT_RES_E}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch88:0015}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ADBG_ASSERT_RES_E}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_appware_bus_macros')')}}
 ADBG_ASSERT_RES_E
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab ADBG_ASSERT_RES_E(expression, statement, HINSTANCE, STRINGID)
\par {\b\f12\fs18 \tab Description}\tab If the {\uldb\cf11 ADBG_DEBUG}{\v idx_adbg_debug}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_adbg_debug}}{\fldrslt }}{\cf1  }macro is defined, the ADBG_ASSERT_RES_E macro will evaluate the expression first. If  the expre
ssion is true, the macro will print the resource string to a debugging terminal and then execute the statement. If the ADBG_DEBUG macro is not defined, no action takes place. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Description
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 expression\tab A Boolean expression that causes a debug message to be printed if the expression is evaluated as being FALSE. 
\par statement\tab An additional routine or statement to be executed if the expression is evaluated as being FALSE. 
\par HINSTANCE\tab An instance of the module that contains the string resource to be printed.
\par STRINGID\tab The ID of the resource string.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab None. 
\par \tab {\b\f12\fs18 Availability}\tab This function is available at design time and run time.
\par \tab {\b\f12\fs18 Comments}\tab The function {\uldb\cf11 ADbgPrint}{\v idx_adbg_print}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_adbg_print}}{\fldrslt }}{\cf1  }prints the message to a debugging terminal or window.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_n1_adbg_assert_r}{\*\bkmkend idx_n1_adbg_assert_r}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_n1_adbg_assert_res_i}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ADBG_ASSERT_RES_I}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch88:0020}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ADBG_ASSERT_RES_I}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_appware_bus_macros')')}}
 ADBG_ASSERT_RES_I
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab ADBG_ASSERT_RES_I(expression, statement, HINSTANCE, STRINGID)
\par {\b\f12\fs18 \tab Description}\tab If the {\uldb\cf11 ADBG_DEBUG}{\v idx_adbg_debug}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_adbg_debug}}{\fldrslt }}{\cf1  }
macro is defined, the ADBG_ASSERT_RES_I macro will evaluate the expression first. If  the expression is true, the macro will print the resource string to a debugging terminal and then execute the statement. If the ADBG_DEBUG macro is not defined, no actio
n takes place. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Description
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 expression\tab A Boolean expression that causes a debug message to be printed if the expression is evaluated as being FALSE. 
\par statement\tab An additional routine or statement to be executed if the expression is evaluated as being FALSE. 
\par HINSTANCE\tab An instance of the module that contains the string resource to be printed.
\par STRINGID\tab The ID of the resource string.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab None. 
\par \tab {\b\f12\fs18 Availability}\tab This function is available at design time and run time.
\par \tab {\b\f12\fs18 Comments}\tab The function {\uldb\cf11 ADbgPrint}{\v idx_adbg_print}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_adbg_print}}{\fldrslt }}{\cf1  }prints the message to a debugging terminal or window.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_n2_adbg_assert_r}{\*\bkmkend idx_n2_adbg_assert_r}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_n2_adbg_assert_res_w}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ADBG_ASSERT_RES_W}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch88:0025}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ADBG_ASSERT_RES_W}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_appware_bus_macros')')}}
 ADBG_ASSERT_RES_W
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab ADBG_ASSERT_RES_W(expression, statement, HINSTANCE, STRINGID)
\par {\b\f12\fs18 \tab Description}\tab If the {\uldb\cf11 ADBG_DEBUG}{\v idx_adbg_debug}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_adbg_debug}}{\fldrslt }}{\cf1  }
macro is defined, the ADBG_ASSERT_RES_W macro will evaluate the expression first. If  the expression is true, the macro will print the resource string to a debugging terminal and then execute the statement. If the ADBG_DEBUG macro is not defined, no actio
n takes place. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Description
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 expression\tab A Boolean expression that causes a debug message to be printed if the expression is evaluated as being FALSE. 
\par statement\tab An additional routine or statement to be executed if the expression is evaluated as being FALSE. 
\par HINSTANCE\tab An instance of the module that contains the string resource to be printed.
\par STRINGID\tab The ID of the resource string.\line 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab None. 
\par \tab {\b\f12\fs18 Availability}\tab This function is available at design time and run time.
\par \tab {\b\f12\fs18 Comments}\tab The function {\uldb\cf11 ADbgPrint}{\v idx_adbg_print}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_adbg_print}}{\fldrslt }}{\cf1  }prints the message to a debugging terminal or window.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_adbg_assert_w}{\*\bkmkend idx_adbg_assert_w}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_adbg_assert_w}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ADBG_ASSERT_W}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch88:0030}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ADBG_ASSERT_W}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_appware_bus_macros')')}} ADBG_ASSERT_W
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab ADBG_ASSERT_W(expression, statement, string)
\par \tab {\b\f12\fs18 Description}\tab If the {\uldb\cf11 ADBG_DEBUG}{\v idx_adbg_debug}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_adbg_debug}}{\fldrslt }}{\cf1  }
macro is defined, the ADBG_ASSERT_E macro will evaluate the expression first. If  the expression is true, the macro will print the string to a debugging terminal and then execute the statement. If the ADBG_DEBUG macro is not defined, no action takes place
. 
\par 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Description
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 expression\tab A Boolean expression that causes a debug message to be printed if the expression is evaluated as being FALSE. 
\par statement\tab An additional routine or statement to be executed if the expression is evaluated as being FALSE. 
\par string\tab The warning message to be printed.\line  
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab None. 
\par \tab {\b\f12\fs18 Availability}\tab This function is available at design time and run time.
\par \tab {\b\f12\fs18 Comments}\tab None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_adb_eval}{\*\bkmkend idx_adb_eval}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_adb_eval}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ADB_EVAL}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch88:0035}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ADB_EVAL}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_appware_bus_macros')')}} ADB_EVAL
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab ADBG_EVAL(expression)
\par \tab {\b\f12\fs18 Description}\tab If the {\uldb\cf11 ADBG_DEBUG}{\v idx_adbg_debug}{\field{\*\fldinst {\cf1 macro}{\cf1 button NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_adbg_debug}}{\fldrslt }}{\cf1  }macro is defined, this macro evaluates the passed expression. If the ADBG_DEBUG macro is not defined, no action takes place.  \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Description
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 expression\tab The expression that is to be evaluated.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab None. 
\par \tab {\b\f12\fs18 Availability}\tab This function is available at design time and run time.
\par \tab {\b\f12\fs18 Comments}\tab None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_adbg_print_e}{\*\bkmkend idx_adbg_print_e}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_adbg_print_e}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ADBG_PRINT_E}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch88:0040}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ADBG_PRINT_E}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_appware_bus_macros')')}} ADBG_PRINT_E
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab ADBG_PRINT_E(string)
\par \tab {\b\f12\fs18 Description}\tab If the {\uldb\cf11 ADBG_DEBUG}{\v idx_adbg_debug}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macr}{\cf6 obutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_adbg_debug}}{\fldrslt }}{\cf1  }macro is defined, this macro prints the specified string as an error message. If the ADBG_DEBUG macro is not defined, no action takes place. \line  
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 string\tab The error message to be printed.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab None. 
\par \tab {\b\f12\fs18 Availability}\tab This function is available at design time and run time.
\par \tab {\b\f12\fs18 Comments}\tab The function {\uldb\cf11 ADbgPrint}{\v idx_adbg_print}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_adbg_print}}{\fldrslt }}{\cf1  }prints the message to a debugging terminal or window.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_adbg_print_i}{\*\bkmkend idx_adbg_print_i}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_adbg_print_i}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ADBG_PRINT_I}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch88:0045}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ADBG_PRINT_I}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_appware_bus_macros')')}} ADBG_PRINT_I
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab ADBG_PRINT_I(string)
\par \tab {\b\f12\fs18 Description}\tab If the {\uldb\cf11 ADBG_DEBUG}{\v idx_adbg_debug}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_adbg_debug}}{\fldrslt }}{\cf1  }macro is defined, this macro prints the specified string as an informative message. If the ADBG_DEBUG macro is not defined, no action takes place. \line  
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Description
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 string\tab The informative message to be printed.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab None. 
\par \tab {\b\f12\fs18 Availability}\tab This function is available at design time and run time.
\par \tab {\b\f12\fs18 Comments}\tab The function {\uldb\cf11 ADbgPrint}{\v idx_adbg_print}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_adbg_print}}{\fldrslt }}{\cf1  }prints the message to a debugging terminal or window.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_adbg_print_res_e}{\*\bkmkend idx_adbg_print_res_e}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_adbg_print_res_e}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ADBG_PRINT_RES_E}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch88:0050}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ADBG_PRINT_RES_E}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_appware_bus_macros')')}}
 ADBG_PRINT_RES_E
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab ADBG_PRINT_RES_E(HINSTANCE,{\caps  STRINGID})
\par \tab {\b\f12\fs18 Description}\tab If the {\uldb\cf11 ADBG_DEBUG}{\v idx_adbg_debug}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_adbg_debug}}{\fldrslt }}{\cf1  }macro is defined, this macro prints the specified string resource as an error message. If the ADBG_DEBUG macro is not defined, no action takes place. \line   
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Description
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 HINSTANCE\tab An instance of the module whose executable contains a string resource to be used as the print format string.
\par STRINGID\tab The ID of the resource string.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab None. 
\par \tab {\b\f12\fs18 Availability}\tab This function is available at design time and run time.
\par \tab {\b\f12\fs18 Comments}\tab The function {\uldb\cf11 ADbgPrint}{\v idx_adbg_print}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_adbg_print}}{\fldrslt }}{\cf1  }prints the message to a debugging terminal or window.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_adbg_print_res_i}{\*\bkmkend idx_adbg_print_res_i}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_adbg_print_res_i}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ADBG_PRINT_RES_I}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch88:0055}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ADBG_PRINT_RES_I}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_appware_bus_macros')')}}
 ADBG_PRINT_RES_I
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Syntax}\tab ADBG_PRINT_RES_I(HINSTANCE, STRINGID)
\par \tab {\b\f12\fs18 Description}\tab If the {\uldb\cf11 ADBG_DEBUG}{\v idx_adbg_debug}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_adbg_debug}}{\fldrslt }}{\cf1  }macro is defined, this macro prints the specified string resource as an information message. If the ADBG_DEBUG macro is not defined, no action takes place. \line  
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Description
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 HINSTANCE\tab An instance of the module whose executable contains a string resource to be used as the print format string.
\par STRINGID\tab The ID of the resource string.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab None. 
\par \tab {\b\f12\fs18 Availability}\tab This function is available at design time and run time.
\par \tab {\b\f12\fs18 Comments}\tab The function {\uldb\cf11 ADbgPrint}{\v idx_adbg_print}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_adbg_print}}{\fldrslt }}{\cf1  }prints the message to a debugging terminal or window.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_adbg_print_res_w}{\*\bkmkend idx_adbg_print_res_w}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_adbg_print_res_w}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ADBG_PRINT_RES_W}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch88:0060}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ADBG_PRINT_RES_W}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_appware_bus_macros')')}}
 ADBG_PRINT_RES_W
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab ADBG_PRINT_RES_W(HINSTANCE, STRINGID)
\par \tab {\b\f12\fs18 Description}\tab If the {\uldb\cf11 ADBG_DEBUG}{\v idx_adbg_debug}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_adbg_debug}}{\fldrslt }}{\cf1  }macro is defined, this macro prints the specified string resource as a warning message. If the ADBG_DEBUG macro is not defined, no action takes place. \line   
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Description
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 HINSTANCE\tab An instance of the module whose executable contains a string resource to be used as the print format string.
\par STRINGID\tab The ID of the resource string.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab None. 
\par \tab {\b\f12\fs18 Availability}\tab This function is available at design time and run time.
\par \tab {\b\f12\fs18 Comments}\tab The function {\uldb\cf11 ADbgPrint}{\v idx_adbg_print}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_adbg_print}}{\fldrslt }}{\cf1  }prints the message to a debugging terminal or window.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_adbg_print_w}{\*\bkmkend idx_adbg_print_w}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_adbg_print_w}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ADBG_PRINT_W}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch88:0065}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ADBG_PRINT_W}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_appware_bus_macros')')}} ADBG_PRINT_W
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab ADBG_PRINT_W(string)
\par \tab {\b\f12\fs18 Description}\tab If the {\uldb\cf11 ADBG_DEBUG}{\v idx_adbg_debug}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_adbg_debug}}{\fldrslt }}{\cf1  }macro is defined, this macro prints the specified string as a warning message. If the ADBG_DEBUG macro is not defined, no action takes place. \line   
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Description
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 string\tab The warning message to be printed. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab None. 
\par \tab {\b\f12\fs18 Availability}\tab This function is available at design time and run time.
\par \tab {\b\f12\fs18 Comments}\tab The function {\uldb\cf11 ADbgPrint}{\v idx_adbg_print}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_adbg_print}}{\fldrslt }}{\cf1  }prints the message to a debugging terminal or window.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_n2_appware_bus_f}{\*\bkmkend idx_n2_appware_bus_f}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_n2_appware_bus_functions}}{
\caps\fs16\up6  }{\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} BUSAPIS:0020}} {\caps\fs16\up6 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AppWare Bus Functions}} {\caps\fs16\up6 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AppWare Bus Functions}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_appware_bus_apis')')}} AppWare Bus Functions
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\f7\fs22 
\par }\pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The remainder of this chapter contains descriptions of the AppWare Bus functions. Entries are arranged alphabetically.
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 AAppConvertOSTime}{\v idx_aappconvertostime}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 gotobutton idx_aappconvertostim}}{\fldrslt }}
\par {\uldb\cf11 AAppGetIcon}{\v idx_aappgeticon}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobut}{\cf6 ton DoJump <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 gotobutton idx_aappgeticon}
}{\fldrslt }}
\par {\uldb\cf11 AAppGetPriorityMode}{\v idx_aappgetprioritymode}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
gotobutton idx_aappgetprioritym}}{\fldrslt }}
\par {\uldb\cf11 AAppGetTime}{\v idx_aappgettime}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aappgettime}}{\fldrslt }}
\par {\uldb\cf11 AAppIsDesignTime}{\v idx_aappisdesigntime}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aappisdesigntime}}{\fldrslt }}
\par {\uldb\cf11 AAppPostShutdown}{\v idx_aapppostshutdown}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aapppostshutdown}}{\fldrslt }}
\par {\uldb\cf11 AAppSave}{\v idx_aappsave}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aappsave}}{\fldrslt }}
\par {\uldb\cf11 AAppSetPriorityMode}{\v idx_aappsetprioritymode}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aappsetprioritym}}{\fldrslt }}

\par {\uldb\cf11 ADbgPrint}{\v idx_adbgprint}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_adbgprint}}{\fldrslt }}
\par {\uldb\cf11 ADbgPrintRes}{\v idx_adbgprintres}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_adbgprintres}}{\fldrslt }}
\par {\uldb\cf11 AEvtCallMethod}{\v idx_aevtcallmethod}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobu}{\cf6 tton idx_aevtcallmethod}}{\fldrslt }}

\par {\uldb\cf11 AEvtCheckForMethod}{\v idx_aevtcheckformethod}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aevtcheckformeth}}{\fldrslt }}

\par {\uldb\cf11 AEvtGetObjectChangedPriority}{\v idx_aevtgetobjectchangedpriority}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_aevtgetobjectcha}}{\fldrslt }}
\par {\uldb\cf11 AEvtPost}{\v idx_aevtpost}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aevtpost}}{\fldrslt }}
\par {\uldb\cf11 AEvtPostSignalAtMark}{\v idx_aevtpostsignalatmark}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aevtpostsignalat}
}{\fldrslt }}
\par {\uldb\cf11 AEvtPostSignalAtTail}{\v idx_n1_aevtpostsignalattail}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_n1_aevtpostsigna}
}{\fldrslt }}
\par {\uldb\cf11 AEvtPostStandard}{\v idx_aevtpoststandard}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aevtpoststandard}}{\fldrslt }}
\par {\uldb\cf11 AFuncGetOutput}{\v idx_afuncgetoutput}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_afuncgetoutput}}{\fldrslt }}
\par {\uldb\cf11 AFuncGetParameter}{\v idx_afuncgetparameter}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_afuncgetparamete}}{\fldrslt }}

\par {\uldb\cf11 AFuncGetTypedParameter}{\v idx_a}{\v funcgettypedparameter}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_afuncgettypedpar}
}{\fldrslt }}
\par {\uldb\cf11 AFuncReportResult}{\v idx_afuncreportresult}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_afuncreportresul}}{\fldrslt }}

\par {\uldb\cf11 AFuncSetParameter}{\v idx_afuncsetparameter}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_afuncsetparamete}}{\fldrslt }}

\par {\uldb\cf11 AMemAllocate}{\v idx_amemallocate}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_amemallocate}}{\fldrslt }}
\par {\uldb\cf11 AMemFree}{\v idx_amemfree}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton Do}{\cf6 Jump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_amemfree}}{\fldrslt }}
\par {\uldb\cf11 AMemGetSize}{\v idx_amemgetsize}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_amemgetsize}}{\fldrslt }}
\par {\uldb\cf11 AMemLock}{\v idx_amemlock}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_amemlock}}{\fldrslt }}
\par {\uldb\cf11 AMemSetSize}{\v idx_amemsetsize}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_amemsetsize}}{\fldrslt }}
\par {\uldb\cf11 AMemUnlock}{\v idx_amemunlock}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_amemunlock}}{\fldrslt }}
\par {\uldb\cf11 AObjAddData}{\v idx_aobjadddata}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+}{\cf6 >}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjadddata}}{\fldrslt }}
\par {\uldb\cf11 AObjAddRequiredFiles}{\v idx_aobjaddrequiredfiles}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjaddrequiredf}
}{\fldrslt }}{\cf1 
\par }{\uldb\cf11 AObjAssign}{\v idx_aobjassign}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjassign}}{\fldrslt }}
\par {\uldb\cf11 AObjCheckType}{\v idx_aobjchecktype}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjchecktype}}{\fldrslt }}
\par {\uldb\cf11 AObjConvertFromText}{\v idx_aobjconvertfromtext}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjconvertfromt}}{\fldrslt }}

\par {\uldb\cf11 AObjConvertToText}{\v idx_aobjconverttotext}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjconverttotex}}{\fldrslt }}{
\cf6 
\par }{\uldb\cf11 AObjCopyDatas}{\v idx_aobjcopydatas}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjcopydatas}}{\fldrslt }}{\cf1 
\par }{\uldb\cf11 AObjCreate}{\v idx_aobjcreate}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjcreate}}{\fldrslt }}
\par {\uldb\cf11 AObjCreateWithProtocol}{\v idx_aobjcreatewithprotocol}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjcreatewithpr}
}{\fldrslt }}
\par {\uldb\cf11 AObjDeleteData}{\v idx_aobjdeletedata}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutt}{\cf6 on DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjdeletedata}}{\fldrslt }}

\par {\uldb\cf11 AObjDestroy}{\v idx_aobjdestroy}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjdestroy}}{\fldrslt }}
\par {\uldb\cf11 AObjEdit}{\v idx_aobjedit}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjedit}}{\fldrslt }}
\par {\uldb\cf11 AObjGetDataCount}{\v idx_aobjgetdatacount}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjgetdatacount}}{\fldrslt }}
\par {\uldb\cf11 AObjGetDataSize}{\v idx_aobjgetdatasize}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjgetdatasize}}{\fldrslt }}
\par {\uldb\cf11 AObjGetName}{\v idx_aobjgetname}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjgetname}}{\fldrslt }}
\par {\uldb\cf11 AObjGetNextObject}{\v idx_aobjgetnextobject}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjgetnextobjec}}{\fldrslt }}

\par {\uldb\cf11 AObjGetNextOwner}{\v idx_aobjgetnextowner}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjgetnextowner}}{\fldrslt }}
\par {\uldb\cf11 AObjGetObjectCount}{\v idx_aobjgetobjectcount}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjgetobjectcou}}{\fldrslt }}

\par {\uldb\cf11 AObjGetRuntimeInfo}{\v idx_aobjgetruntimeinfo}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton}{\cf6  DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjgetruntimein}
}{\fldrslt }}
\par {\uldb\cf11 AObjGetType}{\v idx_aobjgettype}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjgettype}}{\fldrslt }}
\par {\uldb\cf11 AObjInsertData}{\v idx_aobjinsertdata}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjinsertdata}}{\fldrslt }}
\par {\uldb\cf11 AObjLockData}{\v idx_aobjlockdata}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjlockdata}}{\fldrslt }}
\par {\uldb\cf11 AObjQueryProtocol}{\v idx_aobjqueryprotocol}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjqueryprotoco}}{\fldrslt }}

\par {\uldb\cf11 AObjReadDatas}{\v idx_aob}{\v jreaddatas}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjreaddatas}}{\fldrslt }}{\cf1 

\par }{\uldb\cf11 AObjRegisterOwner}{\v idx_aobjregisterowner}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjregisterowne}}{\fldrslt }}

\par {\uldb\cf11 AObjReportError}{\v idx_aobjreporterror}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjreporterror}}{\fldrslt }}
\par {\uldb\cf11 AObjResizeData}{\v idx_aobjresizedata}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjresizedata}}{\fldrslt }}
\par {\uldb\cf11 AObjRestoreDatas}{\v idx_aobjrestoredatas}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton}{\cf6  DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjrestoredatas}}{\fldrslt }}
{\cf1 
\par }{\uldb\cf11 AObjSetDataCount}{\v idx_aobjsetdatacount}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjsetdatacount}}{\fldrslt }}

\par {\uldb\cf11 AObjSetData}{\v idx_aobjsetdata}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjsetdata}}{\fldrslt }}
\par {\uldb\cf11 AObjSetName}{\v idx_aobjsetname}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjsetname}}{\fldrslt }}
\par {\uldb\cf11 AObjSetRuntimeInfo}{\v idx_aobjsetruntimeinfo}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjsetruntimein}}{\fldrslt }}

\par {\uldb\cf11 AObjUnlockData}{\v i}{\v dx_aobjunlockdata}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjunlockdata}}{\fldrslt }}
\par {\uldb\cf11 AObjUnregisterOwner}{\v idx_aobjunregisterowner}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjunregisterow}}{\fldrslt }}

\par {\uldb\cf11 AObjValidateID}{\v idx_aobjvalidateid}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aobjvalidateid}}{\fldrslt }}
\par {\uldb\cf11 AObjWriteDatas}{\v idx_aobjwritedatas}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjwritedatas}}{\fldrslt }}{\cf1 
\par }{\uldb\cf11 ATypeAddData}{\v idx_atypeadddata}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutto}{\cf6 n DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_atypeadddata}}{\fldrslt }}
\par {\uldb\cf11 ATypeDeleteData}{\v idx_atypedeletedata}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_atypedeletedata}}{\fldrslt }}
\par {\uldb\cf11 ATypeGetCountCfg}{\v idx_atypegetcountcfg}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_atypegetcountcfg}}{\fldrslt }}
\par {\uldb\cf11 ATypeGetCount}{\v idx_atypegetcount}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_atypegetcount}}{\fldrslt }}
\par {\uldb\cf11 ATypeGetDataCount}{\v idx_atypegetdatacount}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_atypegetdatacoun}}{\fldrslt }}

\par {\uldb\cf11 AT}{\uldb\cf11 ypeGetDataSize}{\v idx_atypegetdatasize}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_atypegetdatasize}
}{\fldrslt }}
\par {\uldb\cf11 ATypeGetIcon}{\v idx_atypegeticon}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_atypegeticon}}{\fldrslt }}
\par {\uldb\cf11 ATypeGetName}{\v idx_atypegetname}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_atypegetname}}{\fldrslt }}
\par {\uldb\cf11 ATypeGetNextCfg}{\v idx_atypegetnextcfg}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_atypegetnextcfg}}{\fldrslt }}
\par {\uldb\cf11 ATypeGetNext}{\v idx_atypegetnext}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton }{\cf6 DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_atypegetnext}}{\fldrslt }}
\par {\uldb\cf11 ATypeGetRuntimeInfo}{\v idx_atypegetruntimeinfo}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_atypegetruntimei}}{\fldrslt }}

\par {\uldb\cf11 ATypeInsertData}{\v idx_atypeinsertdata}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_atypeinsertdata}}{\fldrslt }}
\par {\uldb\cf11 ATypeLockData}{\v idx_atypelockdata}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_atypelockdata}}{\fldrslt }}
\par {\uldb\cf11 ATypeQueryProtocol}{\v idx_atypequeryprotocol}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_atypequeryproto}{\cf6 c}
}{\fldrslt }}
\par {\uldb\cf11 ATypeResizeData}{\v idx_atyperesizedata}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_atyperesizedata}}{\fldrslt }}
\par {\uldb\cf11 ATypeSetDataCount}{\v idx_atypesetdatacount}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_atypesetdatacoun}}{\fldrslt }}

\par {\uldb\cf11 ATypeSetData}{\v idx_atypesetdata}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_atypesetdata}}{\fldrslt }}
\par {\uldb\cf11 ATypeSetRuntimeInfo}{\v idx_atypesetruntimeinfo}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_atypesetruntimei}}{\fldrslt }}

\par {\uldb\cf11 ATypeUnlockData}{\v idx_atypeunlockdata}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_atypeunlockdata}}{\fldrslt }}
\par {\uldb\cf11 AUpsfCloseScope}{\v idx_aupsfclosescope}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aupsfclosescope}}{\fldrslt }}
\par {\uldb\cf11 AUpsfCreateScope}{\v idx_aupsfcreatescope}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aupsfcreatescope}}{\fldrslt }}
\par {\uldb\cf11 AUpsfExportField}{\v idx_aupsfexportfield}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aupsfexportfield}}{\fldrslt }}
\par {\uldb\cf11 AUpsfFieldCount}{\v idx_aupsffieldcount}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aupsffieldcount}}{\fldrslt }}
\par {\uldb\cf11 AUpsfFieldInfo}{\v idx_aupsffieldinfo}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aupsffieldinfo}}{\fldrslt }}
\par {\uldb\cf11 AUpsfImportField}{\v idx_aupsfimportfield}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aupsfimportfield}}{\fldrslt }}
\par {\uldb\cf11 AUpsfLogComment}{\v idx_aupsflogcomment}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aupsflogcomment}}{\fldrslt }}
\par {\uldb\cf11 AUpsfOpenScope}{\v idx_aupsfopenscope}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_aupsfopenscope}}{\fldrslt }}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aappconvertostim}{\*\bkmkend idx_aappconvertostim}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aappconvertostime}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AAppConvertOSTime}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0005}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AAppConvertOSTime}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} AAppC
onvertOSTime
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab LONG AAppConvertOSTime(osTime)
\par \tab {\b\f12\fs18 Description}\tab This function translates the specified tick count (milliseconds) into the corresponding AppWare event time (sixtieths of a second). \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 osTime\tab LONG\tab The tick count to be translated. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab The return value is the AppWare time for the specified operating-system time. 
\par  \tab {\b\f12\fs18 Availability}\tab This function is available at run time.
\par \tab {\b\f12\fs18 Comments}\tab None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aappgeticon}{\*\bkmkend idx_aappgeticon}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aappgeticon}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AAppGetIcon}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0010}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AAppGetIcon}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} AAppGetIcon
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab HICON AAppGetIcon(void)
\par \tab {\b\f12\fs18 Descriptio}{\b\f12\fs18 n}\tab This function retrieves an HICON for the application icon. It has no parameters.
\par \tab {\b\f12\fs18 Return Value}\tab The return value is the HICON for the application icon.
\par \tab {\b\f12\fs18 Availability}\tab This function is available at both design and run time. 
\par \tab {\b\f12\fs18 Comments}\tab None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aappgetprioritym}{\*\bkmkend idx_aappgetprioritym}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aappgetprioritymode}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AAppGetPriorityMode}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0015}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AAppGetPriorityMode}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} AAppGetPriorityMode
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab LONG AAppGetPriorityMode(void)
\par \tab {\b\f12\fs18 Description}\tab This function retrieves the current priority mode of the application. The priority mode determines how {\uldb\cf11 AEVENT_OBJECTCHANGED}{\v idx_aevent_objectchanged}{\field{\*\fldinst {\cf1 macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton}{\cf6  DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevent_objectcha}}{\fldrslt }}{\cf1  }events should be posted to the AppWare Bus event queue.
\par \tab {\b\f12\fs18 Return Value}\tab The return value is the current application priority mode. 
\par \tab {\b\f12\fs18 Availability}\tab This function is available at run time. 
\par \tab {\b\f12\fs18 Comments}\tab For a complete list of application priority modes, refer to {\uldb\cf11 AAppSetPriorityMode}{\v idx_aappsetprioritymode}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aappsetprioritym}}{\fldrslt }}{\cf1 .}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aappgettime}{\*\bkmkend idx_aappgettime}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aappgettime}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AAppGetTime}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0020}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AAppGetTime}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} AAppGetTime
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab LONG AAppGetTime(void)
\par \tab {\b\f12\fs18 Description}\tab This function returns the elapsed time, in units of one-sixtieth of a second, since the system was booted. It has no parameters. 
\par \tab {\b\f12\fs18 Return Value}\tab The return value is the elapsed time since the system was booted. 
\par \tab {\b\f12\fs18 Availability}\tab This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments}\tab None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aappisdesigntime}{\*\bkmkend idx_aappisdesigntime}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aappisdesigntime}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AAppIsDesignTime}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0025}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AAppIsDesignTime}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}}
 AAppIsDesignTime
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab BOOL AAppIsDesignTime(void)
\par \tab {\b\f12\fs18 Description}\tab This function determines whether a project is in design time or run time. It has no parameters. 
\par \tab {\b\f12\fs18 Return Value}\tab The return value equals one of the following constants. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab Meaning
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 TRUE\tab The project is in design time.
\par FALSE\tab The project is in run time.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Availability}\tab This function is available at both design and at run time. 
\par \tab {\b\f12\fs18 Comments}\tab If this function is called from an executing {\uldb\cf11 AppWare application}{\v idx_appware_bus_applications}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_appware_bus_appl}}{\fldrslt }}{\cf1 ,} it always returns FALSE.
\par 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aapppostshutdown}{\*\bkmkend idx_aapppostshutdown}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aapppostshutdown}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AAppPostShutdown}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0030}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AAppPostShutdown}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}}
 AAppPostShutdown
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab void AAppPostShutdown(fFlush);
\par \tab {\b\f12\fs18 Description}\tab This function shuts down the application. When an object in the application calls this function, the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }posts the {\uldb\cf11 AEVENT_SHUTDOWN}{\v idx_aevent_shutdown}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevent_shutdown}}{\fldrslt }}{\cf1  }message at the tail of the event queue.\line   
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 fFlush\tab BOOL\tab Specifies whether the event queue should be flushed (fFlush == TRUE) before the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {
\cf1 macrobut}{\cf1 ton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }posts the shutdown message.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab None.
\par \tab {\b\f12\fs18 Availability}\tab This function is available at run time.
\par \tab {\b\f12\fs18 Comments}\tab If the parameter fFlush is TRUE, the event queue is flushed and the {\uldb\cf11 AEVENT_SHUTDOWN}{\v idx_aevent_shutdown}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevent_shutdown}}{\fldrslt }}{\cf1  }message is the only event left on the queue. If fFlush is FALSE, the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump}{\cf6  <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }processes the queue events before it shuts down the application.

\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aappsave}{\*\bkmkend idx_aappsave}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aappsave}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AAppSave}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0035}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AAppSave}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} AAppSave
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab BOOL AAppSave(void)
\par \tab {\b\f12\fs18 Description}\tab This function saves the current state of all of the application's persistent objects. It has no parameters.
\par \tab {\b\f12\fs18 Return Value}\tab The return value is TRUE if the function succeeds and FALSE if it fails.
\par \tab {\b\f12\fs18 Availability}\tab This function is available at run time.
\par \tab {\b\f12\fs18 Comments}\tab When this function is called from an application that is running under AppWare, it does nothing except return TRUE.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aappsetprioritym}{\*\bkmkend idx_aappsetprioritym}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aappsetprioritymode}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AAppSetPriorityMode}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0040}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AAppSetPriorityMode}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} AAppSetPriorityMode
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab LONG AAppSetPriorityMode(theMode)
\par \tab {\b\f12\fs18 Description}\tab This function sets the application's current priority mode. The current priority mode determines how {\uldb\cf11 AEVENT_OBJECTCHANGED}{\v idx_aevent_objectchanged}{\field{\*\fldinst {\cf1 macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevent_objectcha}}{\fldrslt }}{\cf1  }events should be posted to the AppWare Bus event queue.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 theMode\tab LONG\tab The new application priority mode. This parameter can be any one of the following values. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab \tab Meaning
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 AAPP_OBJECTPRIORITY\tab The priority that is specified by the object is used to post {\uldb\cf11 AEVENT_OBJECTCHANGED}{\v idx_aevent_objectchanged}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevent_objectcha}}{\fldrslt }}{\cf1 .} This is the default priority mode. 
\par AAPP_VISUALPRIORITY\tab The at-mark priority is used to post {\uldb\cf11 AEVENT_OBJECTCHANGED}{\v idx_aevent_objectchanged}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf1 gotobutton idx_aevent_objectcha}}{\fldrslt }}{\cf1 .} 
\par AAPP_FUNCTIONPRIORITY\tab The at-tail priority is used to post {\uldb\cf11 AEVENT_OBJECTCHANGED}{\v idx_aevent_objectchanged}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}
}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevent_objectcha}}{\fldrslt }}{\cf1 .} 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab 
If the application priority mode was set successfully, the return value is the old priority mode. If theMode is invalid, the return value is zero. 
\par \tab {\b\f12\fs18 Availability}\tab This function is available at run time. 
\par \tab {\b\f12\fs18 Comments}\tab None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_adbgprint}{\*\bkmkend idx_adbgprint}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_adbgprint}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ADbgPrint}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0045}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ADbgPrint}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} ADbgPrint
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab short ADbgPrint(level, typeID, pszFmt, ...)
\par \tab {\b\f12\fs18 Description}\tab If debugging software is running, this function prints the given message to a debugging terminal. The message format is: 
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab <module> <errcode>:  <message>
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The values for <module> and <errcode> are derived from the parameters.
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 level\tab short\tab The print log's debugging level: ADBG_E_INFO, ADBG_E_WARNING, or ADBG_E_ERROR.
\par typeID\tab TYPEID\tab The object type associated with the message.
\par pszFmt\tab LPSTR \tab A pointer to the printf format string.
\par {\b ...}\tab va_list\tab A variable argument list that includes the parameters needed by the printf format string.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab The return value for this function is always zero. 
\par \tab {\b\f12\fs18 Availability}\tab This function is available at design time and run time.
\par \tab {\b\f12\fs18 Comments}\tab None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_adbgprintres}{\*\bkmkend idx_adbgprintres}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_adbgprintres}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ADbgPrintRes}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0050}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ADbgPrintRes}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} ADbgPrintRes
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab short ADbgPrintRes(level, typeID, hInst, idRes, ...)
\par \tab {\b\f12\fs18 Description}\tab If debugging software is running, this function prints the specified resource string to a debugging terminal. The message format is: 
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab <module> <errcode>:  <message>
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The <module> and the <errcode> values are both derived from the paramete
rs. The function expects the module name to be the module's first (zero)  string resource.
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 level\tab short\tab The print log's level. (ADBG_E_INFO, ADBG_E_WARNING, or ADBG_E_ERROR)
\par typeID\tab TYPEID\tab The object type  associated with the message.
\par hInst\tab HINSTANCE\tab An instance of the module that  contains the printf format string resource to be used.
\par idRes\tab WORD\tab The integer resource ID of the string to be loaded from the module.
\par {\b ...}\tab va_list\tab A variable argument list that includes the parameters needed by the printf format string.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab The return value for this function is always zero. 
\par \tab {\b\f12\fs18 Availability}\tab This function is available at design time and run time.
\par \tab {\b\f12\fs18 Comments}\tab None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aevtcallmethod}{\*\bkmkend idx_aevtcallmethod}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aevtcallmethod}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AEvtCallMethod}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0055}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AEvtCallMethod}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} AEvtCallMethod

\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab BOOL AEvtCallMethod(sourceObject, targetObject, targetType, event, details)
\par \tab {\b\f12\fs18 Description}\tab This function makes a direct call to the event handler of the object type specified by the targetObject or the targetType parameter. The event parameter specifies the handler to be invoked. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 sourceObject\tab OBJECTID\tab The calling object. The value of this parameter is passed to the handler in the sourceObject field of the {\uldb\cf11 AEvtInfo}{\v 
idx_aevtinfo}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevtinfo}}{\fldrslt }}{\cf1  }structure.
\par targetObject\tab OBJECTID\tab An object of a type that responds to the specified event. If this parameter is zero, the targetType has to be nonzero. The value of this parameter is passed to the handler in the TargetObject field of the {\uldb\cf11 AEvtInfo
}{\v idx_aevtinfo}{\field{\*\fldinst {\cf1 ma}{\cf1 crobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevtinfo}}{\fldrslt }}{\cf1  }structure.
\par targetType\tab TYPEID\tab An object type that responds to the specified event. If this parameter is zero, the targetObject has to be nonzero. 
\par event\tab EVENTID\tab The event whose handler is to be called. 
\par details\tab LONG\tab Thirty-two bits of event-specific data. The value of this parameter is passed to the handler in the details field of the {\uldb\cf11 AEvtInfo}{\v idx_aevtinfo}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevtinfo}}{\fldrslt }}{\cf1  }structure.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab If the handler was called successfully, the return value is TRUE. Otherwise, the return value is FALSE.
\par \tab {\b\f12\fs18 Availability}\tab This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments}\tab 
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\fs16\cf5 \{bmc rr.bmp\}\tab }
If the object type of a nonzero targetObject does not match the targetType, and the targetType is nonzero, this function returns FALSE instead of calling a handler. 
\par {\fs16\cf5 \{bmc rr.bmp\}\tab }At least one of the two target parameters (targetObject and targetType) has to be nonzero. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aevtcheckformeth}{\*\bkmkend idx_aevtcheckformeth}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aevtcheckformethod}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AEvtCheckForMethod}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0060}} {\plain \f3\fs16\cf2\up6\lang1033 
K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AEvtCheckForMethod}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}}
 AEvtCheckForMethod
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab BOOL AEvtCheckForMethod(theType, event)
\par \tab {\b\f12\fs18 Description}\tab This function determines whether an object type has a defined handler for a given event. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 theType\tab TYPEID\tab The object type to be tested. 
\par event\tab EVENTID\tab The event to be tested. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab The return value is TRUE if an event handler has been defined, and is FALSE otherwise. 
\par \tab {\b\f12\fs18 Availability}\tab This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments}\tab None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aevtgetobjectcha}{\*\bkmkend idx_aevtgetobjectcha}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_aevtgetobjectchangedpriority}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AEvtGetObjectChangedPriority}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +}
 ch89:0065}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AEvtGetObjectChangedPriority}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} AEvtGetObjectChangedPriority
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab LONG AEvtGetObjectChangedPriority(preferred)
\par \tab {\b\f12\fs18 Description}\tab This function calculates the correct priority to be used for posting an {\uldb\cf11 AEVENT_OBJECTCHANGED}{\v idx_aevent_objectchanged}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevent_objectcha}}{\fldrslt }}{\cf1  }event. The calculation is based on the current application priority mode.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 preferred\tab LONG\tab The preferred event-posting priority before consideration of the application priority mode. Duplicate event removal should be 
specified in this parameter.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab 
Based on the application priority mode that is in effect when this function is invoked and the specified preferred priority, the return value is the correct priority to use for posting an {\uldb\cf11 AEVENT_OBJECTCHANGED}{\v idx_aevent_objectchanged}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevent_objectcha}}{\fldrslt }}{\cf1  }event. 
\par \tab {\b\f12\fs18 Availability}\tab This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments}\tab None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aevtpost}{\*\bkmkend idx_aevtpost}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aevtpost}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AEvtPost}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0070}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AEvtPost}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} AEvtPost
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab BOOL AEvtPost(theEvent)
\par \tab {\b\f12\fs18 D}{\b\f12\fs18 escription}\tab This function places the specified event on the AppWare Bus event queue. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 theEvent\tab pAEvtInfo\tab The event to be posted. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab 
The return value is TRUE if the event was posted and FALSE if the posting failed. Failure can occur if the pAEvtInfo structure has been initialized incorrectly.
\par \tab {\b\f12\fs18 Availability}\tab This function is available at run time. 
\par \tab {\b\f12\fs18 Comments}\tab None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aevtpostsignalat}{\*\bkmkend idx_aevtpostsignalat}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aevtpostsignalatmark}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AEvtPostSignalAtMark}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0075}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AEvtPostSignalAtMark}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} AEvtPostSignalAtMark
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab BOOL AEvtPostSignalAtMark(oiObject, signalID)
\par \tab {\b\f12\fs18 Description}\tab This function posts a signal event into the event queue with the AEVT_ATMARK posting priority. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiObject\tab OBJECTID\tab The object that generates the signal. 
\par signalID\tab LONG\tab The ID of the signal to be generated. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab The return value is TRUE if the signal was posted and FALSE if the posting failed. 
\par \tab {\b\f12\fs18 Availability}\tab This function is available at run time. 
\par \tab {\b\f12\fs18 Comments}\tab {\uldb\cf11 Chapter 4}{\v idx_chapter_4}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_chapter_4}
}{\fldrslt }}{\cf1  }contains more information about event posting.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_n1_aevtpostsigna}{\*\bkmkend idx_n1_aevtpostsigna}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_n1_aevtpostsignalattail
}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AEvtPostSignalAtTail}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0080}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AEvtPostSignalAtTail}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} AEvtPostSignalAtTail
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab BOOL AEvtPostSignalAtTail(oiObject, signalID)
\par \tab {\b\f12\fs18 Description}\tab This function posts a signal event into the event queue with the AEVT_ATTAIL posting priority. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiObject\tab OBJECTID\tab The object that generates the signal. 
\par signalID\tab LONG\tab The ID of the signal to be generated. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab The return value is TRUE if the signal was posted and FALSE if the posting failed. 
\par \tab {\b\f12\fs18 Availability}\tab This function is available at run time. 
\par \tab {\b\f12\fs18 Comments}\tab {\uldb\cf11 Chapter 4}{\v idx_chapter_4}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_chapter_4}
}{\fldrslt }}{\cf1  }contains more information about event posting.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aevtpoststandard}{\*\bkmkend idx_aevtpoststandard}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aevtpoststandard}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AEvtPostStandard}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0085}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AEvtPostStandard}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}}
 AEvtPostStandard
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab BOOL AEvtPostStandard(oiObject, what, details, how)
\par \tab {\b\f12\fs18 Description}\tab This function generates an event according to the specified parameters and places the event on the event queue. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiObject\tab OBJECTID\tab The event's target object. The value of this parameter is used for both the targetObject and the sourceObject fields of the {\uldb\cf11 AEvtInfo}{
\v idx_aevtinfo}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevtinfo}}{\fldrslt }}{\cf1  }structure. 
\par what\tab EVENTID\tab The event to be sent. The value of this parameter is used for the what field of the {\uldb\cf11 AEvtInfo}{\v idx_aevtinfo}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevtinfo}}{\fldrslt }}{\cf1  }structure.
\par details\tab LONG\tab Thirty-two bits of event-specific data. The value of this parameter is used for the details field of the {\uldb\cf11 AEvtInfo}{\v idx_aevtinfo}{\field{\*\fldinst {\cf1 macrobutton Next}{\cf1 Field }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevtinfo}}{\fldrslt }}{\cf1  }structure.
\par how\tab LONG\tab The posting protocol and modifiers.  The value of this parameter is used for the how field of the {\uldb\cf11 AEvtInfo}{\v idx_aevtinfo}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevtinfo}}{\fldrslt }}{\cf1  }structure.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab The return value is TRUE if the event was posted and FALSE if the posting failed. 
\par \tab {\b\f12\fs18 Availability}\tab This function is available at run time. 
\par \tab {\b\f12\fs18 Comment}\tab {\uldb\cf11 Chapter 4}{\v idx_chapter_4}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <}{\cf6 +>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_chapter_4}}{\fldrslt }}{\cf1  }contains more information about event posting.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_afuncgetoutput}{\*\bkmkend idx_afuncgetoutput}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_afuncgetoutput}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AFuncGetOutput}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0090}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AFuncGetOutput}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} AFuncGetOutput

\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab OBJECTID AFuncGetOutput(parameterIndex, theType)
\par \tab {\b\f12\fs18 Description}\tab This function retrieves an output parameter and the parameter's object type for the currently executing ALM function. You should then set the object's data to whatever the output should contain. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 parameterIndex
\par \tab LONG\tab The one-based index of the parameter to be retrieved.
\par theType\tab LPTYPEID\tab Returns with the object type of the specified parameter. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab 
The return value is the object ID of the specified parameter. If the parameter index is out of range, or if the parameter is not connected to an object or to an input parameter, the return value is zero. For outputs that are connected to one or more {
\uldb\cf11 input parameters}{\v idx_input_parameters}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_input_parameters}}{\fldrslt }}{
\cf1 ,} the return value is the ID of a temporary object.
\par {\b\f12\fs18 \tab Availability}\tab This function is available at run time. 
\par \tab {\b\f12\fs18 Comments
\par }\pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \{bmc rr.bmp\} This function eliminates the need to create temporary objects for {\uldb\cf11 output parameters}{\v idx_output_parameters}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_output_parameter}}{\fldrslt }}{\cf1 .}
 Therefore, it is not necessary that you call AFuncSetParameter when you use this function. The user of this function has to check the returned object type in order to be sure that the type is correct. 
\par \{bmc rr.bmp\}\tab When you already have an object, such as an input parameter or some other object ID, you should call AFuncSetParameter to set it as the output. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_afuncgetparamete}{\*\bkmkend idx_afuncgetparamete}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_afuncgetparameter}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AFuncGetParameter}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0095}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AFuncGetParameter}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}}
 AFuncGetParameter
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab OBJECTID AFuncGetParameter(paramIndex)
\par \tab {\b\f12\fs18 Description}\tab This function retrieves an input parameter for the currently executing ALM function. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 paramIndex\tab LONG\tab The one-based index of the parameter to be retrieved. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab 
The return value is the object ID of the specified parameter. If the parameter index is out of range, or if the parameter is not connected to an object or object parameter, the return value is zero. 
\par \tab {\b\f12\fs18 Availability}\tab This function is available at run time. 
\par \tab {\b\f12\fs18 Comments}\tab This function should only be called from the routine or routines that implement an ALM function. No type coercion is performed by this call. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_afuncgettypedpar}{\*\bkmkend idx_afuncgettypedpar}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_afuncgettypedparameter}
} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AFuncGetTypedParameter}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0100}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AFuncGetTypedParameter}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} AFuncGetTypedParameter
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab OBJECTID AFuncGetTypedParameter(parameterIndex, theType)
\par \tab {\b\f12\fs18 Description}\tab This function retrieves an input parameter of the specified type for the currently executing ALM function.\line  
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 parameterIndex
\par \tab LONG\tab The one-based index of the parameter to be retrieved. 
\par theType\tab TYPEID\tab The object type for the retrieved parameter.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab 
The return value is the object ID of the specified parameter. It is zero if the index is out of range, the parameter is not connected to an object or an output parameter, or the parameter could not be converted to the specified object type.
\par \tab {\b\f12\fs18 Availability}\tab This function is available at run time. 
\par \tab {\b\f12\fs18 Comments}\tab If the object type of the parameter do
es not match the value of theType, the text-interchange protocol creates a temporary object of the specified type. The ID of the temporary object is returned by the function. If either the type at the parameter or the specified type does not support the t
ext-interchange protocol, the function returns zero.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_afuncreportresul}{\*\bkmkend idx_afuncreportresul}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_afuncreportresult}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AFuncReportResult}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0105}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AFuncReportResult}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}}
 AFuncReportResult
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab BOOL AFuncReportResult(pMessage, flowIndex, theError)
\par \tab {\b\f12\fs18 Description}\tab This function is the preferred way to set the fields of the Object Message structure so that it reports the results generated by an ALM function. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pMessage\tab pAObjMessage
\par \tab \tab The address of the Object Message structure. 
\par flowIndex\tab LONG\tab The one-based index of the flow to pursue after the current function returns. 
\par theError\tab LPSTR\tab The address of a null-terminated error string. The string should be no longer than 256 bytes, including the terminating null character.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab The return value is TRUE if the system record was updated properly and FALSE if an error occurs. 
\par \tab {\b\f12\fs18 Availability}\tab This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments}\tab 
This function can be called multiple times before the administration function returns. If flowIndex is zero, the message1 field is unchanged. If theError is NULL, or if it points to a zero-length string, the error message is unchanged. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_afuncsetparamete}{\*\bkmkend idx_afuncsetparamete}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_afuncsetparameter}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AFuncSetParameter}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0110}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AFuncSetParameter}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}}
 AFuncSetParameter
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab BOOL AFuncSetParameter(paramIndex, oiObject)
\par \tab {\b\f12\fs18 Description}\tab This function sets the specified output parameter for the current ALM function. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 paramIndex\tab LONG\tab The parameter to be set. 
\par oiObject\tab OBJECTID\tab The object that stores the output parameter. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab The return value is nonzero if the set parameter function worked and is zero otherwise. 
\par \tab {\b\f12\fs18 Availability}\tab This function is available at run time. 
\par \tab {\b\f12\fs18 Comments}\tab After temporary objects have been passed in a call to AFuncSetParameter, they should not be accessed again.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_amemallocate}{\*\bkmkend idx_amemallocate}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_amemallocate}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AMemAllocate}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0115}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AMemAllocate}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} AMemAllocate
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab MEMBLOCKID AMemAllocate(numBytes)
\par \tab {\b\f12\fs18 Description}\tab This function allocates a memory block of the specified size. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 numBytes\tab LONG\tab The number of bytes to be allocated. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab The return value is the ID for the new memory block. If there is an error, the return value is zero. 
\par \tab {\b\f12\fs18 Availability}\tab This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments}\tab None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_amemfree}{\*\bkmkend idx_amemfree}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_amemfree}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AMemFree}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0120}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AMemFree}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} AMemFree
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab BOOL AMemFree(theBlock) 
\par \tab {\b\f12\fs18 Description}\tab This function releases the specified memory block. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 theBlock\tab MEMBLOCKID\tab The memory block. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab 
The return value is TRUE if the specified memory block is freed. If the memory block is not freed, it is FALSE. 
\par \tab {\b\f12\fs18 Availability}\tab This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments}\tab The specified memory block ID becomes invalid after this function has been called.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_amemgetsize}{\*\bkmkend idx_amemgetsize}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_amemgetsize}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AMemGetSize}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0125}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AMemGetSize}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} AMemGetSize
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab LONG AMemGetSize(theBlock) 
\par \tab {\b\f12\fs18 Description}\tab This function returns the size of the specified memory block. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 theBlock\tab MEMBLOCKID\tab The memory block.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Va}{\b\f12\fs18 lue}\tab The return value is the size in bytes of the specified memory block. It is \endash 
1 if the given ID is invalid. 
\par \tab {\b\f12\fs18 Availability}\tab This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments}\tab None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\fs16\up6 {\*\bkmkstart idx_amemlock}{\*\bkmkend idx_amemlock}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_amemlock}} {\fs16\up6 ${\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 $} AMemLock}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0130}} {\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AMemLock}} {\fs16\up6 !{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} AMemLock
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab LPVOID AMemLock(theBlock) 
\par \tab {\b\f12\fs18 Description}\tab This function retrieves a pointer to the specified memory block's data.\line  
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 theBlock\tab MEMBLOCKID\tab The memory block. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab The return value is the address of the specified memory block. If there is an error 
because of something such as an invalid ID, the return value is NULL. 
\par \tab {\b\f12\fs18 Availability}\tab This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments}\tab None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_amemsetsize}{\*\bkmkend idx_amemsetsize}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_amemsetsize}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AMemSetSize}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0135}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AMemSetSize}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} AMemSetSize
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab BOOL AMemSetSize(theBlock, numBytes) 
\par \tab {\b\f12\fs18 Description}\tab This function resizes the specified memory block. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 theBlock\tab MEMBLOCKID\tab The memory block. 
\par numBytes\tab LONG\tab The new size of the memory block, in  bytes. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab The return value is TRUE if the specified memory block was resized. If 
the resize failed, the resize value is FALSE. 
\par \tab {\b\f12\fs18 Availability}\tab This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments}\tab If the memory block's size increases, the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
retains all existing data. Beyond the existing data, the new memory is not initialized. If the size decreases, the AppWare Bus retains all data up to the new size. If you want to avoid having large amounts of data copied unnecess
arily, first call AMemSetSize with numBytes equal to zero, then call AMemSetSize with numBytes equal to the desired size.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_amemunlock}{\*\bkmkend idx_amemunlock}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_amemunlock}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AMemUnlock}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0140}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AMemUnlock}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} AMemUnlock
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab BOOL AMemUnlock(theBlock) 
\par \tab {\b\f12\fs18 Description}\tab This function decrements the lock count of the specified memory block.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 theBlock\tab MEMBLOCKID\tab The memory block to be unlocked. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Values}\tab 
The return value is TRUE if the function succeeds and FALSE if it fails. If the lock count is already zero, the function returns FALSE.
\par \tab {\b\f12\fs18 Availabi}{\b\f12\fs18 lity}\tab This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments}\tab You should make a call to AMemUnlock for each call you make to {\uldb\cf11 AMemLock}{\v idx_amemlock}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}
}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_amemlock}}{\fldrslt }}{\cf1 .} After a call to AMemUnlock, the pointer returned by the corresponding AMemLock call should not be used. 
\par 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aobjadddata}{\*\bkmkend idx_aobjadddata}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobjadddata}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AObjAddData}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0145}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AObjAddData}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} AObjAddData
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Syntax}\tab BOOL AObjAddData(oiObject, theData, dataSize) 
\par {\b\f12\fs18 \tab Description}\tab This function creates a new object data block. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiObject\tab OBJECTID\tab The object where the data block is to be added. 
\par theData\tab LPVOID\tab The address of initialization data for the data block. If this parameter is NULL, the data block will not be initialized. 
\par dataSize\tab LONG\tab The number of bytes in the new data block. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Return Value}\tab The return value is TRUE if the function succeeds and FALSE if it fails.
\par {\b\f12\fs18 \tab Availability}\tab This function is available at design time and run time. 
\par {\b\f12\fs18 \tab Comments}\tab The new object data block is added to the end of the array of existing data blocks. The index of the new block is one less than the new total number of data blocks on the object. 
\par 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\up6\lang1033 {\*\bkmkstart idx_aobjaddrequiredf}{\*\bkmkend idx_aobjaddrequiredf}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobjaddrequiredfiles}}
{\plain \f3\fs16\up6\lang1033  +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0147}} {\plain \f3\fs16\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AObjAddRequiredFiles}} {\plain \f3\fs16\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AObjAddRequiredFiles}} {\plain \f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}}
 AObjAddRequiredFiles{\pard\plain \s2\sb240\sa120\keepn \b\v\f3\fs36\cf2\lang1033 {\tc {\v AObjAddRequiredFiles}}}
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Syntax}\tab BOOL AObjAddRequiredFile(pMessage, fileName)
\par {\b\f12\fs18 \tab Description}\tab This function reports implicit files to AppWare.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pMessage\tab pAObjMessage
\par \tab \tab The system-record pointer that the object received from its administration function. This record should not be modified.
\par filename\tab LPSTR\tab The address of the name of the implicit file. It should be no longer than the length of a standard DOS filename.\line 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Return Value}\tab The return value is TRUE if the file was added to the required list and FALSE otherwise. 
\par {\b\f12\fs18 \tab Availability}\tab This function is available at design time.
\par {\b\f12\fs18 \tab Comments}\tab This function should be called when an object type\rquote s administration function  receives an {\uldb\cf11 AOBJ_REPORTREQUIREDFILES}{\v idx_aobj_reportrequiredfiles}{\field{\*\fldinst {\cf1 macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_reportrequi}}{\fldrslt }}{\cf1  }message.  The DOS file name pointed to by "filename" is in the form XXXXXXXX.DLL.
\par 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aobjassign}{\*\bkmkend idx_aobjassign}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobjassign}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AObjAssign}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0150}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AObjAssign}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} AObjAssign
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Syntax}\tab BOOL AObjAssign(fromObject, toObject) 
\par {\b\f12\fs18 \tab Description}\tab This function assigns one object to another object. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 fromObject\tab OBJECTID\tab The object to be assigned. 
\par toObject\tab OBJECTID\tab The object where fromObject is assigned.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Return Value}\tab 
The return value is TRUE if the assignment succeeds and FALSE if there is an error. Possible errors include passing an invalid object ID or assigning across types that do not support the text-interchange protocol. 
\par {\b\f12\fs18 \tab Availability}\tab This function is available at run time. 
\par {\b\f12\fs18 \tab Comments}\tab 
If the objects are of different data types, this function uses the text-interchange protocol to perform the assignment. If one or both of the objects do not support the text-interchange protocol, the function fails and returns FALSE. If the objects are o
f the same type, the {\uldb\cf11 AOBJ_ASSIGNOBJECT}{\v idx_aobj_assignobject}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_aobj_assignobjec}}{\fldrslt }}{\cf1  }message is sent to the administration function so that the function will perform the assignment. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aobjchecktype}{\*\bkmkend idx_aobjchecktype}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobjchecktype}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AObjCheckType}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0155}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AObjCheckType}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} AObjCheckType
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Syntax}\tab BOOL AObjCheckType(oiObject, theType) 
\par {\b\f12\fs18 \tab Description}\tab This function determines whether an object is of the specified type and whether the object ID is valid. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiObject\tab OBJECTID\tab The object to be tested. 
\par theType\tab TYPEID\tab The specified object type. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Return Value}\tab The return value is FALSE if oiObject is not of the specified object type or if the object ID is invalid. 

\par {\b\f12\fs18 \tab Availability}\tab This function is available at design time and run time. 
\par {\b\f12\fs18 \tab Comments}\tab Use this call to ensure that the input or {\uldb\cf11 output parameters}{\v idx_output_parameters}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}
}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_output_parameter}}{\fldrslt }}{\cf1  }for your ALM function are of the type that is expected by your code. If theType is zero, the function only checks the validity of oiObject.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aobjconvertfromt}{\*\bkmkend idx_aobjconvertfromt}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobjconvertfromtext}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AObjConvertFromText}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0160}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AObjConvertFromText}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} AObjConvertFromText
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Syntax}\tab BOOL AObjConvertFromText(oiObject, theText) 
\par {\b\f12\fs18 \tab Comments}\tab This function uses text-interchange protocol to translate the text string in the specified memory block into the specified object. \line  
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiObject\tab OBJECTID\tab The object to be translated. 
\par theText\tab MEMBLOCKID\tab The handle of the memory block that contains the {\caps null}-terminated string to be assigned to the specified object.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Return Value}\tab 
The return value is FALSE if this call fails. If an error occurs, it is probably because the specified object does not support the text-interchange protocol. The return value is TRUE if the translation occurred. 
\par {\b\f12\fs18 \tab Availability}\tab This function is available at run time.
\par {\b\f12\fs18 \tab Comments}\tab This function causes the AEVENT_TEXTTOOBJECT event to be sent directly to the specified object.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aobjconverttotex}{\*\bkmkend idx_aobjconverttotex}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobjconverttotext}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AObjConvertToText}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0165}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AObjConvertToText}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}}
 AObjConvertToText
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Syntax}\tab BOOL AObjConvertToText(oiObject, theText) 
\par {\b\f12\fs18 \tab Description}\tab This function uses the text-interchange protocol to get a text-string version of the specified object's value. The text value is returned in the specified memBlock. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiObject\tab OBJECTID\tab The object to be translated. 
\par theText\tab MEMBLOCKID\tab The handle of the memory block where the text version of the object is to be stored. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Return Value}\tab 
The return value is FALSE if this call fails. If the call fails, it was probably because the specified object does not support the text-interchange protocol. The return value is TRUE if the translation occurred. 
\par {\b\f12\fs18 \tab Availability}\tab This function is available at run time.
\par {\b\f12\fs18 \tab Comments}\tab This function causes the {\uldb\cf11 AEVENT_OBJECTTOTEXT}{\v idx_aevent_objecttotext}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf1 gotobutton idx_aevent_objecttot}}{\fldrslt }}{\cf1  }event to be sent directly to the specified object.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\up6\lang1033 {\*\bkmkstart idx_aobjcopydatas}{\*\bkmkend idx_aobjcopydatas}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobjcopydatas}}{\plain 
\f3\fs16\up6\lang1033  +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0167}} {\plain \f3\fs16\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AObjCopyDatas}} {\plain \f3\fs16\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AObjCopyDatas}} {\plain \f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} AObjCopyDatas
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab BOOL AObjCopyDatas(oiObject, memBlck)
\par \tab {\b\f12\fs18 Description}\tab This function copies the specified object's data blocks into consecutive data blocks in memory.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiObject\tab OBJECTID \tab The object that owns the data blocks to be copied. 
\par memBlck\tab MEMBLOCKID\tab The zero-based index of the data block where the object's data will be copied. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Valu}{\b\f12\fs18 e}\tab 
If the function succeeds, the return value is TRUE. The return value is FALSE if the object's data cannot be copied.
\par \tab {\b\f12\fs18 Availability}\tab This function is available at run time. 
\par \tab {\b\f12\fs18 Comments}\tab None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 {\plain \f3\fs16\cf2\up6\lang1033 \page {\*\bkmkstart idx_aobjcreate}{\*\bkmkend idx_aobjcreate}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobjcreate}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AObjCreate}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0170}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AObjCreate}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} AObjCreate
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Syntax}\tab OBJECTID AObjCreate(theType) 
\par {\b\f12\fs18 \tab Description}\tab This function creates an object of the specified type. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 theType\tab TYPEID\tab The object type of the new object. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Return Value}\tab The return value is the ID of the newly created object. If the specified type is invalid, th
e return value is zero. 
\par {\b\f12\fs18 \tab Availability}\tab This function is available at design time and run time. 
\par {\b\f12\fs18 \tab Comments}\tab 
Objects that have been created by the AObjCreate function at run time are destroyed when the application terminates execution. Objects that have been created at design time persist and are placed in AppWare's currently active group.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aobjcreatewithpr}{\*\bkmkend idx_aobjcreatewithpr}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobjcreatewithprotocol}
} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AObjCreateWithProtocol}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0175}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AObjCreateWithProtocol}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} AObjCreateWithProtocol
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Syntax}\tab OBJECTID AObjCreateWithProtocol(theType, theProtocol)
\par {\b\f12\fs18 \tab Description}\tab This function creates an object of a given type that supports the given protocol.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 theType\tab TYPEID\tab The object type.
\par protocolID\tab PROTOCOLID\tab The protocol ID for the object to be created.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Return Value}\tab 
The return value equals the object ID of the newly created object. If the function fails, the return value is zero. The function fails if the type is invalid or if the type does not support the requested protocol.
\par {\b\f12\fs18 \tab Availability}\tab This function is available at run time.
\par {\b\f12\fs18 \tab Comments}\tab Objects that have been created by the AObjCreateWithProtocol fu
nction at run time are destroyed when the application terminates execution. Objects that have been created at design time persist and are placed in AppWare's currently active group.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aobjdeletedata}{\*\bkmkend idx_aobjdeletedata}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobjdeletedata}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AObjDeleteData}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0180}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AObjDeleteData}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} AObjDeleteData

\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Syntax}\tab BOOL AObjDeleteData(oiObject, dataIndex) 
\par {\b\f12\fs18 \tab Description}\tab This function deletes a data block from an object's data-block array and frees the associated memory. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiObject\tab OBJECTID\tab The object ID. 
\par dataIndex\tab LONG\tab The zero-based index of the data block to be deleted. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Return Value}\tab 
The return value is TRUE if the specified data block was deleted. If there was an error, the return value is FALSE. An error could be caused by something such as a dataIndex that is out of bounds or a nonzero lock count on the data block. 
\par {\b\f12\fs18 \tab Availability}\tab This function is available at design time and run time. 
\par {\b\f12\fs18 \tab Comments}\tab The specified data block becomes inaccessible and the number of data blocks for the object is reduced by one. Any pointers into the removed data block are invalid. The indice
s of data blocks that are beyond the deleted block are decremented by one.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aobjdestroy}{\*\bkmkend idx_aobjdestroy}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobjdestroy}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AObjDestroy}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0185}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AObjDestroy}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} AObjDestroy
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Syntax}\tab BOOL AObjDestroy(oiObject) 
\par {\b\f12\fs18 \tab Description}\tab This function destroys the specified temporary object. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiObject\tab OBJECTID\tab The object to be destroyed. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Return Value}\tab The return value is TRUE if the object is destroyed; otherwise, the return value is FALSE. 
\par {\b\f12\fs18 \tab Availability}\tab This function is available at design time and run time. 
\par {\b\f12\fs18 \tab Comments}\tab If AObjDestroy is called at run time, oiObject has to be an object that was created by a runtime call to {\uldb\cf11 AObjCreate}{\v idx_aobjcreate}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjcreate}}{\fldrslt }}{\cf1 .} If it was not, the function returns FALSE.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aobjedit}{\*\bkmkend idx_aobjedit}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobjedit}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AObjEdit}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0190}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AObjEdit}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} AObjEdit
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Syntax}\tab LONG AObjEdit(oiObject) 
\par {\b\f12\fs18 \tab Description}\tab This function causes the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }to send the {\uldb\cf11 AOBJ_EDITOBJECT}{\v idx_aobj_editobject}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 go}{\cf1 tobutton idx_aobj_editobject}}{\fldrslt }}{\cf1  }
message to the administration function of the specified object. This function allows the editing function of one object to invoke the editing function of a second object. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiObject\tab OBJECTID\tab The object to be edited. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Return Value}\tab The return value is any one of the possible return values that can be sent from the administration routine. 

\par {\b\f12\fs18 \tab Availability}\tab This function is available at design time. 
\par \tab {\b\f12\fs18 Comments}\tab None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aobjgetdatacount}{\*\bkmkend idx_aobjgetdatacount}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobjgetdatacount}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AObjGetDataCount}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0195}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AObjGetDataCount}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}}
 AObjGetDataCount
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Synta}{\b\f12\fs18 x}\tab LONG AObjGetDataCount(oiObject) 
\par {\b\f12\fs18 \tab Description}\tab This function retrieves the number of data blocks in the object's data-block array. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiObject\tab OBJECTID\tab An object ID. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Return Value}\tab 
The return value specifies the number of data blocks in the object's data-block array. If there is no data block, or if there is an error, it returns zero.
\par {\b\f12\fs18 \tab Availability}\tab This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments}\tab None. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aobjgetdatasize}{\*\bkmkend idx_aobjgetdatasize}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobjgetdatasize}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AObjGetDataSize}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0200}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AObjGetDataSize}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}}
 AObjGetDataSize
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Syntax}\tab LONG AObjGetDataSize(oiObject, dataIndex) 
\par {\b\f12\fs18 \tab Description}\tab This function retrieves the current size, in bytes, of the specified object data block. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiObject\tab OBJECTID\tab The object that owns the data block. 
\par dataIndex\tab LONG\tab The index of the data block. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Return Value}\tab 
The return value specifies the size, in bytes, of the specified data block. If the specified data-block index or the object ID is invalid, the return value is \endash 1. 
\par {\b\f12\fs18 \tab Availability}\tab This function is available at design time and at run time. 
\par \tab {\b\f12\fs18 Comments}\tab None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aobjgetname}{\*\bkmkend idx_aobjgetname}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobjgetname}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AObjGetName}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0205}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AObjGetName}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} AObjGetName
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Syntax}\tab LONG AObjGetName(oiObject, theName, nameSize) 
\par {\b\f12\fs18 \tab Description}\tab This function retrieves the name of the specified object as it was entered in AppWare. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiObject\tab OBJECTID\tab The object whose name is to be retrieved. 
\par theName\tab LPSTR\tab The address of the buffer that is to receive the object's name. 
\par nameSize\tab LONG\tab The maximum number of characters that can be copied to the name buffer, including the null terminator. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Return Value}\tab The r
eturn value specifies the number of characters in the object's name, not including the terminating null character. If the buffer is not large enough to contain the entire name, it will contain as much of the name as can be stored in the nameSize field min
us one character, followed by a terminating null character. If an object has no name, or if any of AObjGetName's parameters are invalid, the return value is zero.
\par {\b\f12\fs18 \tab Availability}\tab This function is available at design time. 
\par \tab {\b\f12\fs18 Comments}\tab None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aobjgetnextobjec}{\*\bkmkend idx_aobjgetnextobjec}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobjgetnextobject}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AObjGetNextObject}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0210}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AObjGetNextObject}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} AObjGe
tNextObject
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Syntax}\tab OBJECTID AObjGetNextObject(theType, theGetKey) 
\par {\b\f12\fs18 \tab Description}\tab 
This function enumerates the real objects of a specified object type. On each call to this function, theGetKey is a pointer to a 32-bit key returned from a previous call to this function. To start the enumeration, set the 32-bit key to AOBJ_GETFIRSTKEY. 
\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 theType\tab TYPEID\tab An object type. 
\par theGetKey\tab LPLONG\tab The address of a 32-bit key field. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Return Value}\tab The return value specifies the next real ob
ject of the specified type. It is zero if the key is invalid or if the last object of the specified type has been enumerated. 
\par {\b\f12\fs18 \tab Availability}\tab This function is available at design time and run time. 
\par {\b\f12\fs18 \tab Comments}\tab At design time, the enumerated objects are from the current subject. They include alias and dummy alias objects.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aobjgetnextowner}{\*\bkmkend idx_aobjgetnextowner}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobjgetnextowner}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AObjGetNextOwner}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0215}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AObjGetNextOwner}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}}
 AObjGetNextOwner
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Syntax}\tab BOOL AObjGetNextOwner(ownerType, ownedObject, pNextOwnerInfo) 
\par {\b\f12\fs18 \tab Description}\tab This function retrieves information about the next owner of a given object from a list of objects who have registered ownership of that object.\line  
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 ownerType\tab TYPEID\tab The type of owner whose information is to be retrieved.  
\par ownedObject
\par \tab OBJECTID\tab The object whose owner is to be retrieved. 
\par pNextOwnerInfo
\par \tab pAObjOwnerInfo
\par \tab \tab The address of the {\uldb\cf11 AObjOwnerInfo}{\v idx_aobjownerinfo}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_aobjownerinfo}}{\fldrslt }}{\cf1  }structure that is filled in by this function with information about the owner of interest.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Return Valu}{\b\f12\fs18 e}\tab The return value is TRUE if the function succeeds and FALSE if it fails.
\par {\b\f12\fs18 \tab Availability}\tab This function is available at run time. 
\par {\b\f12\fs18 \tab Comments}\tab This function can be used to iterate through all registered owners of the given object.  The key field in the {\uldb\cf11 AObjOwnerInfo}{\v idx_aobjownerinfo}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjownerinfo}}{\fldrslt }}{\cf1  }
structure has to be set to the value of AOBJ_GETFIRSTKEY in order to start with the object's first registered owner.  Refer to {\uldb\cf11 AObjRegisterOwner}{\v idx_aob}{\v jregisterowner}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjregisterowne}}{\fldrslt }}{\cf1  }and {\uldb\cf11 AObjUnregisterOwner}{\v idx_aobjunregisterowner}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjunregisterow}}{\fldrslt }}{\cf1  }for more information. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aobjgetobjectcou}{\*\bkmkend idx_aobjgetobjectcou}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobjgetobjectcount}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AObjGetObjectCount}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0220}} {\plain \f3\fs16\cf2\up6\lang1033 
K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AObjGetObjectCount}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}}
 AObjGetObjectCount
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Syntax}\tab LONG AObjGetObjectCount(theType) 
\par {\b\f12\fs18 \tab Description}\tab This function retrieves the current number of object instances for the specified type. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 theType\tab TYPEID\tab The object type to be counted. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Return Val}{\b\f12\fs18 ue}\tab 
The return value is the current number of object instances for the specified type. If the specified type is invalid, the return value is \endash 1. 
\par {\b\f12\fs18 \tab Availability}\tab This function is available at design time and run time. 
\par {\b\f12\fs18 \tab Comments}\tab At design time, the return value is the number of specified object instances in the current subject. It includes alias and dummy alias objects. At run time, the return value does not include temporary objects in the count.

\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aobjgetruntimein}{\*\bkmkend idx_aobjgetruntimein}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobjgetruntimeinfo}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AObjGetRuntimeInfo}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0225}} {\plain \f3\fs16\cf2\up6\lang1033 
K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AObjGetRuntimeInfo}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}}
 AObjGetRuntimeInfo
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Syntax}\tab LONG AObjGetRuntimeInfo(oiObject) 
\par {\b\f12\fs18 \tab Description}\tab This function returns a long value that was stored with the object at runtime by the {\uldb\cf11 AObjSetRuntimeInfo}{\v idx_aobjsetruntimeinfo}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjsetruntimein}}{\fldrslt }}{\cf1  }function.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiObject\tab OBJECTID\tab The object whose runtime information value is to be retrieved.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Return Value}\tab The return value is the value stored with the object by the {\uldb\cf11 AObjSetRuntimeInfo}{\v 
idx_aobjsetruntimeinfo}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJu}{\cf6 mp <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjsetruntimein}}{\fldrslt }}{\cf1  }
function. If no value is stored, the return value is zero.
\par {\b\f12\fs18 \tab Availability}\tab This function is available at design time and run time. 
\par {\b\f12\fs18 \tab Comments}\tab Although this function is available at both design and runtime, any value set at design time is {\i not }
available at runtime. The AppWare Bus initializes the value to zero at design time and run time. When a user returns to design time after running an application, any value associated with the object at design time is preserved.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aobjgettype}{\*\bkmkend idx_aobjgettype}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobjgettype}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AObjGetType}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0230}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AObjGetType}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} AObjGetType
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Syntax}\tab TYPEID AObjGetType(oiObject) 
\par {\b\f12\fs18 \tab Description}\tab This function retrieves the object type of the specified object. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiObject\tab OBJECTID\tab The object whose type is to be retrieved. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Return Value}\tab The return value identifies the object type. It is zero if the specified object ID is invalid. 
\par {\b\f12\fs18 \tab Availability}\tab This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments}\tab None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aobjinsertdata}{\*\bkmkend idx_aobjinsertdata}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobjinsertdata}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AObjInsertData}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0235}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AObjInsertData}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} AObjInsertData

\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Syntax}\tab BOOL AObjInsertData(oiObject, dataIndex, theData, dataSize) 
\par {\b\f12\fs18 \tab Description}\tab This function inserts a new data block in the object's data-block array at the specified index. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiObject\tab OBJECTID\tab The object where the data block is to be inserted. 
\par dataIndex\tab LONG\tab The zero-based index of the new data block. 
\par theData\tab LPVOID\tab The address of the location of the initialization data for the data block. If this parameter is NULL, the data block is not initialized. 
\par dataSize\tab LONG\tab The number of bytes in the new data block.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Return V}{\b\f12\fs18 alue}\tab The return value is TRUE if the function succeeds and FALSE if it fails.
\par {\b\f12\fs18 \tab Availability}\tab This function is available at design time and run time. 
\par {\b\f12\fs18 \tab Comments}\tab 
If AObjInsertData succeeds, the number of data blocks for the object is incremented by one. The new data block is inserted at the specified data index, which has to be between zero and the number of data blocks for the object, inclusive. The number of da
ta blocks can be determined by calling the {\uldb\cf11 AObjGetDataCount}{\v idx_aobjgetdatacount}{\field{\*\fldinst {\cf1 macrobutton NextF}{\cf1 ield }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {
\cf1 gotobutton idx_aobjgetdatacount}}{\fldrslt }}{\cf1  }function. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aobjlockdata}{\*\bkmkend idx_aobjlockdata}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobjlockdata}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AObjLockData}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0240}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AObjLockData}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} AObjLockData
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Syntax}\tab LPVOID AObjLockData(oiObject, dataIndex) 
\par {\b\f12\fs18 \tab Description}\tab This function retrieves a pointer to the specified object data block and increments the lock count for the data by one. The dataIndex parameter is zero based.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiObject\tab OBJECTID\tab The object that owns the data block to be retrieved. 
\par dataIndex\tab LONG\tab The zero-based index of the data block. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Return Value}\tab The return val
ue points to the first byte of memory in the data block if the function succeeds. If dataIndex is out of bounds or the specified data block has a size of zero, the return value is zero. 
\par {\b\f12\fs18 \tab Availability}\tab This function is available at design time and run time. 
\par {\b\f12\fs18 \tab Comments}\tab A locked data block has to be freed by {\uldb\cf11 AObjUnlockData}{\v idx_aobjunlockdata}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf1 gotobutton idx_aobjunlockdata}}{\fldrslt }}{\cf1  }before it can be resized or deleted.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aobjqueryprotoco}{\*\bkmkend idx_aobjqueryprotoco}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobjqueryprotocol}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AObjQueryProtocol}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0245}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AObjQueryProtocol}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}}
 AObjQueryProtocol
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Syntax}\tab {\caps long }AObjQueryProtocol(oiObject, queryInfo, protocolID) 
\par {\b\f12\fs18 \tab Description}\tab This function queries the specified object to determine whether the object supports the indicated protocol.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiObject\tab OBJECTID\tab The object to be queried for  protocol support.
\par queryInfo\tab pApQueryInfo
\par \tab \tab The address of an {\uldb\cf11 ApQueryInfo}{\v idx_apqueryinfo}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_apqueryinfo}
}{\fldrslt }}{\cf1  }structure. The use of this structure depends on the specific protocol.
\par protocolID\tab PROTOCOLID\tab The ID of the protocol whose support is to be determined.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Return Value}\tab 
The return value indicates what type of support, if any, is provided by the object for the indicated protocol. It can be equal to any valid combination of the bits describe below.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab Meaning
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 AP_NOTSUPPORTED\line The protocol is unsupported by the object.
\par AP_SUPPORTED\line The protocol is supported by the object.
\par AP_DYNAMIC\line The support or nonsupport of the protocol depends on the object's configuration. AP_DYNAMIC can be combined with either AP_NOTSUPPORTED or AP_SUPPORTED.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Availability}\tab This function is available at design time and run time. 
\par {\b\f12\fs18 \tab Comments}\tab This call sends an {\uldb\cf11 AOBJ_QUERYPROTOCOL}{\v idx_aobj_queryprotocol}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf1 gotobutton idx_aobj_queryprotoc}}{\fldrslt }}{\cf1  }message to the target object's administration function.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\up6\lang1033 {\*\bkmkstart idx_aobjreaddatas}{\*\bkmkend idx_aobjreaddatas}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobjreaddatas}}{\plain 
\f3\fs16\up6\lang1033  +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0247}} {\plain \f3\fs16\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AObjReadDatas}} {\plain \f3\fs16\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AObjReadDatas}} {\plain \f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} AObjReadDatas
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab BOOL AObjReadDatas(theObject, hFile)
\par \tab {\b\f12\fs18 Description}\tab This function reads the data blocks of the given object from a file.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiObject\tab OBJECTID\tab The object that owns the data blocks to be read from disk. 
\par hFile\tab int\tab Handle to the file containing the data blocks to be read. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab 
If the function succeeds, the return value is TRUE. The return value is FALSE if the object's data cannot be read.
\par \tab {\b\f12\fs18 Availability}\tab This function is available at run time. 
\par \tab {\b\f12\fs18 Comments}\tab None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 {\plain \f3\fs16\cf2\up6\lang1033 \page {\*\bkmkstart idx_aobjregisterowne}{\*\bkmkend idx_aobjregisterowne}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobjregisterowner}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AObjRegisterOwner}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0250}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AObjRegisterOwner}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}}
 AObjRegisterOwner
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Syntax}\tab BOOL AObjRegisterOwner(ownerObject, ownedObject, ownerData) 
\par {\b\f12\fs18 \tab Description}\tab This function registers one object as the owner of another object.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 ownerObject
\par \tab OBJECTID\tab The object to be assigned as an owner. 
\par ownedObject
\par \tab OBJECTID\tab The object to be owned. 
\par ownerData\tab LONG\tab A value to be stored with the ownership registration. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Return Value}\tab The return value is TRUE if the function succeeds and FALSE if it fails.
\par {\b\f12\fs18 \tab Availability}\tab This function is available at design time and run time. 
\par {\b\f12\fs18 \tab Comments}\tab This function stores owner data in the {\uldb\cf11 AObjOwnerInfo}{\v idx_aobjownerinfo}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf1 gotobutton}{\cf1  idx_aobjownerinfo}}{\fldrslt }}{\cf1  }structure, which can be retrieved when AObjGetNextOwner{\cf1  }is called.  Refer to {\uldb\cf11 AObjGetNextOwner}{\v idx_aobjgetnextowner}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjgetnextowner}}{\fldrslt }}{\cf1  }and {\uldb\cf11 AObjUnregisterOwner}{\v idx_aobjunregisterowner}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjunregisterow}}{\fldrslt }}{\cf1  }for more information.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aobjreporterror}{\*\bkmkend idx_aobjreporterror}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobjreporterror}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AObjReportError}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0255}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AObjReportError}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}}
 AObjReportError
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Syntax}\tab {\caps long }AObjReportError(oiObject, lMessage, lStatus, pszMessage, lInfo)
\par {\b\f12\fs18 \tab Description}\tab This function should be used to report errors that occur during the processing of administration function messages. The errors are reported to the user. It also allows a user to override error conditions. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiObject\tab OBJECTID\tab The object whose administration function error is to be reported.
\par lMessage\tab long\tab The administration function message that was being processed when the error occurred. 
\par lStatus\tab long\tab The error type. Its value is A_WARNING or A_ERROR. 
\par pszMessage\tab LPSTR\tab The address of the null terminated character string that is to be displayed as part of the error message. The value of this string depends on the administration function being processed.
\par lInfo\tab long\tab Additional information that is dependent on the administration function message that is being processed.
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The following table defines the values for the lStatus parameter.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab Meaning
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 A_WARNING\tab An unusual condition occurred, but execution can continue.
\par A_ERROR\tab An error occurred that will not allow execution to continue.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Return Value}\tab Thi
s function returns the error type that was passed in as the IStatus parameter unless the operator overrides an A_WARNING message. If the operator does override the message, then the function returns A_OK.
\par {\b\f12\fs18 \tab Availability}\tab This function is available at design time and run time. 
\par {\b\f12\fs18 \tab Comments
\par }\pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \{bmc rr.bmp\}\tab If the message being processed is {\uldb\cf11 AOBJ_READ}{\v idx_aobj_read}{\field{\*\fldinst {\cf1 macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_read}}{\fldrslt }}{\cf1 ,} the pszMessage parameter should contain the <type name> tab <DLL name> and the
 lInfo parameter should contain a version number for the DLL. The lInfo parameter is not used for other messages; the pszMessage parameter is the string to be displayed as an error or warning. 
\par \{bmc rr.bmp\}\tab 
This function should only be called while a message is being processed that can cause A_ERROR to be returned. It brings up a message box and waits for user input. If the error message type is an A_WARNING, the message box allows the user to c
ontinue by selecting OK or to abort processing by selecting Cancel. If the user selects OK, lStatus is changed to A_OK. 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aobjresizedata}{\*\bkmkend idx_aobjresizedata}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobjresizedata}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AObjResizeData}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0260}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AObjResizeData}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} AObjResizeData

\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Syntax}\tab BOOL AObjResizeData(oiObject, dataIndex, dataSize) 
\par {\b\f12\fs18 \tab Description}\tab This function resizes the specified data block. The lock count of the data block has to be zero or the function will fail. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiObject\tab OBJECTID\tab The object whose data block is to be manipulated. 
\par dataIndex\tab LONG\tab The zero-based index of the data block to be resized. 
\par dataSize\tab LONG\tab The new size, in bytes, of the data block. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Return Value}\tab The return value is TRUE if the function succeeds and FALSE if it fails.  
\par {\b\f12\fs18 \tab Availability}\tab This function is available at design time and run time. 
\par {\b\f12\fs18 \tab Comments}\tab 
If the data block's size increases, the ALM retains all previously existing data. If the size decreases, it retains all data up to the new size. Beyond the existing data, the new memory is not initialized. If you want to avoid having large amounts of dat
a copied unnecessarily, first call AObjResizeData with numBytes equal to zero, then call AObjResizeData with dataSize equal to the desired size.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\up6\lang1033 {\*\bkmkstart idx_aobjrestoredatas}{\*\bkmkend idx_aobjrestoredatas}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobjrestoredatas}}{\plain 
\f3\fs16\up6\lang1033  +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0262}} {\plain \f3\fs16\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AObjRestoreDatas}} {\plain \f3\fs16\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AObjRestoreDatas}} {\plain \f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}  EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} AObjRestoreDatas

\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab BOOL AObjRestoreDatas(theObject, memBlockPtr)
\par \tab {\b\f12\fs18 Description}\tab This function retrieves a pointer to the specified object type's data block and increments the data block's lock count.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiObject\tab OBJECTID \tab The object whose data blocks are to be restored. 
\par memBlockPtr
\par \tab LPVOID \tab A pointer to the memory block where the object's data has been restored. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab If the function suc
ceeds, the return value is TRUE. The return value is FALSE if the object's data cannot be restored.
\par \tab {\b\f12\fs18 Availability}\tab This function is available at run time. 
\par \tab {\b\f12\fs18 Comments}\tab None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aobjsetdata}{\*\bkmkend idx_aobjsetdata}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobjsetdata}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AObjSetData}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0265}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AObjSetData}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} AObjSetData
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Syntax}\tab BOOL AObjSetData(oiObject, dataIndex, theData, dataSize) 
\par {\b\f12\fs18 \tab Description}\tab This function changes the size and the data of an existing object data block.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiObject\tab OBJECTID\tab Identifies the object whose data block is to be manipulated. 
\par dataIndex\tab LONG\tab The zero-based index of the data block. 
\par theData\tab LPVOID\tab The address of the data block's initialization data. If this parameter is NULL, the data block is not initialized. 
\par dataSize\tab LONG\tab The number of bytes in the data block. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Return Value}\tab 
The return value is TRUE if the function succeeds and FALSE if it fails. The function fails if the data block's lock count is nonzero.
\par {\b\f12\fs18 \tab Availability}\tab This function is available at design time and run time.
\par {\b\f12\fs18 \tab Comments}\tab 
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \{bmc rr.bmp\}\tab If the value of  theData is zero, the value of the data block's first {\i n }bytes will remain unchanged, where {\i n}
 is the smaller of dataSize and the data block's previous size. 
\par \{bmc rr.bmp\}\tab Setting the data pointer to {\caps null }will {\i not }preserve any of the data in the data block.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aobjsetdatacount}{\*\bkmkend idx_aobjsetdatacount}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobjsetdatacount}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AObjSetDataCount}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0270}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AObjSetDataCount}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}}
 AObjSetDataCount
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Syntax}\tab BOOL AObjSetDataCount(oiObject, numDatas) 
\par {\b\f12\fs18 \tab Description}\tab This function sets the number of data blocks for the specified object. It can be used to increase or decrease the number of data blocks for an object.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiObject\tab OBJECTID\tab An object ID. 
\par numDatas\tab LONG\tab The number of data blocks to be associated with the object. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Return Value}\tab The return value is TRUE if the function succeeds and FALSE if it fails. 
\par {\b\f12\fs18 \tab Availability}\tab This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments}
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \{bmc rr.bmp\}\tab If the object already has some data blocks, the first {\i n} data blocks will remain unchanged. The variable {\i n}
 is the value for numDatas or the prior number of data blocks for this object, whichever is smaller.
\par \{bmc rr.bmp\}\tab If numDatas is less than the current number of data blocks, the lock count has to be zero for all of the data blocks that will be deleted.  
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aobjsetname}{\*\bkmkend idx_aobjsetname}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobjsetname}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AObjSetName}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0275}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AObjSetName}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} AObjSetName
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Syntax}\tab BOOL API AObjSetName(oiObject, newName)
\par {\b\f12\fs18 \tab Description}\tab This function sets the name of the given object.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiObject \tab OBJECTID\tab The object whose name is being set.
\par newName \tab LPSTR\tab A pointer to the string that contains the new name.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Return Value}\tab The return value equals one of the following constants.\line  
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab Meaning
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 TRUE\tab The function set the name successfully.
\par FALSE\tab The function failed.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Availability}\tab This function is available at design time. 
\par \tab Comments\tab None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aobjsetruntimein}{\*\bkmkend idx_aobjsetruntimein}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobjsetruntimeinfo}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AObjSetRuntimeInfo}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0280}} {\plain \f3\fs16\cf2\up6\lang1033 
K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AObjSetRuntimeInfo}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}}
 AObjSetRuntimeInfo
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Syntax}\tab {\caps long }AObjSetRuntimeInfo(oiObject, theData) 
\par {\b\f12\fs18 \tab Description}\tab This function allows a long, four-byte value to be stored with an object during execution. The value is not persistent; that is, it is not stored when the object is saved.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 OiObject\tab OBJECTID\tab The object where the specified value is to be stored.
\par theData\tab {\caps lo}{\caps ng\tab }The value to be stored with the object.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Return Value}\tab 
The return value is the value specified by theData if the function succeeds. Otherwise, the return value is zero.
\par {\b\f12\fs18 \tab Availability}\tab This function is available at design time and run time. 
\par {\b\f12\fs18 \tab Comments}\tab Although this function is available at both design and runtime, any value set at design time is {\i not }
available at runtime. The AppWare Bus initializes the value to zero at design time and run time. When a user returns to design time after running an application, any value associated with the type at design time is preserved.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aobjunlockdata}{\*\bkmkend idx_aobjunlockdata}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobjunlockdata}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AObjUnlockData}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0285}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AObjUnlockData}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} AObjUnlockData

\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Syntax}\tab BOOL AObjUnlockData(oiObject, dataIndex) 
\par {\b\f12\fs18 \tab Description}\tab This function decrements the lock count of the specified object data block.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiObject\tab OBJECTID\tab The object that owns the data block to be unlocked.
\par dataIndex\tab LONG\tab The  zero-based index of the data block. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Return Value}\tab The return value is TRUE if the function succeeds and FALSE if it fails.  If the lock count is already
 zero, the function returns FALSE.
\par {\b\f12\fs18 \tab Availability}\tab This function is available at design time and run time. 
\par {\b\f12\fs18 \tab Comments}\tab 
When a data block is created or read from disk, its lock count is set to zero. Each call to AObjLockData increments the data block's lock count by one. Each call to AObjUnlockData decrements the data block's lock count by one. A data block's lock count h
as to be zero before a data block can be resized or deleted. \tab 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aobjunregisterow}{\*\bkmkend idx_aobjunregisterow}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobjunregisterowner}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AObjUnregisterOwner}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0290}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AObjUnregisterOwner}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} AObjUnregisterOwner
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Syntax}\tab BOOL AObjUnregisterOwner(ownerObject, ownedObject, ownerData) 
\par {\b\f12\fs18 \tab Description}\tab This function unregisters the ownership of an object.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 ownerObject
\par \tab OBJECTID\tab The object to be unassigned as an owner. 
\par ownedObject
\par \tab OBJECTID\tab The object to be released from ownership. 
\par ownerData\tab LONG\tab A value that was stored with the ownership registration. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Return Value}\tab The return value is TRUE if the function succeeds and FALSE if it fails.
\par {\b\f12\fs18 \tab Availability}\tab This function is available at run time. 
\par {\b\f12\fs18 \tab Comments}\tab Refer to {\uldb\cf11 AObjGetNextOwner}{\v i}{\v dx_aobjgetnextowner}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {
\cf1 gotobutton idx_aobjgetnextowner}}{\fldrslt }}{\cf1  }and {\uldb\cf11 AObjRegisterOwner}{\v idx_aobjregisterowner}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf1 gotobutton idx_aobjregisterowne}}{\fldrslt }}{\cf1  }for more information.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aobjvalidateid}{\*\bkmkend idx_aobjvalidateid}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobjvalidateid}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AObjValidateID}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0295}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AObjValidateID}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} AObjValidateID

\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Syntax}\tab BOOL AObjValidateID(poiObject, pMessage) 
\par {\b\f12\fs18 \tab Description}\tab This function translates the specified object ID from a possibly out-of-date ID to a current ID. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 poiObject\tab LPOBJECTID\tab Address of the object ID. 
\par pMessage\tab pAObjMessage
\par \tab \tab Address of the message structure  that is passed in to this object definition routine. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Return Value}\tab The return value is nonzero if the object ID was actually modified. It is zero if no adjustment occurred. 

\par {\b\f12\fs18 \tab Availability}\tab This function is available at design time. 
\par {\b\f12\fs18 \tab Comments}\tab This function should be called for each object ID stored in an object's data structure when the object type's administration function receives an {\uldb\cf11 AOBJ_VALIDATEOBJECTIDS}{\v idx_aobj_validateobjectids}
{\field{\*\fldinst {\cf1 macrobut}{\cf1 ton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_validateobj}}{\fldrslt }}{\cf1  }message. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\up6\lang1033 {\*\bkmkstart idx_aobjwritedatas}{\*\bkmkend idx_aobjwritedatas}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aobjwritedatas}}{\plain 
\f3\fs16\up6\lang1033  +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0297}} {\plain \f3\fs16\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AObjWriteDatas}} {\plain \f3\fs16\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AObjWriteDatas}} {\plain \f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}  EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} AObjWriteDatas
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab BOOL AObjWriteDatas(oiObject, hFile)
\par \tab {\b\f12\fs18 Description}\tab This function writes the data blocks of the specified object to a file.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiObject\tab OBJECTID\tab The object that owns the data blocks to be written. 
\par hFile\tab int\tab Handle to the file where data blocks will be written. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab If the function succeeds, the return value is TRUE. The return value is FALSE if the obj
ect's data cannot be written.
\par \tab {\b\f12\fs18 Availability}\tab This function is available at run time. 
\par \tab {\b\f12\fs18 Comments}\tab None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_atypeadddata}{\*\bkmkend idx_atypeadddata}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_atypeadddata}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ATypeAddData}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0300}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ATypeAddData}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} ATypeAddData
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab BOOL ATypeAddData(theType, theData, dataSize) 
\par \tab {\b\f12\fs18 Description}\tab This function creates a new object-type data block. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 theType\tab TYPEID\tab The object type where the data block is to be added. 
\par theData\tab LPVOID\tab The address of the initialization data for the data block. If this parameter is zero, the data block will not be initialized. 
\par dataSize\tab LONG\tab The number of bytes in the new data block. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab The function returns TRUE if the data-block addition succeeds and FALSE if it fails. 
\par \tab {\b\f12\fs18 Availability}\tab This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments}\tab The new object data block is added to the end of the array of existing data blocks. The index of the new block is one less than the total number of data blocks for the object type. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_atypedeletedata}{\*\bkmkend idx_atypedeletedata}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_atypedeletedata}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ATypeDeleteData}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0305}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ATypeDeleteData}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} \tab 
ATypeDeleteData
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab BOOL ATypeDeleteData(theType, dataIndex) 
\par \tab {\b\f12\fs18 Description}\tab This function deletes a data block from an object type's data-block array and frees the associated memory. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 theType\tab TYPEID\tab The object type. 
\par dataIndex\tab LONG\tab The zero-based index of the data block to be deleted. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab 
The return value is TRUE if the specified data block was removed and is FALSE if there was an error. For example, there would be an error if the specified dataIndex were out of bounds or if there were a nonzero lock count on the data block. 
\par \tab {\b\f12\fs18 Availability}\tab This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments}\tab 
The specified data block becomes inaccessible and the number of data blocks for the object is reduced by one. Any pointers into the removed data block are invalid. Also, the indices of data blocks beyond the deleted block are decremented by one.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_atypegetcount}{\*\bkmkend idx_atypegetcount}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_atypegetcount}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ATypeGetCount}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0310}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ATypeGetCount}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} ATypeGetCount
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab LONG ATypeGetCount(void) 
\par \tab {\b\f12\fs18 Description}\tab This function retrieves the number of object types that are contained in the current subject or executable file. 
\par \tab {\b\f12\fs18 Return Value}\tab The return value is the number of object types that are contained in the current subject or executable file. 
\par \tab {\b\f12\fs18 Availability}\tab This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments}\tab At design time, the return value is the number of object types in the current subject. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_atypegetcountcfg}{\*\bkmkend idx_atypegetcountcfg}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_atypegetcountcfg}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ATypeGetCountCfg}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0315}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ATypeGetCountCfg}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}}
 ATypeGetCountCfg
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab LONG ATypeGetCountCfg(void)
\par \tab {\b\f12\fs18 Description}\tab This function gets the count of available object types in the currently loaded configuration files. It has no parameters. 
\par \tab {\b\f12\fs18 Return Value}\tab The return value equals the number of object types that are available  in the currently loaded configuration files. 
\par \tab {\b\f12\fs18 Availability}\tab This function is available at design time. 
\par \tab {\b\f12\fs18 Comments}\tab This function differs from {\uldb\cf11 ATypeGetCount}{\v idx_atypegetcount}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf1 gotobutton idx_atypegetcount}}{\fldrslt }}{\cf1  }in that it counts all possible objects that are available to the AppWare Bus. ATypeGetCount counts only the objects used in the current subject or executable file.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_atypegetdatacoun}{\*\bkmkend idx_atypegetdatacoun}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_atypegetdatacount}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ATypeGetDataCount}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0320}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ATypeGetDataCount}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}}
 ATypeGetDataCount
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab LONG ATypeGetDataCount(theType) 
\par \tab {\b\f12\fs18 Description}\tab This function retrieves the number of data blocks in the object type's data block array. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 theType\tab TYPEID\tab Identifies an object. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab The return value specifies the number of data blocks in the object type's data block array. 
\par \tab {\b\f12\fs18 Availability}\tab This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments}\tab None. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_atypegetdatasize}{\*\bkmkend idx_atypegetdatasize}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_atypegetdatasize}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ATypeGetDataSize}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0325}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ATypeGetDataSize}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}}
 ATypeGetDataSize
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab LONG ATypeGetDataSize(theType, dataIndex) 
\par \tab {\b\f12\fs18 Description}\tab This function retrieves the current size, in bytes, of the specified object type's data-block array. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 theType\tab TYPEID\tab The type that owns the data block. 
\par dataIndex\tab LONG\tab The index of the data block.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab 
The return value specifies the size, in bytes, of the specified data block. If the specified data block index is invalid, the return value is zero. 
\par \tab {\b\f12\fs18 Availability}\tab This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments}\tab None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_atypegeticon}{\*\bkmkend idx_atypegeticon}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_atypegeticon}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ATypeGetIcon}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0330}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ATypeGetIcon}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} ATypeGetIcon
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab HICON ATypeGetIcon(theType)
\par \tab {\b\f12\fs18 Description}\tab This function gets the icon associated with the given object type.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 theType\tab TYPEID\tab The object type.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab The return value is a Windows icon handle for the given type's icon.
\par \tab {\b\f12\fs18 Availability}\tab This function is available at run time. 
\par \tab {\b\f12\fs18 Comments}\tab None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_atypegetname}{\*\bkmkend idx_atypegetname}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_atypegetname}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ATypeGetName}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0335}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ATypeGetName}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} ATypeGetName
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab LONG ATypeGetName(theType, theName, nameSize) 
\par \tab {\b\f12\fs18 Description}\tab This function retrieves the name of the specified object type. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 theType\tab TYPEID\tab The object type. 
\par theName\tab LPSTR\tab The address of the buffer that is to store the object type's name. 
\par nameSize\tab LONG\tab Specifies the maximum number of characters that can be copied to the the name buffer, including the null terminator. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab 
The return value specifies the number of characters in the object type's name, not including the terminating null character. If the buffer is not large enough to contain the entire name, it contains as much of the name as can be stored in the nameSize fi
eld minus one character, followed by a terminating null character. 
\par \tab {\b\f12\fs18 Availability}\tab This function is available at design time. 
\par \tab {\b\f12\fs18 Comments}\tab None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_atypegetnext}{\*\bkmkend idx_atypegetnext}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_atypegetnext}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ATypeGetNext}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0340}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ATypeGetNext}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} ATypeGetNext
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab TYPEID ATypeGetNext(theGetKey) 
\par \tab {\b\f12\fs18 Description}\tab 
This function enumerates the object types used in the current subject or executable. On each call to this function, theGetKey is a pointer to a 32-bit key returned from a previous call to this function. To start the enumeration, set the key pointed to by
 theGetKey to AOBJ_GETFIRSTKEY. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 theGetKey\tab LPLONG\tab The address of a 32-bit key field. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab 
The return value specifies the next known object type. It is zero if the key pointed to by theGetKey is invalid or if the last known object type has been enumerated. 
\par \tab {\b\f12\fs18 Availability}\tab This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments}\tab At design time, the enumerated object types are from the current subject. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_atypegetnextcfg}{\*\bkmkend idx_atypegetnextcfg}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_atypegetnextcfg}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ATypeGetNextCfg}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0345}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ATypeGetNextCfg}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}}
 ATypeGetNextCfg
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab TYPEID ATypeGetNextCfg(theGetKey)
\par \tab {\b\f12\fs18 Description}\tab This function iterates through all available object types in the currently loaded configuration files.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 theGetKey\tab LPLONG \tab 
This parameter iterates through all object types. To begin at the start of the list of objects, set it to AOBJ_GETFIRSTKEY. If you want to make successive calls to the function once it starts, leave the parameter unchanged.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab The return value equals the type ID of the next object type.
\par \tab {\b\f12\fs18 Availability}\tab This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments}\tab This function differs from {\uldb\cf11 ATypeGetNext}{\v idx_atypegetnext}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst 
{\cf1 gotobutton idx_atypegetnext}}{\fldrslt }}{\cf1  }in that it iterates through all possible object types available to the AppWare Bus. ATypeGetNext only iterates through the object types used in the current subject or executable file.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_atypegetruntimei}{\*\bkmkend idx_atypegetruntimei}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_atypegetruntimeinfo}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ATypeGetRuntimeInfo}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0350}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ATypeGetRuntimeInfo}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} ATypeGetRuntimeInfo
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab LONG ATypeGetRuntimeInfo(theType)
\par \tab {\b\f12\fs18 Description}\tab This function retrieves runtime  information that is associated with the given object type.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 theType\tab TYPEID\tab The object type.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab 
The return value equals the runtime information that is stored with the given object type. If there is an error, the return value is zero.
\par \tab {\b\f12\fs18 Availability}\tab This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments}\tab None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_atypeinsertdata}{\*\bkmkend idx_atypeinsertdata}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_atypeinsertdata}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ATypeInsertData}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0355}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ATypeInsertData}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}}
 ATypeInsertData
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab BOOL ATypeInsertData(theType, dataIndex, theData, dataSize)
\par \tab {\b\f12\fs18 Description}\tab This function inserts a new data block in the specified type's data-block array.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 theType\tab TYPEID\tab The object type.
\par dataIndex\tab LONG\tab The  zero-based index of the new data block. 
\par theData\tab LPVOID\tab The address of the initialization data for the data block. If this parameter is NULL, the data block is not initialized.
\par dataSize\tab LONG\tab The number of bytes in the new data block.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab The return value equals one of the following constants. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab Meaning
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 TRUE\tab The function was completed successfully.
\par FALSE\tab The function failed.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Availability}\tab This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments}\tab If the function succeeds, the number of data blocks for the object is increased by one. The new data block is inserted at the specified data index, which has to be between zero and the current data-block count, inclusive.

\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_atypelockdata}{\*\bkmkend idx_atypelockdata}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_atypelockdata}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ATypeLockData}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0360}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ATypeLockData}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} ATypeLockData
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab LPVOID ATypeLockData(theType, dataIndex)
\par \tab {\b\f12\fs18 Description}\tab This function retrieves a pointer to the specified object type's data block and increments the data block's lock count.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 theType\tab TYPEID\tab The object type.
\par dataIndex\tab LONG\tab The zero-based index of the data block. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab 
If the function succeeds, the return value is a pointer to the first byte of memory in the data block. If dataIndex is out of bounds, or if the specified data block has a size of zero, the return value is zero.
\par \tab {\b\f12\fs18 Availability}\tab This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments}\tab Before a locked object-type data block can be resized or deleted, it has to be freed by {\uldb\cf11 ATypeUnlockData}{\v idx_atypeunlockdata}{\field{\*\fldinst {\cf1 mac}{\cf1 robutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_atypeunlockdata}}{\fldrslt }}{\cf1 .}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_atypequeryprotoc}{\*\bkmkend idx_atypequeryprotoc}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_atypequeryprotocol}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ATypeQueryProtocol}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0365}} {\plain \f3\fs16\cf2\up6\lang1033 
K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ATypeQueryProtocol}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}}
 ATypeQueryProtocol
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab {\caps long }ATypeQueryProtocol(theType, protocolID) 
\par \tab {\b\f12\fs18 Description}\tab This function queries the specified object type to determine whether it supports the specified protocol.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 theType\tab TYPEID\tab The object type to be queried for protocol support.
\par protocolID\tab PROTOCOLID\tab The ID of the protocol whose support is to be determined.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab The return value indicates what type
 of support, if any, is provided by the object type for the specified protocol. It can equal any valid combination of the bits describe below.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab \tab Meaning
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 AP_NOTSUPPORTED\tab The object type does not support the protocol. 
\par AP_DYNAMIC\tab \tab The value is combined with AP_SUPPORTED if the protocol support is dynamic in nature and depends on the state of individual objects. 
\par AP_SUPPORTED\tab The protocol is supported by the object type. If the support depends on the state of the individual objects, this value will e combined with AP_DYNAMIC.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Availability}\tab This function is available at design time and run time. 
\par {\b\f12\fs18 \tab Comments}\tab 
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \{bmc rr.bmp\}\tab If the return value includes AP_DYNAMIC, {\uldb\cf11 AObjQueryProtocol}{\v idx_aobjqueryprotocol}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjqueryprotoco}}{\fldrslt }}{\cf1  }should be used to query individual objects for protocol support. 

\par \{bmc rr.bmp\}\tab If an invalid type or protocol is passed to this function, the return value is AP_NOTSUPPORTED.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_atyperesizedata}{\*\bkmkend idx_atyperesizedata}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_atyperesizedata}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ATypeResizeData}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0370}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ATypeResizeData}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}}
 ATypeResizeData
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab BOOL ATypeResizeData(theType, dataIndex, dataSize) 
\par \tab {\b\f12\fs18 Description}\tab This function resizes the specified object type's data block. The lock count of the data block has to be zero or the function will fail. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 theType\tab TYPEID\tab The type that owns the data block.
\par dataIndex\tab LONG\tab The zero-based index of the data block to be resized. 
\par dataSize\tab LONG\tab The new data-block size, in bytes. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab The return value is TRUE if the function succeeds and FALSE if it fails. 
\par \tab {\b\f12\fs18 Availability}\tab This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments}\tab 
If the data block's size increases, the ALM retains all previously existing data. If the size decreases, it retains all data up to the new size. Beyond the existing data, the new memory is not initialized. If you want to avoid having large amounts of dat
a copied unnecessarily, first call {\uldb\cf11 AObjResizeData}{\v idx_aobjresizedata}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_aobjresizedata}}{\fldrslt }}{\cf1  }with a data size of zero, then call AObjResizeData with dataSize set to the desired value.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_atypesetdata}{\*\bkmkend idx_atypesetdata}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_atypesetdata}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ATypeSetData}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0375}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ATypeSetData}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} ATypeSetData
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab BOOL ATypeSetData(theType, dataIndex, theData, dataSize) 
\par \tab {\b\f12\fs18 Description}\tab This function changes the data and size of the specified data block. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 theType\tab TYPEID\tab The type that owns the data block. 
\par dataIndex\tab LONG\tab The zero-based index of the data block. 
\par theData\tab LPVOID\tab The address of initialization data for the data block. If this parameter is NULL, the data block is not initialized. 
\par dataSize\tab LONG\tab The number of bytes in the data block.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab 
The function returns TRUE if it succeeds. If dataIndex is out of bounds or an error occurs, the return value is FALSE. 
\par \tab {\b\f12\fs18 Availability}\tab This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments}\tab Setting theData pointer to NULL will {\i not }preserve any of the data in the data block. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_atypesetdatacoun}{\*\bkmkend idx_atypesetdatacoun}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_atypesetdatacount}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ATypeSetDataCount}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0380}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ATypeSetDataCount}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}}
 ATypeSetDataCount
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab LONG ATypeSetDataCount(theType, numDatas) 
\par \tab {\b\f12\fs18 Description}\tab This function sets the number of data blocks for the specified object type. It can be used to increase or decrease the number of data blocks for an object type.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 theType\tab TYPEID\tab The object type.
\par numDatas\tab LONG\tab The number of data blocks to be associated with the object type. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab The return value specifies the number of data blocks that are associated with the object type.
\par \tab {\b\f12\fs18 Availability}\tab This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments}\tab If the object type already has some data blocks, the first {\i n} data blocks will remain unchanged. The variable {\i n}
 is the value for numDatas or the prior number of data blocks for this object, whichever is smaller. If numDatas is less than the current number of data blocks, the lock count has to be zero for all of the data blocks that are to be deleted.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_atypesetruntimei}{\*\bkmkend idx_atypesetruntimei}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_atypesetruntimeinfo}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ATypeSetRuntimeInfo}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0385}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ATypeSetRuntimeInfo}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} ATypeSetRuntimeInfo
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab {\caps long }ATypeSetRuntimeInfo(theType, theData) 
\par \tab {\b\f12\fs18 Description}\tab This function allows a long, four-byte value to be stored with an object type during execution. The value is not persistent; that is, it is not stored with the type on disk.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 theType\tab TYPEID\tab The object type where the specified value is to be stored.
\par theData\tab {\caps long\tab }The stored value. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab 
The return value is the value specified by theData if the function succeeds. Otherwise, the return value is zero.
\par \tab {\b\f12\fs18 Availability}\tab This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments}\tab Although this function is available at both design and runtime, any value set at design time is {\i not }available at run time. The {\uldb\cf11 AppWare Bus}{\v idx_the_appware_}{\v bus}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
initializes the value to zero at design time and run time. When a user returns to design time after running an application, any value associated with the type at design time is preserved.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_atypeunlockdata}{\*\bkmkend idx_atypeunlockdata}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_atypeunlockdata}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ATypeUnlockData}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0390}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ATypeUnlockData}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}}
 ATypeUnlockData
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab BOOL ATypeUnlockData(theType, dataIndex) 
\par \tab {\b\f12\fs18 Description}\tab This function decrements the lock count for the specified type's data block.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 theType\tab TYPEID\tab The type that owns the data block to be unlocked. 
\par dataIndex\tab LONG\tab The zero-based index of the data block. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab 
The return value is TRUE if the function succeeds and FALSE if it fails. If the lock count for the data block is already zero, the function returns FALSE.
\par \tab {\b\f12\fs18 Availability}\tab This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments}\tab When a data block is created or read from disk, its lock count is set to zero. Each call to {\uldb\cf11 ATypeLockData}{\v idx_atypelockdata}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotob}{\cf1 utton idx_atypelockdata}}{\fldrslt }}{\cf1  }
increments the data block's lock count by one. Each call to ATypeUnlockData decrements the data block's lock count by one. A data block's lock count has to be zero before a data block can be resized or deleted. \tab \tab 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aupsfclosescope}{\*\bkmkend idx_aupsfclosescope}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aupsfclosescope}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AUpsfCloseScope}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0395}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AUpsfCloseScope}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}}
 AUpsfCloseScope
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab {\caps long }AUpsfCloseScope(void)
\par \tab {\b\f12\fs18 Description}\tab When your import or export code is finished importing or exporting a variable that opened or created a scope, it has to call this function in order to signal the end of a scope. The function has no parameters.
\par \tab {\b\f12\fs18 Return Value}\tab The return value equals one of the following constants:\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab \tab Condition
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 AUPSF_NOERROR\tab The function closed the current scope successfully.
\par AUPSF_SCOPEERROR\tab No scope is currently open.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Availability}\tab This function is available at design time.
\par \tab {\b\f12\fs18 Comments}\tab This function has to be called to signal the end of a scope. Scopes are like files in that scopes are created to write information, opened to read information, and closed when the scope is no longer needed.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aupsfcreatescope}{\*\bkmkend idx_aupsfcreatescope}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aupsfcreatescope}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AUpsfCreateScope}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0400}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AUpsfCreateScope}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} AUpsfC
reateScope
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab {\caps long }AUpsfCreateScope(scopeName, index)
\par \tab {\b\f12\fs18 Description}\tab 
This function creates a scope for private structures within an object. If an export function wants to keep a structure or record in one unit, it should call AUpsfCreateScope to make a new scope for storing the fields of the record. Use the scope's index 
parameter for arrays.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 scopeName\tab LPCSTR \tab Identifies the new scope.
\par index\tab LONG \tab The scope index.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab The return value equals one of the following constants.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab \tab Condition
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 AUPSF_NOERROR\tab The function created the new scope successfully.
\par AUPSF_SCOPEERROR\tab An error occurred while the scope was being created.
\par AUPSF_NOTEXPORTING\tab Creation of the scope failed because the project was not exporting.
\par AUPSF_EXPORTERROR\tab A general export error occurred.
\par AUPSF_FILEERROR\tab A general file error occurred.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Availability}\tab This function is available at design time.
\par \tab {\b\f12\fs18 Comments}\tab This function is useful for limiting the scope of variables. When the function finishes the new scope, it has to call the {\uldb\cf11 AUpsfCloseScope}{\v idx_aupsfclosescope}{\field{\*\fldinst {\cf1 macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsfclosescope}}{\fldrslt }}{\cf1  }function in order to signal that it has finished using the scope.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aupsfexportfield}{\*\bkmkend idx_aupsfexportfield}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aupsfexportfield}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AUpsfExportField}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0405}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AUpsfExportField}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}}
 AUpsfExportField
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab {\caps long }AUpsfExportField(fieldName, fieldIndex, nativeType, universalType, sourceAddress, sourceSize)
\par \tab {\b\f12\fs18 Description}\tab This function exports a field to the UPSF file.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 fieldName\tab LPCSTR\tab The field name of the value to be exported.
\par fieldIndex\tab LONG\tab The field-name index for the field whose value is to be exported.
\par nativeType\tab TYPEID\tab The ID of the native data type.
\par universalType
\par \tab TYPEID\tab The ID of the universal type.
\par sourceAddress
\par \tab LPVOID\tab The address of the data to be exported.
\par sourceSize\tab LONG\tab The size of the data to be exported.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab The return value equals one of the constants listed in the following table.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab \tab Condition
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 AUPSF_NOERROR\tab The function exported the field successfully.
\par AUPSF_NOTEXPORTING\tab The function was unable to export the field because the project was not exporting.
\par AUPSF_CANTCONVERT\tab The nativeType and universalType were not compatible types.
\par AUPSF_MEMORYERROR\tab A general memory error occurred.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Availability}\tab This function is available at design time.
\par \tab {\b\f12\fs18 Comments}\tab 
For platform-specific information, the nativeType and universalType parameters should be the same. When they are, sourceSize bytes from sourceAddress are written without any type conversion. The absence of type conversion is useful because it maintain
s full object compatibility within a given platform.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aupsffieldcount}{\*\bkmkend idx_aupsffieldcount}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aupsffieldcount}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AUpsfFieldCount}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0410}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AUpsfFieldCount}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}}
 AUpsfFieldCount
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab {\caps long }AUpsfFieldCount(fieldName)
\par \tab {\b\f12\fs18 Description}\tab This function counts all the fields in the current scope that have a fieldName parameter. It determines the number of fields in a variable-length list.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab \tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 fieldName\tab LPCSTR\tab The name of the field to be counted.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab 
A return value greater than or equal to zero gives the count of the number of fields that have the specified field name. If the return value is less than zero, an error occurred.
\par \tab {\b\f12\fs18 Availability}\tab This function is available at design time.
\par \tab {\b\f12\fs18 Comments}\tab This function is valid at import time.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aupsffieldinfo}{\*\bkmkend idx_aupsffieldinfo}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aupsffieldinfo}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AUpsfFieldInfo}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0415}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AUpsfFieldInfo}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} AUpsfFieldInfo

\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab {\caps long }AUpsfFieldInfo(fieldName, fieldIndex, nativeType, universalType, convertedSize)
\par \tab {\b\f12\fs18 Description}\tab This function determines the required buffer size. It can also determine the universal type.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 fieldName\tab LPCSTR\tab The name of the field where the information is to be retrieved.
\par fieldIndex\tab LONG\tab The index of the field where the information is to be retrieved.
\par nativeType\tab TYPEID\tab The data type.
\par universalType\tab LPTYPEID\tab The destination address for the field's universal type.
\par convertedSize\tab LPLONG\tab The destination address for the required buffer size.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab The return value equals one of the constants defined in the following table.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab \tab Condition
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 AUPSF_NOERROR\tab The function retrieved the field information successfully. 
\par AUPSF_FIELDNOTEXIST\tab The field does not exist.
\par AUPSF_NOTIMPORTING\tab The project is not importing.
\par AUPSF_CANTCONVERT\tab The function cannot convert the field to the native type.
\par AUPSF_MEMORYERROR\tab A general memory error occurred.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Availability}\tab This function is valid at design time.
\par \tab {\b\f12\fs18 Comments}\tab If necessary, the ALM calls {\uldb\cf11 AUpsfFieldInfo}{\v idx_aupsffieldinfo}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf1 gotobutton idx_aupsffieldinfo}}{\fldrslt }}{\cf1  }before it calls {\uldb\cf11 AUpsfImportField}{\v idx_aupsfimportfield}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsfimportfield}}{\fldrslt }}{\cf1 .}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aupsfimportfield}{\*\bkmkend idx_aupsfimportfield}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aupsfimportfield}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AUpsfImportField}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0420}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AUpsfImportField}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}}
 AUpsfImportField
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab {\caps long }AUpsfImportField(fieldName, fieldIndex, nativeType, destinationAddress, destinationSize)
\par \tab {\b\f12\fs18 Description}\tab This function reads a field whose name is fieldName and whose index is fieldIndex, then stores the information in destinationAddress. The function automatically casts the data to the nativeType.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 fieldName\tab LPCSTR\tab The object's field name.
\par fieldIndex\tab LONG\tab The object's field index.
\par nativeType\tab TYPEID\tab The ID of the native data type.
\par destinationAddress
\par \tab LPVOID\tab The address of the location where the imported data is to be stored.
\par destinationSize\tab 
\par \tab LONG\tab The size of the destination buffer.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab The return value equals one of the constants listed in the following table.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab \tab Condition
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 AUPSF_NOERROR\tab The function imported the field successfully.
\par AUPSF_FIELDNOTEXIST\tab The field does not exist.
\par AUPSF_NOTIMPORTING\tab The project is not importing.
\par AUPSF_CANTCONVERT\tab The function cannot convert the field to the native type.
\par AUPSF_SIZEERROR\tab The destinationSize parameter was not correct.
\par AUPSF_MEMORYERROR\tab A general memory error occurred.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Availability}\tab This function is valid at design time.
\par \tab {\b\f12\fs18 Comments}\tab To retrieve a field from a UPSF file, the ALM has to call {\uldb\cf11 AUpsfImportField}{\v idx_aupsfimportfield}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsfimportfield}}{\fldrslt }}{\cf1 .} If the buffer size is unknown, design the ALM so that it calls {\uldb\cf11 AUpsfFieldInfo}{\v idx_aupsffieldinfo}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsffieldinfo}}{\fldrslt }}{\cf1 .}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aupsflogcomment}{\*\bkmkend idx_aupsflogcomment}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aupsflogcomment}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AUpsfLogComment}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0425}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AUpsfLogComment}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}}
 AUpsfLogComment
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab {\caps long }AUpsfLogComment(comment)
\par \tab {\b\f12\fs18 Description}\tab This function writes a comment or an error warning to the UPSF log file. The {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }calls AUpsfLogComment{\cf1  }
before it imports each object; as a result, Return Value are tied to a particular object. The function is useful because it gives warnings about platform incompatibilities such as path names.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 comment\tab LPCSTR  \tab The comment string.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab The return value equals one of the constants defined in the following table.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab \tab Meaning
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 AUPSF_NOERROR\tab The function logged the comment successfully.
\par AUPSF_LOGERROR\tab A general log error occurred.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Availability}\tab This function is available at design time.
\par \tab {\b\f12\fs18 Comments}\tab This function is a useful way to give warnings when the ALM imports a project. For example, the Notification Object on the Windows platform does not flash an icon, so an object developer mig
ht want to warn the user that a default icon will be used when a project that uses the Notification Object is transferred from the Windows platform to the Macintosh platform.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_aupsfopenscope}{\*\bkmkend idx_aupsfopenscope}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_aupsfopenscope}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AUpsfOpenScope}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} ch89:0430}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AUpsfOpenScope}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n2_appware_bus_functions')')}} AUpsfOpenScope

\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab {\caps long }AUpsfOpenScope(scopeName, index)
\par \tab {\b\f12\fs18 Description}\tab This function opens an existing scope that was created by the {\uldb\cf11 AUpsfCreateScope}{\v idx_aupsfcreatescope}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsfcreatescope}}{\fldrslt }}{\cf1  }function.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 scopeName\tab LPCSTR\tab Identifies the scope to be opened.
\par index\tab LONG\tab The scope index.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab The return value equals one of the constants defined in the following table.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab \tab Meaning
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 AUPSF_NOERROR\tab The function opened the scope successfully.
\par AUPSF_SCOPENOTEXIST\tab The field does not exist.
\par AUPSF_SCOPEERROR\tab A general scope error occurred while the function was opening the scope.
\par AUPSF_NOTIMPORTING\tab The project is not importing.
\par AUPSF_IMPORTERROR\tab A general import error occurred while the function was opening the scope.
\par AUPSF_FILEERROR\tab A general file error occurred while the function was opening the scope.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Availability}\tab This function is available at design time.
\par \tab {\b\f12\fs18 Comments}\tab If you want the ALM to access the fields of a record that were stored by the {\uldb\cf11 AUpsfCreateScope}{\v idx_aupsfcreatescope}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {
\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsfcreatescope}}{\fldrslt }}{\cf1  }function, the ALM has to call this function. When the ALM finishes importing from the opened scope, have it call the {\uldb\cf11 
AUpsfCloseScope}{\v idx_aupsfclosescope}{\field{\*\fldinst {\cf1 macrobutton NextFi}{\cf1 eld }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aupsfclosescope}}{\fldrslt }}{\cf1  }
function.
\par 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\up6\lang1033 {\*\bkmkstart idx_chapter_9}{\*\bkmkend idx_chapter_9}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_chapter_9}} {\plain 
\f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} chap:0009}} {\plain \f3\fs16\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Chapter 9}} {\plain \f3\fs16\up6\lang1033 K{\footnote \pard\plain 
\s245 \f3\fs20\lang1033 {\fs16\up6 K} Chapter 9}} {\plain \f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_contents')')}} Chapter 9
\par \pard\plain \s29\ri432 \f11\fs60\lang1033 Object APIs and Protocols
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Object APIs and Protocols}{\v idx_object_apis_and_protocols}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf6 gotobutton idx_object_apis_and_}}{\fldrslt }}
\par \pard\plain \f3\fs20\lang1033 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_object_apis_and_}{\*\bkmkend idx_object_apis_and_}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_object_apis_and_protocols}}{\plain \caps\f3\fs16\cf2\up6\lang1033  }{\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP11:0010}} {\plain \caps\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 $} Object APIs and Protocols}} {\plain \caps\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Object APIs and Protocols}} {\plain \caps\f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain 
\s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_contents')')}} Object APIs and Protocols
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 The Button Object API}{\v idx_the_button_object_api}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {
\cf6 gotobutton idx_the_button_objec}}{\fldrslt }}
\par {\uldb\cf11 The Date Object API}{\v idx_the_date_object_api}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJ}{\cf6 ump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_the_date_object_}
}{\fldrslt }}
\par {\uldb\cf11 The Number Object API}{\v idx_the_number_object_api}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_the_number_objec}
}{\fldrslt }}
\par {\uldb\cf11 The Text Object API}{\v idx_the_text_object_api}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_the_text_object_}}{\fldrslt }}

\par {\uldb\cf11 The Time Object API}{\v idx_the_time_object_api}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_the_time_object_}}{\fldrslt }}

\par {\uldb\cf11 The Window Object API}{\v idx_the_window_object_api}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump }{\cf6 <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_the_window_objec}
}{\fldrslt }}
\par 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_the_button_objec}{\*\bkmkend idx_the_button_objec}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_the_button_object_api}}
{\plain \f3\fs16\cf2\up6\lang1033  }{\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPPOBJS:0005}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $}
 The Button Object API}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} The Button Object API}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_object_apis_and_protocols')')}} The Button Object API
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
The Button object API is the programming interface to ALM Button objects. Its button types and functions can be used to retrieve information about the buttons and to set button attributes. To use the Button object API:
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }Your DLL source files have to include the file o_button.h.
\par {\cf5 \{bmc rr.bmp\}\tab }You have to link with alm_butn.lib, which is the import library for the Button object.
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Button Data Types}{\v idx_button_data_types}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_button_data_type}}{\fldrslt }}
\par {\uldb\cf11 Button Functions}{\v idx_button_functions}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_button_functions}}{\fldrslt }}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_button_data_type}{\*\bkmkend idx_button_data_type}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_button_data_types}}{\caps\fs16\up6  }
{\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPPBUTN:0005}} {\caps\fs16\up6 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Button Data Types}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 K} Button Data Types}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_the_button_object_api')')}} Button Data Types
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
One data type has been defined for the Button object API. Its name is OBUTN_TYPE and it enumerates the possible button types. The possibilities are described in the following table.
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Button Type\tab \tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 OBUTN_PUSH\tab \tab The standard window button.
\par OBUTN_CHECK\tab The standard window checkbox.
\par OBUTN_RADIO\tab The standard window radio button.
\par OBUTN_INVISIBLE\tab An invisible button that has full button behavior. Invisible buttons can be set to invert whatever is beneath them.
\par OBUTN_BITMAP\tab A button with a bitmap face instead of text.
\par OBUTN_UNKNOWN\tab An unknown or invalid button type.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_button_functions}{\*\bkmkend idx_button_functions}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_button_functions}}{\caps\fs16\up6  }
{\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPPBUTN:0010}} {\caps\fs16\up6 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Button Functions}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 K} Button Functions}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_the_button_object_api')')}} Button Functions
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The remainder of this section contains information about the Button object's functions.
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 OButnIsSelected}{\v idx_obutnisselected}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx}{\cf6 _obutnisselected}}{\fldrslt }}
\par {\uldb\cf11 OButnSetSelected}{\v idx_obutnsetselected}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_obutnsetselected}}{\fldrslt }}
\par {\uldb\cf11 OButnGetType}{\v idx_obutngettype}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_obutngettype}}{\fldrslt }}
\par 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_obutnisselected}{\*\bkmkend idx_obutnisselected}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_obutnisselected}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OButnIsSelected}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP16:0005}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OButnIsSelected}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_button_functions')')}} OButnIsSelected

\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }BOOL OButnIsSelected(oiButton)
\par \tab {\b\f12\fs18 Description\tab }This function determines whether a button is currently selected.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiButton\tab OBJECTID\tab The button to be evaluated.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value is TRUE if 
the button is selected and FALSE if the button is not selected or if the function fails.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }If this function is called with an invalid button ID, it returns FALSE. The function also returns FALSE if it is called by the push, invisible, or bitmap buttons.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_obutnsetselected}{\*\bkmkend idx_obutnsetselected}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_obutnsetselected}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OButnSetSelected}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP16:0010}} {\plain \f3\fs16\cf2\up6\lang1033 
K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OButnSetSelected}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_button_functions')')}}
 OButnSetSelected
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }BOOL OButnSetSelected(oiButton, bSelected)
\par \tab {\b\f12\fs18 Description\tab }This function sets the selection mode (selected or unselected) for the specified button.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiButton\tab OBJECTID\tab The button to be evaluated. 
\par bSelected\tab BOOL\tab Identifies whether the button is to be set as selected (TRUE) or unselected (FALSE).
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }
The return value is TRUE if the state of the button selection changes and FALSE if the state does not change or if the function fails.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }If this function is called with an invalid button ID, it returns FALSE. The function also returns FALSE if oiButton references a push, invisible, or bitmap button.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_obutngettype}{\*\bkmkend idx_obutngettype}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_obutngettype}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OButnGetType}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP16:0015}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OButnGetType}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_button_functions')')}} OButnGetType
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }OBUTN_TYPE OButnGetType(oiButton)
\par \tab {\b\f12\fs18 Description\tab }This function determines a button's type.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiButton\tab OBJECTID\tab The button to be evaluated. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value is equal to one of the following constants. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab \tab Meaning
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 OBUTN_PUSH\tab \tab The standard window button.
\par OBUTN_CHECK\tab The standard window checkbox.
\par OBUTN_RADIO\tab The standard window radio button.
\par OBUTN_INVISIBLE\tab An invisible button that has full button behavior. Invisible buttons can be set to invert whatever is beneath them.
\par OBUTN_BITMAP\tab A button with a bitmap face instead of text.
\par OBUTN_UNKNOWN\tab An unknown or invalid button type.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }This function is of the type OBUTN_TYPE.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_the_date_object_}{\*\bkmkend idx_the_date_object_}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_the_date_object_api}}
{\plain \f3\fs16\cf2\up6\lang1033  }{\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPPOBJS:0010}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $}
 The Date Object API}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} The Date Object API}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_object_apis_and_protocols')')}} The Date Object API
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The Date object API is the programming interface to ALM Date objects. The Date object provides a mechanism to display, edit, and 
manipulate dates entered by the user or generated by the operating system. With the Date object API functions, a user can convert between date formats and styles. To use the Date object API:
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }Your DLL source files have to include the file o_date.h.
\par {\cf5 \{bmc rr.bmp\}\tab }You have to link with alm_date.lib, which is the import library for the Date object.
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Date Object Types and Structures}{\v idx_date_object_types_and_structures}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}
}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_date_object_type}}{\fldrslt }}
\par {\uldb\cf11 Date Object Macros}{\v idx_date_object_macros}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_date_object_macr}}{\fldrslt }}

\par {\uldb\cf11 Date Object Functions}{\v idx_date_object_functions}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_date_object_func}
}{\fldrslt }}
\par 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_date_object_type}{\*\bkmkend idx_date_object_type}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_date_object_types_and_structures}}{
\caps\fs16\up6  }{\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPPDATE:0005}} {\caps\fs16\up6 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Date Object Types and Structures}} {\caps\fs16\up6 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Date Object Types and Structures}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_the_date_object_api')')}}
 Date Object Types and Structures
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The Date object has one type (ODATE) and one structure (ODATEYMD).
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 ODATE}{\v idx_odate}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_odate}
}{\fldrslt }}
\par {\uldb\cf11 ODATEYMD}{\v idx_odateymd}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton D}{\cf6 oJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_odateymd}}{\fldrslt }}
\par 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_odate}{\*\bkmkend idx_odate}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_odate}} {\plain \f3\fs16\cf2\up6\lang1033 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ODATE}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP17:0005}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 K} ODATE}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_date_object_types_and_structures')')}} ODATE
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Description}\tab 
The object type, ODATE, is a signed, 32-bit integer whose value is a Gregorian date. The Gregorian calendar began on Thursday, October 14, 1582. ODATE has the following structure:
\par \pard\plain \s26\li1440\ri432\sb120\tx288\tlul\tx576\tqr\tlul\tx864\tx1152\tx1440\tlul\tx1728\tx1890\tqr\tlul\tx1980\tlul\tx2304\tqr\tlul\tx2592\tlul\tx2880\tqc\tlul\tx3168\tx3240\tx3456\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 
\f9\fs18\lang1033 typedef long ODATE;
\par \pard \s26\li1440\ri432\tx288\tlul\tx576\tqr\tlul\tx864\tx1152\tx1440\tlul\tx1728\tx1890\tqr\tlul\tx1980\tlul\tx2304\tqr\tlul\tx2592\tlul\tx2880\tqc\tlul\tx3168\tx3240\tx3456\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_odateymd}{\*\bkmkend idx_odateymd}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_odateymd}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ODATEYMD}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP17:0010}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ODATEYMD}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_date_object_types_and_structures')')}} ODATEYMD
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Description}\tab 
The ODATEYMD structure represents a date value. It defines the year, the month, the day, and the day of the week for a specified date. ODATEYMD has the following structure:
\par \pard\plain \s26\li1440\ri432\sb120\tx288\tqc\tx576\tqr\tlhyph\tx864\tx1152\tx1440\tqc\tx1728\tx1890\tqr\tlhyph\tx1980\tqr\tlhyph\tx2592\tlul\tx2880\tqc\tlul\tx3168\tx3240\tx3456\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 
typedef struct ODATEYMD
\par \pard \s26\li1440\ri432\tx288\tqc\tx576\tqr\tlhyph\tx864\tx1152\tx1440\tqc\tx1728\tx1890\tqr\tlhyph\tx1980\tqr\tlhyph\tx2592\tlul\tx2880\tqc\tlul\tx3168\tx3240\tx3456\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \tab \{
\par \tab short \tab year;
\par \tab short \tab month;
\par \tab short \tab day;
\par \tab short \tab dayOfWeek;
\par \tab \}ODATEYMD;
\par typedef ODATEYMD far\tab  * pODATEYMD;
\par 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The ODATEYMD structure has the following fields:\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Field\tab Description
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 year\tab The date's year component; for example, 1994.
\par month\tab The date's month component (1\endash 12). 
\par day\tab The date's day component (1\endash 31).
\par dayOfWeek\tab The day of the week (Sunday = 1, Saturday = 7).
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Comments}\tab None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_date_object_macr}{\*\bkmkend idx_date_object_macr}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_date_object_macros}}{\caps\fs16\up6  }
{\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPPDATE:0010}} {\caps\fs16\up6 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Date Object Macros}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 K} Date Object Macros}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_the_date_object_api')')}} Date Object Macros
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 This section contains information about general macro constants, date component macros, and date style macros. 
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 General Macro Constants}{\v idx_general_macro_constants}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf6 gotobutton idx_general_macro_co}}{\fldrslt }}
\par {\uldb\cf11 Date Component Macros}{\v idx_date_component_macros}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_date_component_m}
}{\fldrslt }}
\par {\uldb\cf11 Date Style Macros}{\v idx_date_style_macros}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_date_style_macro}}{\fldrslt }}

\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_general_macro_co}{\*\bkmkend idx_general_macro_co}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_general_macro_constants
}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} General Macro Constants}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP18:0005}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} General Macro Constants}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); 
CBB(`btn_up', `JI(`', `idx_date_object_macros')')}} General Macro Constants
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The following macros represent constant numbers that are used in Date object manipulations.
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Mnemonic\tab \tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 ODATE_MAX_TEXT_LENGTH\tab The maximum length of the text string for the date. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_date_component_m}{\*\bkmkend idx_date_component_m}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_date_component_macros}}
 {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Date Component Macros}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP18:0010}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Date Component Macros}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_date_object_macros')')}} Date Component Macros
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The following macros are used by the ODateParseString function to create a bit mask that shows which date components are present in a date string.
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Mnemonic\tab \tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 ODATE_MONTH_SUPPLIED\tab The month is contained in the date.
\par ODATE_DAY_SUPPLIED\tab The day is contained in the date.
\par ODATE_YEAR_SUPPLIED\tab The year is contained in the date.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_date_style_macro}{\*\bkmkend idx_date_style_macro}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_date_style_macros}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Date Style Macros}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP18:0015}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Date Style Macros}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_date_object_macros')')}} Date Style Macros
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The following macros represent the date style that is used during the generation of date strings.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Mnemonic\tab \tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 ODATE_STYLE_SHORT\tab 
A short date style is being used in the date. Date strings of this style contain "/" delimiters between the day, month and year fields (for example, 3/1/94).
\par ODATE_STYLE_LONG\tab A long date style is being used in the date. Date strings of this style are expanded to their text equivalent (for example, Tuesday, March 01, 1994).
\par ODATE_STYLE_KEEPCURRENT
\par \tab \tab The date style is updated from system time.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_date_object_func}{\*\bkmkend idx_date_object_func}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_date_object_functions}}{\caps\fs16\up6  }
{\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPPDATE:0015}} {\caps\fs16\up6 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Date Object Functions}} {\caps\fs16\up6 K{\footnote \pard\plain 
\s245 \f3\fs20\lang1033 {\fs16\up6 K} Date Object Functions}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_the_date_object_api')')}} Date Object Functions
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The remainder of this section contains information about the Date object's functions. 
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 ODateConvertFromString}{\v idx_odateconvertfromstring}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf6 gotobutton idx_odateconvertfrom}}{\fldrslt }}
\par {\uldb\cf11 ODateConvertToString}{\v idx_odateconverttostring}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_odateconverttost}
}{\fldrslt }}
\par {\uldb\cf11 ODateFormatDate}{\v idx_odateformatdate}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotob}{\cf6 utton idx_odateformatdate}}{\fldrslt }}

\par {\uldb\cf11 ODateFromYMD}{\v idx_odatefromymd}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_odatefromymd}}{\fldrslt }}
\par {\uldb\cf11 ODateGetStyle}{\v idx_odategetstyle}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_odategetstyle}}{\fldrslt }}
\par {\uldb\cf11 ODateGetValue}{\v idx_odategetvalue}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_odategetvalue}}{\fldrslt }}
\par {\uldb\cf11 ODateParseString}{\v idx_odateparsestring}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_odateparsestring}}{\fldrslt }}
\par {\uldb\cf11 ODateSetValue}{\v idx_odatesetvalue}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_odatesetvalue}}{\fldrslt }}
\par {\uldb\cf11 ODateStringToDate}{\v idx_odatestringtodate}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_odatestringtodat}}{\fldrslt }}

\par {\uldb\cf11 ODateToYMD}{\v idx_odatetoymd}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_odatetoymd}}{\fldrslt }}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_odateconvertfrom}{\*\bkmkend idx_odateconvertfrom}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_odateconvertfromstring}
} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ODateConvertFromString}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP19:0005}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ODateConvertFromString}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_date_object_functions')')}} ODateConvertFromString
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }BOOL ODateConvertFromString(oiDate, szBuffer)
\par \tab {\b\f12\fs18 Description\tab }This function converts the specified date from character-string format to the Date object format and stores the value in the specified object.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiDate\tab OBJECTID\tab The object ID of the Date object that will hold the converted date.
\par szBuffer\tab LPSTR\tab The address of the date string that is to be converted and stored in the Date object. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value is TRUE if the function sets the date successfully and FALSE if it cannot set the date.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }This function assumes that the date string uses either the sho
rt-date format or the long-date format. Formats are defined from the Control Panel. If you enter the name of the month, such as January or Jan, this function uses the long-date format. If you enter the month's identifying number, such as 1, this function 
uses the short-date format. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_odateconverttost}{\*\bkmkend idx_odateconverttost}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_odateconverttostring}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ODateConvertToString}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP19:0010}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ODateConvertToString}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_date_object_functions')')}} ODateConvertToString
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }short ODateConvertToString(oiDate, szBuffer, bufferLen)
\par \tab {\b\f12\fs18 Description\tab }This function converts the date stored in the Date object into a character string.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiDate\tab OBJECTID\tab The ID of the Date object that contains the date. 
\par szBuffer\tab LPSTR\tab The address of the holding buffer for the date string that is retrieved from the Date object.
\par bufferLen\tab short\tab The length, in bytes, of szBuffer.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value equals the number of characters in the returned date string.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time.
\par \tab {\b\f12\fs18 Comments\tab }After this function has been called, szBuffer holds a maximum of \line (bufferLen \endash  1) characters. The return str
ing is NULL terminated. The size of szBuffer should typically be at least ODATE_MAX_TEXT_LENGTH bytes in order to ensure that the complete string is available in szBuffer. The string will be formatted in the long format or the short format, depending on w
hich format has been selected for oiDate. To specify the long and short formats, use the Control Panel. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_odateformatdate}{\*\bkmkend idx_odateformatdate}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_odateformatdate}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ODateFormatDate}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP19:0015}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ODateFormatDate}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_date_object_functions')')}}
 ODateFormatDate
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }short ODateFormatDate(oiDate, theDate, szBuffer, bufferLen)
\par \tab {\b\f12\fs18 Description\tab }This function formats a Gregorian date into the same format as the one for the specified Date object and converts the date into a character string.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiDate\tab OBJECTID \tab The object ID of the Date object whose format will be used to generate a date character string. 
\par theDate\tab LONG\tab The Gregorian date to be formatted.
\par szBuffer\tab LPSTR\tab The address of the buffer that will hold the formatted date string.
\par bufferLen\tab short\tab The length, in bytes, of szBuffer.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value equals the number of characters in the returned date string.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }After this function has been called, szBuffer holds a maximum of \line (bufferLen \endash  1) characters. The returned string is NULL terminated. The value of bufferLen is generally set to ODATE_MAX_TEXT_LENGTH.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_odatefromymd}{\*\bkmkend idx_odatefromymd}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_odatefromymd}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ODateFromYMD}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP19:0020}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ODateFromYMD}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_date_object_functions')')}} ODateFromYMD
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }ODATE ODateFromYMD(ymdDate)
\par \tab {\b\f12\fs18 Description\tab }This function converts a date from the YMD format to the format for a Gregorian date.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab \tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 ymdDate\tab pODATEYMD\tab The address of the ODATEYMD structure that contains the date to be converted.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value is the Gregorian date that corresponds to the specified date.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time.
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_odategetstyle}{\*\bkmkend idx_odategetstyle}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_odategetstyle}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ODateGetStyle}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP19:0025}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ODateGetStyle}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_date_object_functions')')}} ODateGetStyle

\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }{\caps long }ODateGetStyle(oiDate)
\par \tab {\b\f12\fs18 Description\tab }This function returns the date style of a Date object.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiDate\tab OBJECTID\tab The ID of the Date object whose date style has been requested.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }Th
e return value is the bit-wise OR of the values listed in the following table. The values correspond to the styles that are used by the specified Date object. If the function fails, the return value is zero. The following table lists the possible elements
 that might be contained in the return value. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab \tab Meaning
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 ODATE_STYLE_SHORT\tab The date strings contain "/" delimiters between the day, the month, and the year values (for example, \line 3/1/94).
\par ODATE_STYLE_LONG\tab The date strings have been expanded to their text equivalent (for example, Tuesday, March 01, 1994).
\par ODATE_STYLE_KEEPCURRENT
\par \tab \tab The date strings use the current system date.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time.
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_odategetvalue}{\*\bkmkend idx_odategetvalue}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_odategetvalue}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ODateGetValue}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP19:0030}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ODateGetValue}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_date_object_functions')')}} ODateGetValue

\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }ODATE ODateGetValue(oiDate)
\par \tab {\b\f12\fs18 Description\tab }This function converts the date stored in a Date object into the Gregorian equivalent.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiDate\tab OBJECTID\tab The ID of the Date object whose date is to be converted into a Gregorian date. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value is the Gregorian date that corresponds to the one stored in the Date object.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_odateparsestring}{\*\bkmkend idx_odateparsestring}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_odateparsestring}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ODateParseString}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP19:0035}} {\plain \f3\fs16\cf2\up6\lang1033 
K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ODateParseString}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_date_object_functions')')}}
 ODateParseString
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }{\caps long }ODateParseString(szBuffer)
\par \tab {\b\f12\fs18 Description\tab }This function parses the specified date string to determine whether the string contains any combination of the month, the day, and the year.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 szBuffer\tab LPSTR\tab The date string to be parsed.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Va}{\b\f12\fs18 lue\tab }
The return value consists of a bit mask that shows which date components are present. If none of them are present, the return value is zero. The following table lists the possible elements that might be contained in the return value. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab \tab Meaning
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 ODATE_MONTH_SUPPLIED\tab The date string contains a value for the month.
\par ODATE_DAY_SUPPLIED\tab The date string contains a value for the day.
\par ODATE_YEAR_SUPPLIED\tab The date string contains a value for the year.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time.
\par \tab {\b\f12\fs18 Comments\tab }
This function assumes that the date string uses either the short-date format or the long-date format. Formats are defined from the Control Panel. If you enter the name of the month, such as January or Jan, this function uses the long-date format. If you e
nter the month's identifying number, such as 1, this function uses the short-date format. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_odatesetvalue}{\*\bkmkend idx_odatesetvalue}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_odatesetvalue}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ODateSetValue}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP19:0040}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ODateSetValue}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_date_object_functions')')}} ODateSetValue

\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }BOOL ODateSetValue(oiDate, theDate)
\par \tab {\b\f12\fs18 Description\tab }This function converts a Gregorian date into a Date-object format and sets the Date object with the corresponding value.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiDate\tab OBJECTID\tab The ID of the Date object that is to hold the converted date. 
\par theDate\tab ODATE\tab The Gregorian date representation to be stored in the Date object.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }
The return value is TRUE if the Date object's date was changed and FALSE if the Date object's Gregorian date already matched theDate. (If the dates match, a change is unnecessary.) 
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_odatestringtodat}{\*\bkmkend idx_odatestringtodat}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_odatestringtodate}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ODateStringToDate}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP19:0045}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ODateStringToDate}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_date_object_functions')')}} ODateStringToDate
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }ODATE ODateStringToDate(szBuffer)
\par \tab {\b\f12\fs18 Description\tab }This function converts a date string into a Gregorian date.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 szBuffer\tab LPSTR\tab The date string to be converted.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value is the Gregorian date that corresponds to the specified date string.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }This function assumes that the date string uses either the shor
t-date format or the long-date format. Formats are defined from the Control Panel. If you enter the name of the month, such as January or Jan, this function uses the long-date format. If you enter the month's identifying number, such as 1, this function u
ses the short-date format. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_odatetoymd}{\*\bkmkend idx_odatetoymd}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_odatetoymd}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ODateToYMD}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP19:0050}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ODateToYMD}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_date_object_functions')')}} ODateToYMD
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void ODateToYMD(theDate, ymdDate)
\par \tab {\b\f12\fs18 Description\tab }This function converts a Gregorian date to the YMD format.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 theDate\tab ODATE\tab The Gregorian date to be converted.
\par ymdDate\tab pODATEYMD\tab The address of the ODATEYMD structure where the converted date is to be placed.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None. 
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time.
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_the_number_objec}{\*\bkmkend idx_the_number_objec}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_the_number_object_api}}
{\plain \f3\fs16\cf2\up6\lang1033  }{\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPPOBJS:0015}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} The Number O
bject API}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} The Number Object API}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_object_apis_and_protocols')')}} The Number Object API
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
The Number object API is the programming interface to ALM Number objects. The Number object provides a mechanism to display, edit, and manipulate integer and floating point numbers that are entered by the user or generated by the application. Number objec
t API functions convert between numbers and strings. They also retrieve or set Number object values. To use the Number object API:
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }Your DLL source files have to include the file o_number.h.
\par {\cf5 \{bmc rr.bmp\}\tab }You have to link with alm_nmbr.lib, which is the import library for the Number object.
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Number Object Macros}{\v idx_number_object_macros}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {
\cf6 gotobutton idx_number_object_ma}}{\fldrslt }}
\par {\uldb\cf11 Number Object Functions}{\v idx_number_object_functions}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 g}{\cf6 otobutton idx_number_object_fu
}}{\fldrslt }}
\par 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_number_object_ma}{\*\bkmkend idx_number_object_ma}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_number_object_macros}}{\caps\fs16\up6  }
{\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPPNUM:0005}} {\caps\fs16\up6 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Number Object Macros}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 K} Number Object Macros}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_the_number_object_api')')}} Number Object Macros
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 This section contains information about macros that represent constant numbers. The numbers are used in Number object manipulations.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Mnemonic\tab \tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 ONMBR_MAX_TEXT_LENGTH\tab The maximum length of the number's text string.
\par ONMBR_INTEGER\tab A flag indicating that the numeric value is stored as a 32-bit long.
\par ONMBR_REAL\tab \tab A flag indicating that the numeric value is stored as a ten-byte long double. 
\par ONMBR_RANGE_ERR\tab The number is out of range because of an overflow or an underflow.
\par ONMBR_HAS_CHANGED\tab The number has changed.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_number_object_fu}{\*\bkmkend idx_number_object_fu}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_number_object_functions}}{\caps\fs16\up6 
 }{\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPPNUM:0010}} {\caps\fs16\up6 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Number Object Functions}} {\caps\fs16\up6 K{\footnote \pard\plain 
\s245 \f3\fs20\lang1033 {\fs16\up6 K} Number Object Functions}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_the_number_object_api')')}} Number Object Functions
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The remainder of this section contains information about the Number object's functions.
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 ONmbrConvertFromString}{\v idx_onmbrconvertfromstring}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf6 gotobutton idx_onmbrconvertfrom}}{\fldrslt }}
\par {\uldb\cf11 ONmbrConvertToString}{\v idx_onmbrconverttostring}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_onmbrconverttost}
}{\fldrslt }}
\par {\uldb\cf11 ONmbrFormatInteger}{\v idx_onmbrformatinteger}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_onmbrformatinteg}}{\fldrslt }}

\par {\uldb\cf11 ONmbrFormatReal}{\v idx_onmbrformatreal}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_onmbrformatreal}}{\fldrslt }}
\par {\uldb\cf11 ONmbrGetInteger}{\v idx_onmbrgetinteger}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_onmbrgetinteger}}{\fldrslt }}
\par {\uldb\cf11 ONmbrGetReal}{\v idx_onmbrgetreal}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_onmbrgetreal}}{\fldrslt }}
\par {\uldb\cf11 ONmbrGetStatus}{\v idx_onmbrgetstatus}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton}{\cf6  idx_onmbrgetstatus}}{\fldrslt }}

\par {\uldb\cf11 ONmbrGetType}{\v idx_onmbrgettype}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_onmbrgettype}}{\fldrslt }}
\par {\uldb\cf11 ONmbrSetInteger}{\v idx_onmbrsetinteger}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_onmbrsetinteger}}{\fldrslt }}
\par {\uldb\cf11 ONmbrSetReal}{\v idx_onmbrsetreal}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_onmbrsetreal}}{\fldrslt }}
\par {\uldb\cf11 ONmbrSetType}{\v idx_onmbrsettype}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_onmbrsettype}}{\fldrslt }}
\par 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_onmbrconvertfrom}{\*\bkmkend idx_onmbrconvertfrom}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_onmbrconvertfromstring}
} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ONmbrConvertFromString}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP20:0005}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ONmbrConvertFromString}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_number_object_functions')')}} ONmbrConvertFromString
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }{\caps LONG }ONmbrConvertFromString(oiNumber, szBuffer, bChangeType)
\par \tab {\b\f12\fs18 Description\tab }This function sets the value of a Number object from a text string.
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiNumber\tab OBJECTID\tab The ID of the Number object whose value will be set.
\par szBuffer\tab LPSTR\tab The buffer that contains the text representation of the number.
\par bChangeType\tab BOOL \tab If oiNumber is a temporary object and this parameter is TRUE, the Number object's storage mode (real or whole) will change to match the format of the string szBuffer.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return}{\b\f12\fs18  Value\tab }
The return value is the numeric format of the string szBuffer. If the format is unknown, the return value is zero. The following table describes the possible return values.
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab \tab Meaning
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 ONMBR_INTEGER\tab The numeric value is stored in a long.
\par ONMBR_REAL\tab \tab The numeric value is stored in a long double. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_onmbrconverttost}{\*\bkmkend idx_onmbrconverttost}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_onmbrconverttostring}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ONmbrConvertToString}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP20:0010}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ONmbrConvertToString}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_number_object_functions')')}} ONmbrConvertToString
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }short ONmbrConvertToString(oiNumber, szBuffer, cbMax)
\par \tab {\b\f12\fs18 Description\tab }This function converts the value of a Number object into a string. The number is formatted to match the format string of the Number object.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiNumber\tab OBJECTID\tab The ID of the Number object whose value will be retrieved.
\par szBuffer\tab LPSTR\tab The buffer that will receive the text representation of the number.
\par cbMax\tab short{\caps \tab }The size of szBuffer. To allow room for the NULL terminator, the maximum length of the string stored in szBuffer will be one less than cbMax.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return v
alue is the number of bytes that were copied into the buffer. It does not include the NULL terminator.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at run time. 
\par \tab {\b\f12\fs18 Comments\tab }After this function has been called, szBuffer holds a maximum of (cbMax \endash  1) characters. The return string is NULL terminated.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_onmbrformatinteg}{\*\bkmkend idx_onmbrformatinteg}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_onmbrformatinteger}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ONmbrFormatInteger}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP20:0015}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ONmbrFormatInteger}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_number_object_functions')')}} ONmbrFormatInteger
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }short ONmbrFormatInteger(oiNumber, lValue, szBuffer, cbMax)
\par \tab {\b\f12\fs18 Description\tab }This function converts an integer into a string. It uses the same format as the one used by the specified Number object.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiNumber\tab OBJECTID \tab The ID of the Number object whose format will be used to generate a text representation of the specified number.
\par lValue\tab LONG\tab This value will be formatted into a text string.
\par szBuffer\tab LPSTR\tab The buffer that will receive the text representation of the number.
\par cbMax\tab short{\caps \tab }The size of szBuffer.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value is the number of bytes copied into the buffer. It does not include the NULL terminator.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }If oiNumber is zero, which means it is an invalid object ID, the function uses the default whole-number format.
\par {\cf5 \{bmc rr.bmp\}\tab }After this function has been called, szBuffer holds a maximum of \line (cbMax \endash  1) characters. The return string is NULL terminated.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_onmbrformatreal}{\*\bkmkend idx_onmbrformatreal}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_onmbrformatreal}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ONmbrFormatReal}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP20:0020}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ONmbrFormatReal}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_number_object_functions')')}}
 ONmbrFormatReal
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }short ONmbrFormatReal(oiNumber, flValue, szBuffer, cbMax)
\par \tab {\b\f12\fs18 Description\tab }This function converts a real number into a string. It uses the same format being used for the specified Number object.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiNumber\tab OBJECTID \tab The ID of the Number object whose format will be used to generate a text representation of the number.
\par flValue\tab long double
\par \tab \tab This value will be formatted into a text string.
\par szBuffer\tab LPSTR\tab The buffer that is to receive the text representation of the number.
\par cbMax\tab short{\caps \tab }The size of szBuffer.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value is the number of bytes copied into the buffer. It does not include the NULL terminator.
\par \tab {\b\f12\fs18 A}{\b\f12\fs18 vailability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }If oiNumber is zero, which means it is an invalid object ID, the function uses the default whole-number format.
\par {\cf5 \{bmc rr.bmp\}\tab }After this function has been called, szBuffer holds a maximum of \line (cbMax \endash  1) characters. The returned string is NULL terminated.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_onmbrgetinteger}{\*\bkmkend idx_onmbrgetinteger}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_onmbrgetinteger}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ONmbrGetInteger}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP20:0025}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ONmbrGetInteger}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_number_object_functions')')}}
 ONmbrGetInteger
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }LONG ONmbrGetInteger(oiNumber)
\par \tab {\b\f12\fs18 Description\tab }This function returns an integer representation of the specified Number object.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab \tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiNumber\tab OBJECTID\tab The ID of the Number object whose value has been requested.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value is the long value of the Number object.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }If the Number object stores a real value, it is rounded to the nearest long value.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_onmbrgetreal}{\*\bkmkend idx_onmbrgetreal}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_onmbrgetreal}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ONmbrGetReal}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP20:0030}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ONmbrGetReal}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_number_object_functions')')}} ONmbrGetReal
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void ONmbrGetReal(oiNumber, pValue)
\par \tab {\b\f12\fs18 Description\tab }This function returns a real number representation of the specified Number object.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab \tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiNumber\tab OBJECTID\tab The ID of the Number object whose value has been requested.
\par pValue\tab long double*{\caps \tab }The address of the location where the Number object value will be stored as a real number.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }The long double value of the Number object could not be returned on the stack because Borland and Microsoft compilers use different methods to return long double types. As a result, you have to pass a poi
nter to a long double variable. Be sure that your variable is a long double and not a float or a double. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_onmbrgetstatus}{\*\bkmkend idx_onmbrgetstatus}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_onmbrgetstatus}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ONmbrGetStatus}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP20:0035}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ONmbrGetStatus}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_number_object_functions')')}}
 ONmbrGetStatus
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }LONG ONmbrGetStatus(oiNumber)
\par \tab {\b\f12\fs18 Description\tab }This function retrieves the status of the specified Number object.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab \tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiNumber\tab OBJECTID\tab The ID of the Number object whose status is being retrieved.\line 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }
The return value represents the status of the specified Number object. The following table describes the possible return values.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab \tab Meaning
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 ONMBR_RANGE_ERR\tab The number is out of range.
\par ONMBR_HAS_CHANGED\tab The number has changed in one visual instance, but {\uldb\cf11 AEVENT_OBJECTCHANGED}{\v idx_aevent_objectchanged}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}
}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aevent_objectcha}}{\fldrslt }}{\cf1  }has not been sent to update all of the other visual instances.
\par zero\tab \tab The number has not changed.\line 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }The Number object's changed flag is set when a user begins editing the Number object. 
It is cleared when the user presses the Enter key or changes the input focus. Clearing the flag causes the object to commit the change and post an object-changed event so that all visual instances of an object will be updated.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_onmbrgettype}{\*\bkmkend idx_onmbrgettype}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_onmbrgettype}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ONmbrGetType}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP20:0040}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ONmbrGetType}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_number_object_functions')')}} ONmbrGetType
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }LONG ONmbrGetType(oiNumber)
\par \tab {\b\f12\fs18 Description\tab }This function determines the numeric storage mode of the specified Number object.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiNumber\tab OBJECTID\tab The ID of the Number object whose type is being requested.\line 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }Th
e return value is the storage mode of the object. If an error occurs, the return value is zero. The following table describes the possible return values.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab \tab Meaning
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 ONMBR_INTEGER\tab Values are stored as long integers.
\par ONMBR_REAL\tab \tab Values are stored as long doubles. \line 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_onmbrsetinteger}{\*\bkmkend idx_onmbrsetinteger}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_onmbrsetinteger}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ONmbrSetInteger}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP20:0045}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ONmbrSetInteger}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_number_object_functions')')}}
 ONmbrSetInteger
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }LONG ONmbrSetInteger(oiNumber, lValue, bChangeMode)
\par \tab {\b\f12\fs18 Description\tab }This function sets the value of the specified Number object to the value of the integer that was passed in.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiNumber\tab OBJECTID\tab The ID of the Number object whose value will be set by this function.
\par lValue\tab {\caps long\tab }An integer that is used to set the Number object.
\par bChangeMode
\par \tab BOOL \tab If oiNumber is a temporary object and this parameter is TRUE, the Number object's storage mode (real or whole) is forced to whole mode.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The following table describes the possible return values.
\par \pard\plain \f3\fs20\lang1033 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab Meaning
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 ONMBR_RANGE_ERR\tab The number is out of range.
\par ONMBR_HAS_CHANGED\tab The Number object has been changed.
\par zero\tab \tab The Number object's value is unchanged.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_onmbrsetreal}{\*\bkmkend idx_onmbrsetreal}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_onmbrsetreal}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ONmbrSetReal}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP20:0050}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ONmbrSetReal}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_number_object_functions')')}} ONmbrSetReal
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }LONG ONmbrSetReal(oiNumber, flValue, bChangeMode)
\par \tab {\b\f12\fs18 Description\tab }This function sets the value of the specified Number object to the real number value that was passed in.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiNumber\tab OBJECTID\tab The ID of the Number object whose value will be set by this function.
\par flValue\tab long double{\caps \tab }The value that will be used to set the Number object's value.
\par bChangeMode\tab BOOL \tab If oiNumber is a temporary object and this parameter is TRUE, the Number object's storage mode (real or whole) is forced to real mode.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The following table describes the possible return values.
\par 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab Meaning
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 ONMBR_RANGE_ERR\tab The number is out of range.
\par ONMBR_HAS_CHANGED\tab The Number object has changed.
\par zero\tab \tab The Number object's value is unchanged
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_onmbrsettype}{\*\bkmkend idx_onmbrsettype}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_onmbrsettype}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ONmbrSetType}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP20:0055}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ONmbrSetType}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_number_object_functions')')}} ONmbrSetType
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }LONG ONmbrSetType(oiNumber, mode)
\par \tab {\b\f12\fs18 Description\tab }This function sets the storage mode of the specified temporary Number object.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiNumber\tab OBJECTID \tab The ID of the Number object whose type is being set.
\par mode\tab LONG\tab The numeric storage mode; that is, ONMBR_INTEGER or ONMBR_REAL.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value is the storage mode of the object. If an error occurs, the return value
 is zero. The following table describes the possible return values.
\par 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab \tab Meaning
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 ONMBR_INTEGER\tab Values are stored as long integers.
\par ONMBR_REAL\tab \tab Values are stored as long doubles.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_the_text_object_}{\*\bkmkend idx_the_text_object_}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_the_text_object_api}}
{\plain \f3\fs16\cf2\up6\lang1033  }{\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPPOBJS:0020}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $}
 The Text Object API}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} The Text Object API}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_object_apis_and_protocols')')}} The Text Object API
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
The Text object API is the programming interface to ALM Text objects. The Text object provides a mechanism to display, edit, and manipulate text that is entered by the user or generated by the application.
 Text object API functions compare Text objects with other text strings. They also retrieve or set Text object values. To use the Text object API:
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }Your DLL source files have to include the file o_text.h.
\par {\cf5 \{bmc rr.bmp\}\tab }You have to link with alm_text.lib, which is the import library for the Text object.
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Text Object Data Types}{\v idx_text_object_data_types}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf6 gotobutton idx_text_object_data}}{\fldrslt }}
\par {\uldb\cf11 Text Object Functions}{\v idx_text_object_functions}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_text_object_func}
}{\fldrslt }}
\par 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_text_object_data}{\*\bkmkend idx_text_object_data}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_text_object_data_types}}{\caps\fs16\up6  
}{\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPPTEXT:0005}} {\caps\fs16\up6 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Text Object Data Types}} {\caps\fs16\up6 K{\footnote \pard\plain 
\s245 \f3\fs20\lang1033 {\fs16\up6 K} Text Object Data Types}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_the_text_object_api')')}} Text Object Data Types
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
One data type has been defined for the Text object API. Its name is OTEXT_CRLF_TYPE, and it enumerates the possible ways to handle the end of textual lines: OTEXT_CR, OTEXT_LF, and OTEXT_CRLF. 
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Text Object End-of-line Options}{\v idx_text_object_end_of_line_options}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf6 gotobutton idx_text_object_end_}}{\fldrslt }}
\par 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_text_object_end_}{\*\bkmkend idx_text_object_end_}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_text_object_end_of_line_options}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Text Object End-of-line Options}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {
\fs16\up6 +} SUPP21:0005}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Text Object End-of-line Options}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_text_object_data_types')')}} Text Object End-of-line Options
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The following table describes the Text object's end-of-line options.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 EOL Type\tab Description
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 OTEXT_CR\tab Only a carriage return has been inserted at the end of each line ('\\r' or 0x0A).
\par OTEXT_CRLF\tab A carriage return and a line feed were inserted at the end of each line ('\\r' + '\\n' or 0x0A + 0x0D).
\par OTEXT_LF\tab Only a line feed has been inserted at the end of each line ('\\n' or 0x0D).
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_text_object_func}{\*\bkmkend idx_text_object_func}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_text_object_functions}}{\caps\fs16\up6  }
{\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPPTEXT:0010}} {\caps\fs16\up6 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Text Object Functions}} {\caps\fs16\up6 K{\footnote \pard\plain 
\s245 \f3\fs20\lang1033 {\fs16\up6 K} Text Object Functions}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_the_text_object_api')')}} Text Object Functions
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The remainder of this section contains information about the Text object's functions.
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 OTextCompareWithBuffer}{\v idx_o}{\v textcomparewithbuffer}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf6 gotobutton idx_otextcomparewith}}{\fldrslt }}
\par {\uldb\cf11 OTextCompareWithMemblock}{\v idx_n1_otextcomparewithmemblock}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_n1_otextcomparew}
}{\fldrslt }}
\par {\uldb\cf11 OTextGetLength}{\v idx_otextgetlength}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_otextgetlength}}{\fldrslt }}
\par {\uldb\cf11 OTextGetToBuffer}{\v idx_otextgettobuffer}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_otextgettobuffer}}{\fldrslt }}
\par {\uldb\cf11 OTextGetToBufferEx}{\v idx_n1_otextgettobuf}{\v ferex}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_n1_otextgettobuf}
}{\fldrslt }}
\par {\uldb\cf11 OTextGetToMemblock}{\v idx_otextgettomemblock}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_otextgettomemblo}}{\fldrslt }}

\par {\uldb\cf11 OTextGetToMemblockEx}{\v idx_n1_otextgettomemblockex}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_n1_otextgettomem}
}{\fldrslt }}
\par {\uldb\cf11 OTextSetValueFromBuffer}{\v idx_otextsetvaluefrombuffer}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_otextsetvaluefro}
}{\fldrslt }}
\par {\uldb\cf11 OTextSetValueFromBufferEx}{\v idx_n1_otexts}{\v etvaluefrombufferex}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_n1_otextsetvalue}}{\fldrslt }}
\par {\uldb\cf11 OTextSetValueFromMemblock}{\v idx_n2_otextsetvaluefrommemblock}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_n2_otextsetvalue
}}{\fldrslt }}
\par {\uldb\cf11 OTextSetValueFromMemblockEx}{\v idx_n3_otextsetvaluefrommemblockex}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_n3_otextsetvalue}}{\fldrslt }}
\par 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_otextcomparewith}{\*\bkmkend idx_otextcomparewith}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_otextcomparewithbuffer}
} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OTextCompareWithBuffer}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP22:0005}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OTextCompareWithBuffer}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_text_object_functions')')}} OTextCompareWithBuffer
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }short OTextCompareWithBuffer(oiText, szBuffer)
\par \tab {\b\f12\fs18 Description\tab }This function does a character-by-character comparison of the text string from a specified Text object with the text string in the specified buffer. The comparison is case-sensitive.
\par 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiText\tab OBJECTID\tab The ID of the Text object where the text string is stored. 
\par szBuffer\tab LPSTR\tab The address of the buffer that holds the NULL-terminated comparison text string. The Text object's text string is compared against this text string.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value is less than zero if the lexical value of 
the string in the Text object is less than the lexical value of the string in the text buffer. It is greater than zero if the value in the Text object is greater than the value in the text buffer. The return value is zero if the two string values are equa
l. 
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }The language driver for the user-selected language determines whether the strings are the same. If they are not the same, it determines which string is greater. In the Mi
crosoft Windows United States language functions, uppercase characters have lower values than lowercase characters. Both strings have to be less than 64K bytes in size.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_n1_otextcomparew}{\*\bkmkend idx_n1_otextcomparew}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_n1_otextcomparewithmemblock}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OTextCompareWithMemblock}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +}
 SUPP22:0010}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OTextCompareWithMemblock}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_text_object_functions')')}} OTextCompareWithMemblock
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }short OTextCompareWithMemblock(oiText, miBuffer)
\par \tab {\b\f12\fs18 Description\tab }This function does a character-by-character comparison of the text string from a specified Text object with the text string in the specified memory block. The comparison is case-sensitive.
\par 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiText\tab OBJECTID\tab The ID of the Text object where the text string is stored.
\par miBuffer\tab MEMBLOCKID\tab The memory block where the NULL-terminated comparison text string is being held. The Text object's text string is compared against this text string. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }
The return value is less than zero if the lexical value of the string in the Text object is less than the lexical value of the string in the memory block. It is greater than zero if the value in the Text object is greater than the value in the text buffer
. The return value is zero if the two string values are equal. 
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time.
\par \tab {\b\f12\fs18 Comments\tab }
The language driver for the user-selected language determines whether the strings are the same. If they are not the same, it determines which string is greater. In the Microsoft Windows United States language functions, uppercase characters have lower val
ues than lowercase characters. Both strings have to be less than 64K bytes in size.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_otextgetlength}{\*\bkmkend idx_otextgetlength}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_otextgetlength}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OTextGetLength}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP22:0015}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OTextGetLength}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_text_object_functions')')}}
 OTextGetLength
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Synta}{\b\f12\fs18 x\tab }WORD OTextGetLength(oiText)
\par \tab {\b\f12\fs18 Description\tab }This function retrieves the length of the text string that is associated with the specified Text object. The length does not include the terminating NULL character.
\par 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiText\tab OBJECTID\tab The ID of the Text object that contains the text string. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }
The return value equals the number of eight-bit characters in the object's text string. The number of characters does not include the terminating NULL character.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_otextgettobuffer}{\*\bkmkend idx_otextgettobuffer}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_otextgettobuffer}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OTextGetToBuffer}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP22:0020}} {\plain \f3\fs16\cf2\up6\lang1033 
K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OTextGetToBuffer}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_text_object_functions')')}}
 OTextGetToBuffer
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }WORD OTextGetToBuffer(oiText, szBuffer, bufferLen)
\par \tab {\b\f12\fs18 Description\tab }This function retrieves the text string from a specified Text object and places it in a buffer.
\par 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiText\tab OBJECTID\tab The ID of the Text object that contains the text string. 
\par szBuffer\tab LPSTR\tab The address of the buffer that will hold the text string retrieved from the Text object.
\par bufferLen\tab WORD\tab The size of szBuffer.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }
The return value equals the number of characters in the returned text string, including the terminating NULL character.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }After this function has been called, the szBuffer string buffer holds a maximum of (bufferLen \endash  1) characters. The string is NULL terminated.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_n1_otextgettobuf}{\*\bkmkend idx_n1_otextgettobuf}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_n1_otextgettobufferex}}
 {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OTextGetToBufferEx}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP22:0025}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OTextGetToBufferEx}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_text_object_functions')')}} OTextGetToBufferEx
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }WORD OTextGetToBufferEx(oiText, szBuffer, bufferLen, fCrLf)
\par \tab {\b\f12\fs18 Description\tab }This function retrieves the text string from a specified Text object, and, using the specified end-of-line termination characters, places it in a buffer.
\par 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiText\tab OBJECTID\tab The ID of the Text object that contains the text string. 
\par szBuffer\tab LPSTR \tab The address of the NULL-terminated buffer that will hold the Text object's text string.
\par bufferLen\tab WORD\tab The length, in bytes, of szBuffer. 
\par fCrLf\tab OTEXT_CRLF_TYPE \line An end-of-line delimiter option that specifies which line-termination characters are to be used with the text string. Refer to the section on Text Object End-of-Line Options for more information.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }
The return value equals the number of characters in the returned text string and includes the terminating NULL character.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }After this function has been called, szBuffer holds a maximum of (bufferLen \endash  1) characters. The string is NULL terminated.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_otextgettomemblo}{\*\bkmkend idx_otextgettomemblo}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_otextgettomemblock}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OTextGetToMemblock}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP22:0030}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OTextGetToMemblock}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_text_object_functions')')}} OTextGetToMemblock
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }WORD OTextGetToMemblock(oiText, miBuffer)
\par \tab {\b\f12\fs18 Description\tab }This function retrieves the text string from a specified Text object and places it in a memory block.
\par 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiText\tab OBJECTID\tab The ID of the Text object that contains the text string. 
\par miBuffer\tab MEMBLOCKID\tab The memory block that will hold the Text object's text string. The memory block has to be unlocked so that it can be resized by the Text object.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value equals the number of characters in the returned text string, including the terminati
ng NULL character.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_n1_otextgettomem}{\*\bkmkend idx_n1_otextgettomem}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_n1_otextgettomemblockex
}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OTextGetToMemblockEx}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP22:0035}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OTextGetToMemblockEx}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_text_object_functions')')}} OTextGetToMemblockEx
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }WORD OTextGetToMemblockEx(oiText, miBuffer, fCrLf)
\par \tab {\b\f12\fs18 Description\tab }This function retrieves the text string from a specified Text object, places it in a memory block, and uses the specified line-termination characters.
\par 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiText\tab OBJECTID\tab The ID of the Text object that contains the text string. 
\par miBuffer\tab MEMBLOCKID \tab The memory block that will hold the NULL-terminated text string retrieved from the Text object. The memory block {\i has }to be unlocked.
\par fCrLf\tab OTEXT_CRLF_TYPE\line An end-of-line delimiter option that specifies which line-termination characters are to be extracted from the text string. Refer to the section on Text Object End-of-line Options for more information.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }
The return value equals the number of characters in the returned text string and includes the terminating NULL character.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_otextsetvaluefro}{\*\bkmkend idx_otextsetvaluefro}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_otextsetvaluefrombuffer
}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OTextSetValueFromBuffer}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP22:0040}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OTextSetValueFromBuffer}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_text_object_functions')')}} OTextSetValueFromBuffer
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }BOOL OTextSetValueFromBuffer(oiText, szBuffer)
\par \tab {\b\f12\fs18 Description\tab }This function sets the text string of a Text object to the value stored in the specified buffer.
\par 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiText\tab OBJECTID\tab The ID of the Text object that contains the text string. 
\par szBuffer\tab LPSTR\tab The address of the NULL-terminated buffer where the new text string is located. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value equals TRUE when the Te
xt object was changed. It is  FALSE when the Text object's value was unchanged or when an error occurs.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }The function returns FALSE when the Text object and the buffer have the same value.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_n1_otextsetvalue}{\*\bkmkend idx_n1_otextsetvalue}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_n1_otextsetvaluefrombufferex}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OTextSetValueFromBufferEx}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +}
 SUPP22:0045}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OTextSetValueFromBufferEx}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_text_object_functions')')}} OTextSetValueFromBufferEx
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }WORD OTextSetValueFromBufferEx(oiText, szBuffer)
\par \tab {\b\f12\fs18 Description\tab }This function sets the text string of a Text object to the value stored in the specified buffer. It also inserts any end-of-line delimiters that are needed.
\par 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiText\tab OBJECTID\tab The ID of the Text object that contains the text string. 
\par szBuffer\tab LPSTR \tab The address of the NULL-terminated buffer where the Text object's new text string is being held.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }
The return value equals TRUE if the Text object was changed and FALSE if the Text object's value was unchanged or if an error occurs.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }The function returns FALSE when the Text object and the buffer have the same value.
\par {\cf5 \{bmc rr.bmp\}\tab }The function expands single occurrences of <CR> or <LF> to <CR><LF>.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_n2_otextsetvalue}{\*\bkmkend idx_n2_otextsetvalue}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_n2_otextsetvaluefrommemblock}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OTextSetValueFromMemblock}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +}
 SUPP22:0050}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OTextSetValueFromMemblock}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_text_object_functions')')}} OTextSetValueFromMemblock
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }BOOL OTextSetValueFromMemblock(oiText, miBuffer)
\par \tab {\b\f12\fs18 Description\tab }This function sets the text string of a Text object to the value stored in the specified memory block.
\par 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiText\tab OBJECTID\tab The ID of a Text object that contains the text string. 
\par miBuffer\tab MEMBLOCKID\tab The memory block where the Text object's new NULL-terminated text string is being held.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }
The return value equals TRUE if the Text object was changed. It is FALSE if the Text object's value was unchanged or if an error occurs.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }The function returns FALSE when the Text object and the buffer have the same value.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_n3_otextsetvalue}{\*\bkmkend idx_n3_otextsetvalue}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_n3_otextsetvaluefrommemblockex}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OTextSetValueFromMemblockEx}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +}
 SUPP22:0055}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OTextSetValueFromMemblockEx}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_text_object_functions')')}} OTextSetValueFromMemblockEx
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }BOOL OTextSetValueFromMemblockEx(oiText, miBuffer)
\par \tab {\b\f12\fs18 Description\tab }This function sets the text string of a Text object to the value stored in the specified memory block. It also inserts any carriage-control characters that are needed.
\par 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiText\tab OBJECTID\tab The ID of the Text object that contains the text string. 
\par miBuffer\tab MEMBLOCKID\tab The memory block that holds the Text object's new NULL-terminated text string. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }
The return value equals TRUE if the Text object was changed and FALSE if the Text object's value was unchanged or if an error occurs.
\par \tab {\b\f12\fs18 Avai}{\b\f12\fs18 lability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }The function returns FALSE when the Text object and the buffer have the same value.
\par {\cf5 \{bmc rr.bmp\}\tab }The function expands single occurrences of <CR> or <LF> to <CR><LF>.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_the_time_object_}{\*\bkmkend idx_the_time_object_}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_the_time_object_api}}
{\plain \f3\fs16\cf2\up6\lang1033  }{\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPPOBJS:0025}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $}
 The Time Object API}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} The Time Object API}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_object_apis_and_protocols')')}} The Time Object API
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
The Time object API is the programming interface to the ALM Time object. The Time object provides a mechanism to display, edit and manipulate times entered by the user or generated by the operating system. Time object AP
I functions convert time data to the available formats and styles. To use the Time object API:
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }Your DLL source files have to include the file o_time.h.
\par {\cf5 \{bmc rr.bmp\}\tab }You have to link with alm_time.lib, which is the import library for the Time object.
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Time Object Types and Structures}{\v idx_time_object_types_and_structures}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}
}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_time_object_type}}{\fldrslt }}
\par {\uldb\cf11 Time Object Macros}{\v idx_time_object_macros}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobu}{\cf6 tton idx_time_object_macr}
}{\fldrslt }}
\par {\uldb\cf11 Time Object Functions}{\v idx_time_object_functions}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_time_object_func}
}{\fldrslt }}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_time_object_type}{\*\bkmkend idx_time_object_type}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_time_object_types_and_structures}}{
\caps\fs16\up6  }{\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPPTIME:0005}} {\caps\fs16\up6 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Time Object Types and Structures}} {\caps\fs16\up6 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Time Object Types and Structures}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_the_time_object_api')')}}
 Time Object Types and Structures
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The Time object defines one type (OTIME) and one structure (OTIMEHMS).
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 OTIME}{\v idx_otime}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_otime}
}{\fldrslt }}
\par {\uldb\cf11 OTIMEHMS}{\v idx_otimehms}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_otimehms}}{\fldrslt }}
\par 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_otime}{\*\bkmkend idx_otime}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_otime}} {\plain \f3\fs16\cf2\up6\lang1033 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OTIME}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP23:0005}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 K} OTIME}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_time_object_types_and_structures')')}} OTIME
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Description\tab }The type, OTIME, is a si
gned, 32-bit integer that represents the number of elapsed seconds since midnight. OTIME has the following structure:
\par \pard\plain \s26\li1440\ri432\tx288\tx576\tqr\tlul\tx864\tx1440\tx1728\tx1890\tqr\tlul\tx1980\tx2304\tqr\tlul\tx2592\tlul\tx2880\tqc\tlul\tx3168\tx3240\tx3456\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 typedef long OTIME;

\par 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Comments\tab }The OTIME type is not directly compatible with the ANSI C types time_t and tm.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_otimehms}{\*\bkmkend idx_otimehms}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_otimehms}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OTIMEHMS}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP23:0010}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OTIMEHMS}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_time_object_types_and_structures')')}} OTIMEHMS
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Description\tab }
The OTIMEHMS structure represents a time value. It defines the hour, the minute, and the second for a specified time. OTIMEHMS has the following structure:
\par \pard\plain \s26\li1440\ri432\sb120\tx288\tx576\tqr\tlul\tx864\tx1440\tx1728\tx1890\tqr\tlul\tx1980\tx2304\tqr\tlul\tx2592\tlul\tx2880\tqc\tlul\tx3168\tx3240\tx3456\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 
typedef struct OTIMEHMS
\par \pard \s26\li1440\ri432\tx288\tx576\tqr\tlul\tx864\tx1440\tx1728\tx1890\tqr\tlul\tx1980\tx2304\tqr\tlul\tx2592\tlul\tx2880\tqc\tlul\tx3168\tx3240\tx3456\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \tab \{
\par \tab short\tab hour;
\par \tab short\tab min;
\par \tab short\tab sec;
\par \tab \}OTIMEHMS;
\par typedef OTIMEHMS far * pOTIMEHMS;
\par 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The OTIMEHMS structure has the following fields:
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Field\tab Description
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 hour\tab The time's hour component (0\endash 23).
\par min\tab The time's minute component (0\endash 59). 
\par sec\tab The time's second component (0\endash 59).
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Comments\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_time_object_macr}{\*\bkmkend idx_time_object_macr}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_time_object_macros}}{\caps\fs16\up6  }
{\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPPTIME:0010}} {\caps\fs16\up6 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Time Object Macros}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 K} Time Object Macros}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_the_time_object_api')')}} Time Object Macros
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 This section contains information about general macro constants, time component macros, and time style macros.
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 General Macro Constants}{\v idx_n1_general_macro_constants}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf6 gotobutton idx_n1_general_ma}{\cf6 cro}}{\fldrslt }}
\par {\uldb\cf11 Time Component Macros}{\v idx_time_component_macros}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_time_component_m}
}{\fldrslt }}
\par {\uldb\cf11 Time Style Macros}{\v idx_time_style_macros}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_time_style_macro}}{\fldrslt }}

\par 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_n1_general_macro}{\*\bkmkend idx_n1_general_macro}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_n1_general_macro_constants}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} General Macro Constants}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +}
 SUPP24:0005}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} General Macro Constants}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_time_object_macros')')}} General Macro Constants
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The following macros represent constant numbers used in the manipulation of the Time object.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Mnemonic\tab \tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 OTIME_MAX_TEXT_LENGTH\tab The maximum length of the time's text-string representation.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_time_component_m}{\*\bkmkend idx_time_component_m}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_time_component_macros}}
 {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Time Component Macros}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP24:0010}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Time Component Macros}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_time_object_macros')')}} Time Component Macros
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The following macros are used by the OTimeParseString function to create a bit mask that shows which time components are present in a time string.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Mnemonic\tab \tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 OTIME_HOUR_SUPPLIED\tab The time string includes an explicit hour value. 
\par OTIME_MIN_SUPPLIED\tab The time string includes an explicit minute value. 
\par OTIME_SEC_SUPPLIED\tab The time string includes an explicit second value. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_time_style_macro}{\*\bkmkend idx_time_style_macro}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_time_style_macros}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Time Style Macros}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP24:0015}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Time Style Macros}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_time_object_macros')')}} Time Style Macros
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The following macros represent the time style used during the generation of time strings.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Mnemonic\tab \tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 OTIME_STYLE_SEC\tab 
A time style involving seconds is being used in the time. Time strings of this style contain ":" delimiters between the hour, minute, and second fields (for example, 11:53:32).
\par OTIME_STYLE_KEEPCURRENT
\par \tab \tab The time style is updated from the system time.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_time_object_func}{\*\bkmkend idx_time_object_func}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_time_object_functions}}{\caps\fs16\up6  }
{\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPPTIME:0015}} {\caps\fs16\up6 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Time Object Functions}} {\caps\fs16\up6 K{\footnote \pard\plain 
\s245 \f3\fs20\lang1033 {\fs16\up6 K} Time Object Functions}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_the_time_object_api')')}} Time Object Functions
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The remainder of this section contains information about the Time object's functions.
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 OTimeConvertFromString}{\v idx_otimeconvertfromstring}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutto}{\cf6 n DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf6 gotobutton idx_otimeconvertfrom}}{\fldrslt }}
\par {\uldb\cf11 OTimeConvertToString}{\v idx_otimeconverttostring}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_otimeconverttost}
}{\fldrslt }}
\par {\uldb\cf11 OTimeFormatTime}{\v idx_otimeformattime}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_otimeformattime}}{\fldrslt }}
\par {\uldb\cf11 OTimeFromHMS}{\v idx_otimefromhms}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_otimefromhms}}{\fldrslt }}
\par {\uldb\cf11 OTimeGetStyle}{\v idx_otimegetstyle}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_otimegetstyle}}{\fldrslt }}
\par {\uldb\cf11 OTim}{\uldb\cf11 eGetValue}{\v idx_otimegetvalue}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_otimegetvalue}}{\fldrslt }}

\par {\uldb\cf11 OTimeParseString}{\v idx_otimeparsestring}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_otimeparsestring}}{\fldrslt }}
\par {\uldb\cf11 OTimeSetValue}{\v idx_otimesetvalue}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_otimesetvalue}}{\fldrslt }}
\par {\uldb\cf11 OTimeStringToTime}{\v idx_otimestringtotime}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_otimestringtotim}}{\fldrslt }}

\par {\uldb\cf11 OTimeToHMS}{\v idx_otimetohms}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobu}{\cf6 tton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_otimetohms}}{\fldrslt }}
\par 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_otimeconvertfrom}{\*\bkmkend idx_otimeconvertfrom}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_otimeconvertfromstring}
} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OTimeConvertFromString}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP25:0005}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OTimeConvertFromString}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `J
I(`', `idx_time_object_functions')')}} OTimeConvertFromString
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }BOOL OTimeConvertFromString(oiTime, szBuffer)
\par \tab {\b\f12\fs18 Description\tab }This function converts the specified time from a character-string format to the AppWare Time object's format.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiTime\tab OBJECTID\tab The object ID of the Time object that will hold the converted time. 
\par szBuffer\tab LPSTR\tab The address of the time string that will be stored in the Time object.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value is TRUE if the function sets the time successfully and FALSE if it cannot set the time.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }The string can specify the time in a 12-hour or 24-hour format. To specify the 12-hour and 24-hour time formats, use the Control Panel. The following table contains examples.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Example\tab Comments
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 3:32:15 PM\tab The 12-hour format.
\par 15:32:15\tab The 24-hour format. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_otimeconverttost}{\*\bkmkend idx_otimeconverttost}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_otimeconverttostring}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OTimeConvertToString}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP25:0010}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OTimeConvertToString}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_time_object_functions')')}} OTimeConvertToString
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }short{\caps  }OTimeConvertToString(oiTime, szBuffer, bufferLen)
\par \tab {\b\f12\fs18 Description\tab }This function converts the time stored in the specified ALM Time object into a character string.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiTime\tab OBJECTID\tab The ID of the Time object that contains the time. 
\par szBuffer\tab LPSTR\tab The address of the buffer that will hold the time string retrieved from the Time object.
\par bufferLen\tab short\tab The size of szBuffer.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value equals the number of characters in the returned time string.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time.
\par \tab {\b\f12\fs18 Comments\tab }After this function has been called, szBuffer holds a maximum of (bufferLen \endash 
 1) characters. The return string is NULL terminated. The value of bufferLen should generally be set to OTIME_MAX_TEXT_LENGTH. The format of the generated string depends on the f
ormat that was configured for the specified time object and the format that was specified with the Control Panel. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_otimeformattime}{\*\bkmkend idx_otimeformattime}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_otimeformattime}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OTimeFormatTime}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP25:0015}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OTimeFormatTime}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_time_object_functions')')}}
 OTimeFormatTime
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }short{\caps  }OTimeFormatTime(oiTime, seconds, szBuffer, bufferLen)
\par \tab {\b\f12\fs18 Description\tab }This function formats a time into the same format as the one used in the specified Time object and converts the time into a character string.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiTime\tab OBJECTID\tab The ID of the Time object whose format will be used as a model during generation of the time character string.
\par seconds\tab OTIME\tab The time to be formatted. Its value is measured by the number of elapsed seconds since midnight.
\par szBuffer\tab LPSTR\tab The address of the buffer that will hold the formatted time string.
\par bufferLen\tab short{\caps \tab }The size of szBuffer.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value equals the number of characters in the returned time string.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }After this function has been called, szBuffer holds a maximum of \line (bufferLen \endash  1) characters. The return string is NULL terminated. The value of bufferLen is generally set to OTIME_MAX_TEXT_LENGTH. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_otimefromhms}{\*\bkmkend idx_otimefromhms}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_otimefromhms}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OTimeFromHMS}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP25:0020}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OTimeFromHMS}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_time_object_functions')')}} OTimeFromHMS
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }OTIME OTimeFromHMS(pHMSTime)
\par \tab {\b\f12\fs18 Description\tab }This function converts the specified time from the HMS format to Greenwich mean time. The time-zone offset is zero. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pHMSTime\tab pOTIMEHMS\tab The address of the OTIMEHMS structure that contains the time to be converted.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value is the time, measured by the number of elapsed seconds since midnight.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time.
\par \tab {\b\f12\fs18 Comments\tab }None. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_otimegetstyle}{\*\bkmkend idx_otimegetstyle}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_otimegetstyle}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OTimeGetStyle}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP25:0025}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OTimeGetStyle}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_time_object_functions')')}} OTimeGetStyle

\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\caps \tab }{\b\f12\fs18 Syntax}{\b\caps\f12\fs18 \tab }{\caps long }OTimeGetStyle(oiTime)
\par \tab {\b\f12\fs18 Description\tab }This function determines the time style of the specified Time object.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiTime\tab OBJECTID\tab The ID of the Time object whose time style has been requested.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }
The return value indicates which time styles are used by the specified Time object. If the function succeeds, the return value is the bit-wise OR of the style bits listed in the following table. The values correspond to the styles used by the object.
\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab \tab Meaning
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 OTIME_STYLE_SEC\tab The time style is one that involves the use of seconds. Time strings of this s
tyle contain ":" delimiters between the hour, minute, and second fields (for example, 11:53:32).
\par OTIME_STYLE_KEEPCURRENT
\par \tab \tab The time style is updated from the system time.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_otimegetvalue}{\*\bkmkend idx_otimegetvalue}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_otimegetvalue}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OTimeGetValue}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP25:0030}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OTimeGetValue}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_time_object_functions')')}} OTimeGetValue

\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }OTIME OTimeGetValue(oiTime)
\par \tab {\b\f12\fs18 Description\tab }This function retrieves the time of the specified Time object. The time is represented as the number of elapsed seconds since midnight.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiTime\tab OBJECTID\tab The ID of the Time object whose time will be retrieved.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value is the time that corresponds to the one stored in the Time object.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time.
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_otimeparsestring}{\*\bkmkend idx_otimeparsestring}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_otimeparsestring}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OTimeParseString}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP25:0035}} {\plain \f3\fs16\cf2\up6\lang1033 
K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OTimeParseString}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_time_object_functions')')}}
 OTimeParseString
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\caps \tab }{\b\f12\fs18 Syntax}{\b\caps\f12\fs18 \tab }{\caps long }OTimeParseString(szBuffer)
\par \tab {\b\f12\fs18 Description\tab }This function parses the specified time string to determine whether the string contains any combination of hours, minutes, or seconds.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 szBuffer\tab LPSTR\tab The time string to be parsed.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }
The return value consists of a bit mask that shows which time components are present. If none of them are present, the return value is zero. The following table lists the possible elements that might be contained in the return value.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab \tab Meaning
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 OTIME_HOUR_SUPPLIED\tab The time string contains a value for the hour.
\par OTIME_MIN_SUPPLIED\tab The time string contains a value for the minute.
\par OTIME_SEC_SUPPLIED\tab The time string contains a value for the second. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }
The string can specify the time in a 12-hour or 24-hour format. To specify the 12-hour and 24-hour time formats, use the Control Panel. If OTIME_MIN_SUPPLIED is set, OTIME_SEC_SUPPLIED will also be set. If OTIME_SEC_SUPPLIED is set, OTIME_MIN_SUPPLIED and
 OTIME_HOUR_SUPPLIED will also be set. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_otimesetvalue}{\*\bkmkend idx_otimesetvalue}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_otimesetvalue}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OTimeSetValue}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP25:0040}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OTimeSetValue}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_time_object_functions')')}} OTimeSetValue

\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }BOOL OTimeSetValue(oiTime, seconds)
\par \tab {\b\f12\fs18 Description\tab }This function sets the time value of the specified Time object. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiTime\tab OBJECTID\tab The ID for the Time object that will hold the converted time. 
\par seconds\tab OTIME\tab The representation of the time, measured in the number of elapsed seconds since midnight, that is to be stored in the Time object.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value is TRUE if the function succeeds in setting the time and FALSE if it cannot set the time.

\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_otimestringtotim}{\*\bkmkend idx_otimestringtotim}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_otimestringtotime}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OTimeStringToTime}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP25:0045}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OTimeStringToTime}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_time_object_functions')')}} OTimeStringToTime
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }OTIME OTimeStringToTime(szBuffer)
\par \tab {\b\f12\fs18 Description\tab }This function converts the specified time string into a number that represents the number of elapsed seconds since midnight.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 szBuffer\tab LPSTR\tab The time string to be converted.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }
The return value is the time, measured in the number of elapsed seconds since midnight, that corresponds to the specified time string.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time.
\par \tab {\b\f12\fs18 Comments\tab }The string can specify the time in a 12-hour or 24-hour format. To specify the 12-hour and 24-hour time formats, use the Control Panel.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_otimetohms}{\*\bkmkend idx_otimetohms}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_otimetohms}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OTimeToHMS}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP25:0050}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OTimeToHMS}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_time_object_functions')')}} OTimeToHMS
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void{\caps  }OTimeToHMS(theTime, pHMSTime)
\par \tab {\b\f12\fs18 Description\tab }This function converts the specified time to the HMS format.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 theTime\tab OTIME\tab The time to be converted, measured in the number of elapsed seconds since midnight.
\par pHMSTime\tab pOTIMEHMS\tab The address of the OTIMEHMS structure where the converted time will be placed.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time.
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_the_window_objec}{\*\bkmkend idx_the_window_objec}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_the_window_object_api}}
{\plain \f3\fs16\cf2\up6\lang1033  }{\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPPOBJS:0030}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $}
 The Window Object API}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} The Window Object API}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_object_apis_and_protocols')')}} The Window Object API
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
The Window object API is the programming interface to ALM Window objects. It enables an application so that the application can display and control windows. Each window can contain window items. To use the Window object API:
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }Your DLL source files have to include the file o_wnd.h.
\par {\cf5 \{bmc rr.bmp\}\tab }You have to link with alm_wnd.lib, which is the import library for the Window object.
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\uldb\cf11 Chapter 2}{\v idx_chapter_2}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}
}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_chapter_2}}{\fldrslt }}{\cf1  }contains information about the window item protocol.
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Window Object Functions}{\v idx_window_object_functions}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf6 gotobutton idx_window_object_fu}}{\fldrslt }}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_window_object_fu}{\*\bkmkend idx_window_object_fu}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_window_object_functions}} {
\caps\fs16\up6 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} wINDOW Object Functions}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} wINDOW Object Functions}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_the_window_object_api')')}} Window Object Functions
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The remainder of this section contains information about the Window object's functions.
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 OWndActivateWindow}{\v idx_owndactivatewindow}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobut}{\cf6 ton idx_owndactivatewind}}{\fldrslt }}
\par {\uldb\cf11 OWndCallEachVisualInstance}{\v idx_owndcalleachvisualinstance}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndcalleachvisu}
}{\fldrslt }}
\par {\uldb\cf11 OWndCreateFontTmm}{\v idx_owndcreatefonttmm}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndcreatefonttm}}{\fldrslt }}

\par {\uldb\cf11 OWndCreateWindowEx}{\v idx_owndcreatewindowex}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndcreatewindow}}{\fldrslt }}

\par {\uldb\cf11 OWndDoesItemUseCancelKey}{\v idx_ownddoesitemusecancelkey}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 g}{\cf6 
otobutton idx_ownddoesitemusec}}{\fldrslt }}
\par {\uldb\cf11 OWndDoesItemUseCursorKeys}{\v idx_n1_ownddoesitemusecursorkeys}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_n1_ownddoesitemu
}}{\fldrslt }}
\par {\uldb\cf11 OWndDoesItemUseDefautlKey}{\v idx_ownddoesitemusedefaultkey}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_ownddoesitemused}
}{\fldrslt }}{\cf1 
\par }{\uldb\cf11 OWndDoesItemUseTab}{\v idx_ownddoesitemusetab}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_ownddoesitemuset}}{\fldrslt }}

\par {\uldb\cf11 OWndDeleteFont}{\v idx_ownddeletefont}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_ownddeletefont}}{\fldrslt }}
\par {\uldb\cf11 OWndDPtoLP}{\v idx_ownddptolp}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_ownddptolp}}{\fldrslt }}
\par {\uldb\cf11 OWndDStoLS}{\v idx_ownddstols}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_ownddstols}}{\fldrslt }}
\par {\uldb\cf11 OWndGetActiveItem}{\v idx_owndgetactiveitem}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndgetactiveite}}{\fldrslt }}

\par {\uldb\cf11 OWndGetActiveMenuBar}{\v idx_owndgetactivemenubar}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndgetactivemen}
}{\fldrslt }}
\par {\uldb\cf11 OWndGetActiveWindowObject}{\v idx}{\v _owndgetactivewindowobject}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_owndgetactivewin}}{\fldrslt }}
\par {\uldb\cf11 OWndGetCaptureItem}{\v idx_owndgetcaptureitem}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndgetcaptureit}}{\fldrslt }}

\par {\uldb\cf11 OWndGetClientRect}{\v idx_owndgetclientrect}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndgetclientrec}}{\fldrslt }}

\par {\uldb\cf11 OWndGetItemControlID}{\v idx_owndgetitemcontrolid}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndgetitemcontr}
}{\fldrslt }}
\par {\uldb\cf11 OWndGetNextItem}{\v idx_owndgetnextit}{\v em}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndgetnextitem}}{\fldrslt }}

\par {\uldb\cf11 OWndGetPreviousItem}{\v idx_owndgetpreviousitem}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndgetpreviousi}}{\fldrslt }}

\par {\uldb\cf11 OWndHideItem}{\v idx_owndhideitem}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndhideitem}}{\fldrslt }}
\par {\uldb\cf11 OWndHideMenuBar}{\v idx_owndhidemenubar}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndhidemenubar}}{\fldrslt }}
\par {\uldb\cf11 OWndInvalidateLogicalRect}{\v idx_owndinvalidatelogicalrect}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 m}{\cf6 acrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_owndinvalidatelo}}{\fldrslt }}
\par {\uldb\cf11 OWndIsHwndItem}{\v idx_owndishwnditem}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndishwnditem}}{\fldrslt }}
\par {\uldb\cf11 OWndIsItemActivatable}{\v idx_owndisitemactivatable}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndisitemactiva}
}{\fldrslt }}
\par {\uldb\cf11 OWndIsItemCancel}{\v idx_owndisitemcancel}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndisitemcancel}}{\fldrslt }}
\par {\uldb\cf11 OWndIsItemDefault}{\v idx_owndisitemdefault}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobut}{\cf6 ton idx_owndisitemdefaul}
}{\fldrslt }}
\par {\uldb\cf11 OWndIsItemEnabled}{\v idx_owndisitemenabled}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndisitemenable}}{\fldrslt }}

\par {\uldb\cf11 OWndIsItemGroup}{\v idx_owndisitemgroup}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndisitemgroup}}{\fldrslt }}
\par {\uldb\cf11 OWndIsItemShape}{\v idx_owndisitemshape}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndisitemshape}}{\fldrslt }}
\par {\uldb\cf11 OWndIsItemTransparent}{\v idx_owndisitemtransparent}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndisitemtransp}
}{\fldrslt }}
\par {\uldb\cf11 OWn}{\uldb\cf11 dIsItemVisible}{\v idx_owndisitemvisible}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndisitemvisibl}
}{\fldrslt }}
\par {\uldb\cf11 OWndIsLayoutTime}{\v idx_owndislayouttime}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndislayouttime}}{\fldrslt }}
\par {\uldb\cf11 OWndIsLiteItem}{\v idx_owndisliteitem}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndisliteitem}}{\fldrslt }}
\par {\uldb\cf11 OWndIsWindowColor}{\v idx_owndiswindowcolor}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndiswindowcolo}}{\fldrslt }}

\par {\uldb\cf11 OWndItemFromUID}{\v idx_ownditemfromuid}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_ownditemfromuid}}{\fldrslt }}
\par {\uldb\cf11 OWndLPtoDP}{\v idx_owndlptodp}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndlptodp}}{\fldrslt }}
\par {\uldb\cf11 OWndLStoDS}{\v idx_owndlstods}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndlstods}}{\fldrslt }}
\par {\uldb\cf11 OWndMoveWindow}{\v idx_owndmovewindow}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndmovewindow}}{\fldrslt }}
\par {\uldb\cf11 OWndRedrawMenuBar}{\v idx_owndredrawmenubar}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndredrawmenuba}}{\fldrslt }}

\par {\uldb\cf11 O}{\uldb\cf11 WndReleaseCapture}{\v idx_owndreleasecapture}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndreleasecaptu}
}{\fldrslt }}
\par {\uldb\cf11 OWndReleaseCursor}{\v idx_owndreleasecursor}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndreleasecurso}}{\fldrslt }}

\par {\uldb\cf11 OWndSetActiveItem}{\v idx_owndsetactiveitem}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndsetactiveite}}{\fldrslt }}

\par {\uldb\cf11 OWndSetCancelItem}{\v idx_owndsetcancelitem}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndsetcancelite}}{\fldrslt }}

\par {\uldb\cf11 OWndSetCaptureItem}{\v idx_ownds}{\v etcaptureitem}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndsetcaptureit}
}{\fldrslt }}
\par {\uldb\cf11 OWndSetCursor}{\v idx_owndsetcursor}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndsetcursor}}{\fldrslt }}
\par {\uldb\cf11 OWndSetDefaultItem}{\v idx_owndsetdefaultitem}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndsetdefaultit}}{\fldrslt }}

\par {\uldb\cf11 OWndSetItemAccelKey}{\v idx_owndsetitemaccelkey}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndsetitemaccel}}{\fldrslt }}

\par {\uldb\cf11 OWndSetItemActivatable}{\v idx_owndsetitemactivatable}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndsetitemactiv}
}{\fldrslt }}
\par {\uldb\cf11 OWndSetItemEnabled}{\v idx_owndsetitemenabled}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndsetitemenabl}}{\fldrslt }}

\par {\uldb\cf11 OWndSetItemIsGroup}{\v idx_owndsetitemisgroup}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndsetitemisgro}}{\fldrslt }}

\par {\uldb\cf11 OWndSetItemIsShape}{\v idx_owndsetitemisshape}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndsetitemissha}}{\fldrslt }}

\par {\uldb\cf11 OWndSetItemTransparent}{\v idx_owndsetitemtransparent}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndsetitemtrans}
}{\fldrslt }}
\par {\uldb\cf11 OWndSetItemUsesCancelKey}{\v idx_owndsetitemusescancelkey}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndsetitemusesc}
}{\fldrslt }}
\par {\uldb\cf11 OWndSetItemUsesCursorKeys}{\v idx_n1_owndsetitemusescursorkeys}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_n1_owndsetitemus
}}{\fldrslt }}
\par {\uldb\cf11 OWndSetItemUsesDefaultKey}{\v idx_owndsetitemusesdefaultkey}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndsetitemusesd}
}{\fldrslt }}
\par {\uldb\cf11 OWndSetItemUsesTab}{\v idx_owndsetitemusesta}{\v b}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndsetitemusest}
}{\fldrslt }}
\par {\uldb\cf11 OWndSetItemVisible}{\v idx_owndsetitemvisible}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndsetitemvisib}}{\fldrslt }}

\par {\uldb\cf11 OWndSetMenuBar}{\v idx_owndsetmenubar}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndsetmenubar}}{\fldrslt }}
\par {\uldb\cf11 OWndSimulateAccelKey}{\v idx_owndsimulateaccelkey}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndsimulateacce}
}{\fldrslt }}
\par {\uldb\cf11 OWndShowItem}{\v idx_owndshowitem}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton }{\cf6 DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndshowitem}}{\fldrslt }}
\par {\uldb\cf11 OWndShowMenuBar}{\v idx_owndshowmenubar}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndshowmenubar}}{\fldrslt }}
\par {\uldb\cf11 OWndUIDFromItem}{\v idx_ownduidfromitem}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_ownduidfromitem}}{\fldrslt }}
\par {\uldb\cf11 OWndValidateLogicalRect}{\v idx_owndvalidatelogicalrect}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_owndvalidatelogi}
}{\fldrslt }}
\par {\uldb\cf11 OWndWindowObjectFromHwnd}{\v idx_owndwindowobjectfromhwnd}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 goto}{\cf6 
button idx_owndwindowobject}}{\fldrslt }}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndactivatewind}{\*\bkmkend idx_owndactivatewind}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_owndactivatewindow}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndActivateWindow}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0005}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndActivateWindow}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}} OWndActivateWindow
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }BOOL OWndActivateWindow(oiWindow)
\par \tab {\b\f12\fs18 Description\tab }This function activates the window that was passed in by the Window object.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiWindow\tab OBJECTID  \tab The OBJECTID of the window to be activated.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value is {\caps true }
if the function activated the window. It is FALSE if the function was unable to activate the window because the window was closed or because another modal window was active.
\par \tab {\b\f12\fs18 Availab}{\b\f12\fs18 ility\tab }This function is available at run time.
\par \tab {\b\f12\fs18 Comments\tab }This function will not open a closed window.\tab 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndcalleachvisu}{\*\bkmkend idx_owndcalleachvisu}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_owndcalleachvisualinstance}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndCallEachVisualInstance}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +}
 SUPP26:0010}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndCallEachVisualInstance}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}} OWndCallEachVisualInstance
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }BOOL OWndCallEachVisualInstance(oiTarget, proc, lParam1, lParam2)
\par \tab {\b\f12\fs18 Description\tab }This function allows the Window object to call a procedure for each visual instance of the Window object. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiTarget\tab OBJECTID  \tab The target object.
\par proc\tab LPPFN  \tab The procedure to be called for each visual instance. The procedure has to have the type \line 
BOOL ALMCALLBACK Proc(OpWndItemD*, long, long). The first parameter is the address of a window item. The second parameter is lParam. If the return value from the procedure is FALSE, the Window object aborts the loop.
\par lParam1\tab long  \tab The first 32-bit value to be passed when the Window object calls the procedure for each visual instance of the object.
\par lParam2\tab long  \tab The second 32-bit value to be passed when the Window object calls the procedure for each visual instance of the object.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The retur
n value is FALSE if an error occurs while the function is iterating through the visual instances. It is TRUE if the function processess each visual instance successfully.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }
Do not attempt to have an object keep track of its visual instances. If an object needs to access each visual instance, it can use this function.
\par {\cf5 \{bmc rr.bmp\}\tab }The callback procedure (proc) has to have the type BOOL ALMCALLBACK Proc(OpWndItemD
*, long, long). The first parameter is the address of a window item. The second and third parameters are specific to the callback procedure. If the return value from the callback procedure is FALSE, the function aborts any remaining iterations through the
 visual instances.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndcreatefonttm}{\*\bkmkend idx_owndcreatefonttm}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_owndcreatefonttmm}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndCreateFontTmm}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0015}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndCreateFontTmm}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}} OWndCreateFontTmm
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }
HFONT OWndCreateFontTmm(hdcTarget, nHeightInTmm, nWidthInTmm, nEscapement, nOrientation, fnWeight, fbItalic, fbUnderline, fbStrikeOut, fbCharSet, fbOutputPrecision, fbClipPrecision, fbQuality, fbPitchAndFamily, lpszFace)
\par \tab {\b\f12\fs18 Description\tab }This function creates a logical font, in tenths of a millimeter, that has the specified characteristics. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 hdcTarget\tab HDC \tab The handle to the targeted display context.
\par nHeightInTmm
\par \tab INT\tab The font height, in tenths of a millimeter.
\par nWidthInTmm
\par \tab INT\tab The font width, in tenths of a millimeter.
\par nEscapement
\par \tab INT\tab The average angle for each line of text that is written in the font. The angle is in tenths of a degree.
\par nOrientation
\par \tab INT\tab The angle, in tenths of a degree, between the character's baseline and the bottom of the page.
\par fnWeight\tab INT\tab The font weight, from zero to 1,000.
\par fbItalic\tab BYTE\tab If the parameter is nonzero, the font is italicized.
\par fbUnderline
\par \tab BYTE\tab If the parameter is nonzero, the font is underlined.
\par fbStrikeOut
\par \tab BYTE\tab If the parameter is nonzero, the font is a strikeout font.
\par fbCharSet\tab BYTE\tab The font's character set. Possible values are ANSI_CHARSET, OEM_CHARSET, and SYMBOL_CHARSET.
\par fbOutputPrecision
\par \tab BYTE \tab The font's output precision, which defines how closely the output has to match the requested font settings.
\par fbClipPrecision
\par \tab BYTE \tab The font's clipping precision, which defines how to clip characters that are partially outside the clipping region.
\par fbQuality\tab BYTE \tab The font's output quality. The three possible values are DEFAULT_QUALITY, DRAFT_QUALITY, and PROOF_QUALITY.
\par fbPitchAndFamily
\par \tab BYTE \tab The font's pitch and family. The three possible values are DEFAULT_PITCH, FIXED_PITCH, and VARIABLE_PITCH.
\par lpszFace\tab LPSTR \tab The font's typeface. If the parameter is set to NULL, the function uses the default typeface.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value equals one of the following constants. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab Meaning
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 NULL\tab The function did not create the font successfully.
\par hFont\tab The function created an HFONT handle to the logical font.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }This function does not actually create a new font. Instead, it selects the closest match from the available fonts. This function maps 
directly to the CreateFont function in the Microsoft Windows operating system. When the font handle is no longer needed, it should be deleted by a call to OWndDeleteFont.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndcreatewindow}{\*\bkmkend idx_owndcreatewindow}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_owndcreatewindowex}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndCreateWindowEx}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0020}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndCreateWindowEx}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}} OWndCreateWindowEx
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }HWND OWndCreateWindowEx(hwi, dwExStyle, szClassName, szWindowName, dwStyle, hInst, lpvCreateParams)
\par \tab {\b\f12\fs18 Description\tab }This function creates the visual instance of an HWI with an extended style. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 hwi\tab OpHwndWndItemD*\line The address of a window item.
\par dwExStyle\tab DWORD\tab The style of the extended window.
\par szClassName
\par \tab LPCSTR\tab The registered class name.
\par szWindowName
\par \tab LPCSTR\tab The window's text.
\par dwStyle\tab DWORD\tab The window's style.
\par hInst\tab HINSTANCE\tab The handle of the applicable instance.
\par lpvCreateParams
\par \tab void FAR*\tab The creation data for the window.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }If an error occurs, the return value is zero.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }You should use this function when you want an HWI to create its window handle. It has the same param
eters as the ones that are passed to the CreateWindow function. The advantage to using this function is that it makes sure the item's control ID is set correctly and that the correct device is used for logical coordinate conversion.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_ownddoesitemusec}{\*\bkmkend idx_ownddoesitemusec}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_ownddoesitemusecancelkey}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndDoesItemUseCancelKey}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +}
 SUPP26:0025}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndDoesItemUseCancelKey}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}} OWndDoesItemUseCancelKey
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }BOOL OWndDoesItemUseCancelKey(pWI)
\par \tab {\b\f12\fs18 Description\tab }This function determines whether an item uses the cancel key. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab \tab The address of a window item.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value is TRUE if the item uses the cancel key and FALSE if it does not.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_n1_ownddoesitemu}{\*\bkmkend idx_n1_ownddoesitemu}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_n1_ownddoesitemusecursorkeys}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndDoesItemUseCursorKeys}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +}
 SUPP26:0030}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndDoesItemUseCursorKeys}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}} OWndDoesItemUseCursorKeys
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }BOOL OWndDoesItemUseCursorKeys(pWI)
\par \tab {\b\f12\fs18 Description\tab }This function determines whether an item uses the cursor keys. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab \tab The address of a window item. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value is TRUE if the item uses the cursor keys and FALSE if it does not.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\up6\lang1033 {\*\bkmkstart idx_ownddoesitemused}{\*\bkmkend idx_ownddoesitemused}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_ownddoesitemusedefaultkey}}
 {\plain \f3\fs16\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndDoesItemUseDefaultKey}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0035}} {\plain 
\f3\fs16\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndDoesItemUseDefaultKey}} {\plain \f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
  EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}} OWndDoesItemUseDefaultKey
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }BOOL OWndDoesItemUseDefaultKey(pWI)
\par \tab {\b\f12\fs18 Description\tab }This function determines whether an item uses the default key. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab \tab The address of a window item. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value is TRUE if the item uses the default key and FALSE if it does not.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_ownddoesitemuset}{\*\bkmkend idx_ownddoesitemuset}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_ownddoesitemusetab}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndDoesItemUseTab}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0040}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndDoesItemUseTab}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}} OWndDoesItemUseTab
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }BOOL OWndDoesItemUseTab(pWI)
\par \tab {\b\f12\fs18 Description\tab }This function determines whether an item uses the tab key. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab \tab The address of a window item. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value is TRUE if the item uses the tab key and FALSE if it does not.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }You can set the window item so that it will recognize or ignore tab keys. To do this, call the function OWndSetItemUsesTab.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_ownddeletefont}{\*\bkmkend idx_ownddeletefont}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_ownddeletefont}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndDeleteFont}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0045}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndDeleteFont}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}}
 OWndDeleteFont
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }BOOL OWndDeleteFont(hFont)
\par \tab {\b\f12\fs18 Description\tab }This function deletes a specified font and the associated data from the application.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 hFont\tab HFONT \tab An HFONT handle to the logical font to be deleted. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }
The return value equals TRUE if the function deletes the font and FALSE if the function is unable to delete the font. 
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }The font has to be created by a call to OWndCreateFontTmm.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_ownddptolp}{\*\bkmkend idx_ownddptolp}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_ownddptolp}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndDPtoLP}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0050}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndDPtoLP}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}} OWndDPtoLP
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void OWndDPtoLP(oiWindow, points, numPoints)
\par \tab {\b\f12\fs18 Description\tab }By using the mapping mode for the Window object that was passed in, this function converts device points to logical points.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiWindow\tab OBJECTID\tab The parent Window object.
\par points\tab LPPOINT\tab The address of an array of points.
\par numPoints\tab short\tab The total number of points.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The function returns the logical points in the points structure.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_ownddstols}{\*\bkmkend idx_ownddstols}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_ownddstols}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndDStoLS}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0055}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndDStoLS}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}} OWndDStoLS
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void OWndDStoLS( oiWindow, points, numPoints)
\par \tab {\b\f12\fs18 Description\tab }This function converts window coordinates from device-size units to logical-size units.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiWindow\tab OBJECTID\tab The window's ID.
\par points\tab LPPOINT \tab Point data to be converted.
\par numPoints\tab short\tab The total number of points to be converted.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The function returns the logical-size units in the points structure.
\par \tab {\b\f12\fs18 Availabili}{\b\f12\fs18 ty\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndgetactiveite}{\*\bkmkend idx_owndgetactiveite}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_owndgetactiveitem}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndGetActiveItem}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0060}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndGetActiveItem}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}} OWndGetActiveItem
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }OpWndItemD* OWndGetActiveItem(void)
\par \tab {\b\f12\fs18 Description\tab }This function gets a pointer to the active item in the window. 
\par \tab {\b\f12\fs18 Return Value\tab }The return value is an OpWndItemD pointer to the active window item. If no window item is active, the return value is NULL.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time.
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndgetactivemen}{\*\bkmkend idx_owndgetactivemen}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_owndgetactivemenubar}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndGetActiveMenuBar}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0065}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndGetActiveMenuBar}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}} OWndGetActiveMenuBar
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }OBJECTID OWndGetActiveMenuBar(void)
\par \tab {\b\f12\fs18 Description\tab }This function gets the object ID for the menu bar in the active window. It has no parameters.
\par \tab {\b\f12\fs18 Return Value\tab }The return value is equal to the menu bar's ID. If an error occurs or the active window does not have a menu bar in it, the return value is zero.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndgetactivewin}{\*\bkmkend idx_owndgetactivewin}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_owndgetactivewindowobject}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndGetActiveWindowObject}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +}
 SUPP26:0070}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndGetActiveWindowObject}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}} OWndGetActiveWindowObject
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }OBJECTID OWndGetActiveWindowObject(void)
\par \tab {\b\f12\fs18 Description\tab }This function gets the object ID of the active Window object.
\par \tab {\b\f12\fs18 Return Value\tab }The return value is the object ID of the active Window object. If there is no active Window object, the return value is zero.
\par \tab {\b\f12\fs18 Availability\tab }This function is valid at run time. 
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndgetcaptureit}{\*\bkmkend idx_owndgetcaptureit}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_owndgetcaptureitem}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndGetCaptureItem}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0075}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndGetCaptureItem}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}} OWndGetCaptureItem
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }OpWndItemD* OWndGetCaptureItem(void)
\par \tab {\b\f12\fs18 Description\tab }This function gets the visual instance record of the item that has the mouse capture. 
\par \tab {\b\f12\fs18 Return Value\tab }For an item that has the mouse capture, the return value is an OpWndItemD pointer to the window item. If the mouse capture is not set, the return value is NULL.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at run time. 
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndgetclientrec}{\*\bkmkend idx_owndgetclientrec}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_owndgetclientrect}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndGetClientRect}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0080}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndGetClientRect}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}} OWndGetClientRect
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void OWndGetClientRect(oiWindow, rect)
\par \tab {\b\f12\fs18 Description\tab }This function gets the coordinates for a window's client rectangle and places them in a RECT structure.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiWindow\tab OBJECTID  \tab The object ID of the window whose client rectangle coordinates are to be retrieved.
\par rect\tab LPRECT  \tab The pointer to a RECT structure that is to receive the client rectangle's coordinates. The top and the left coordinates are zero, and the right and the bottom members are the width and height of the window in logical coordinates.

\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }At design time, the returned client rectangle is the initial client rectangle. At run time, it is the current client rectangle.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndgetitemcontr}{\*\bkmkend idx_owndgetitemcontr}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_owndgetitemcontrolid}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndGetItemControlID}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0085}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndGetItemControlID}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}} OWndGetItemControlID
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }WORD OWndGetItemControlID(pHWI)
\par \tab {\b\f12\fs18 Description\tab }This function gets an item's control ID so that the ID can be used by an HWI when the HWI creates a window handle.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pHWI\tab OpHwndWndItem* \tab  \line The address of an HWI.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value is the control ID an HWI {\i has }to use when it creates its window handle. 
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }LWIs do not use this function.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndgetnextitem}{\*\bkmkend idx_owndgetnextitem}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_owndgetnextitem}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndGetNextItem}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0090}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndGetNextItem}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}}
 OWndGetNextItem
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }OpWndItemD* OWndGetNextItem(pWI, oiWindow)
\par \tab {\b\f12\fs18 Description\tab }This function gets a pointer to the visual instance record of the next window item in the tabbing sequence.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab \tab The address of a window item, which is to be used as a starting point. If this parameter is NULL, the function returns the first visual-instance record in the parent Window object. 
\par oiWindow\tab OBJECTID  \tab If pWI is NULL, this parameter names the parent Window object where the first item is located. If pWI is not NULL, this parameter is not used.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }
The return value is the visual instance record of the next item. If the function passes in the visual instance record of the Window object's last item, the return value is NULL.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }This function returns the next item without regard for whether it is visible, activatable, or enabled.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndgetpreviousi}{\*\bkmkend idx_owndgetpreviousi}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_owndgetpreviousitem}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndGetPreviousItem}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0095}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndGetPreviousItem}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}} OWndGetPreviousItem
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }OpWndItemD* OWndGetPreviousItem(pWI, oiWindow)
\par \tab {\b\f12\fs18 Description\tab }This function gets a pointer to the visual instance record of the previous window item in the tabbing sequence.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab \tab The address of a window item, which is to be used as a starting point. If this parameter is NULL, the function returns the last item in the parent Window object. 
\par oiWindow\tab OBJECTID  \tab If pWI is NULL, this parameter names the parent Window object where the last item is located. If pWI is not NULL, this parameter is not used.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value is the vi
sual instance record of the previous item. If the function passes in the visual instance record of the Window object's first item, the return value is NULL.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }This function returns the previous item without regard for whether it is visible, activatable, or enabled.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndhideitem}{\*\bkmkend idx_owndhideitem}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_owndhideitem}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndHideItem}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0100}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndHideItem}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}} OWndHideItem
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }BOOL OWndHideItem(pWI)
\par \tab {\b\f12\fs18 Description\tab }This function hides a window item so that it is no longer visible on the window display.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab \tab The address of a window item.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }
The return value is TRUE if the window item's visibility is changed to hidden. It is FALSE if an error occurs or if the window item is already hidden.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndhidemenubar}{\*\bkmkend idx_owndhidemenubar}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_owndhidemenubar}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndHideMenuBar}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0105}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndHideMenuBar}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}}
 OWndHideMenuBar
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }BOOL OWndHideMenuBar(oiMenu)
\par \tab {\b\f12\fs18 Description\tab }This function hides the menu bar in all windows that contain the specified menu bar.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiMenu\tab OBJECTID\tab The object ID of the menu bar.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }This function returns TRUE if the menu bar is successfully hidden. It returns FALSE if an error occurs.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at run time. 
\par \tab {\b\f12\fs18 Comments\tab }If the menu bar ID equals zero, this function attempts to hide the menu bar in the active window.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndinvalidatelo}{\*\bkmkend idx_owndinvalidatelo}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_owndinvalidatelogicalrect}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndInvalidateLogicalRect}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +}
 SUPP26:0110}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndInvalidateLogicalRect}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}} OWndInvalidateLogicalRect
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void OWndInvalidateLogicalRect(oiWindow, rcInvalid, bErase)
\par \tab {\b\f12\fs18 Description\tab }This function invalidates the area within a logical rectangle by adding the rectangle to the window's update region. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiWindow\tab OBJECTID\tab The object ID of the parent Window object. 
\par rcInvalid\tab const LPRECT
\par \tab \tab The rectangle, defined in logical units, that is to be added to the update region. 
\par bErase\tab BOOL\tab If the parameter is TRUE, it specifies that the background within the update region is to be erased.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }When a rectangle is invalidated, the area enclosed by the rectangle is redrawn by the Microsoft Windows operating system. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndishwnditem}{\*\bkmkend idx_owndishwnditem}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_owndishwnditem}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndIsHwndItem}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0115}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndIsHwndItem}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}}
 OWndIsHwndItem
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Comments\tab }BOOL OWndIsHwndItem(pWI)
\par \tab {\b\f12\fs18 Comments\tab }This function determines whether an item is an HWI.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab \tab The address of a window item. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Comments\tab }The return value is TRUE if the item is an HWI and FALSE if it is not.
\par \tab {\b\f12\fs18 Comments\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }None. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndisitemactiva}{\*\bkmkend idx_owndisitemactiva}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_owndisitemactivatable}}
 {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndIsItemActivatable}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0120}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndIsItemActivatable}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}} OWndIsItemActivatable
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }BOOL OWndIsItemActivatable(pWI)
\par \tab {\b\f12\fs18 Description\tab }This function determines whether an item can be activated.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab \tab The address of a window item.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value is TRUE if an item can be activated and FALSE if it cannot.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }An activatable item can be activated and can also receive the input focus. A window item that is not activatable never receives the focus. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndisitemcancel}{\*\bkmkend idx_owndisitemcancel}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_owndisitemcancel}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndIsItemCancel}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0125}} {\plain \f3\fs16\cf2\up6\lang1033 
K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndIsItemCancel}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}}
 OWndIsItemCancel
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }BOOL OWndIsItemCancel(pWI)
\par \tab {\b\f12\fs18 Description\tab }This function determines whether a window item is the cancel item for its parent window.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab \tab The address of a window item. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value is TRUE if an item is the cancel item and FALSE if it is not.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }When the <Esc> key is pressed, the effect on the cancel item depends on whether it is an LWI or an HWI. An HWI receives the WM_KEYUP and WM_KEYDOWN messages, and an LWI's KeyDown and KeyUp methods are called.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndisitemdefaul}{\*\bkmkend idx_owndisitemdefaul}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_owndisitemdefault}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndIsItemDefault}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0130}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndIsItemDefault}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}} OWndIsItemDefault
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }BOOL OWndIsItemDefault(pWI)
\par \tab {\b\f12\fs18 Description\tab }This function determines whether an item has been assigned as the default item for its parent window. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab \tab The address of a window item. \line 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value is TRUE if the item is the default item and FALSE if it is not. 
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }When the <Enter> key is pressed, the effect on the default item depends on whether it is an LWI or an HWI. An HWI receives the WM_KEYUP and WM_KEYDOWN messages while an LWI's KeyDown and KeyUp methods are being called.

\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndisitemenable}{\*\bkmkend idx_owndisitemenable}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_owndisitemenabled}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndIsItemEnabled}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0135}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndIsItemEnabled}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}} OWndIsItemEnabled
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }BOOL OWndIsItemEnabled(pWI)
\par \tab {\b\f12\fs18 Description\tab }This function determines whether an item is enabled.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab \tab The address of a window item. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value is TRUE if the item is enabled and FALSE if it is not.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }An enabled item can receive mouse clicks. To receive the input focus, an item has to be activatable and enabled.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndisitemgroup}{\*\bkmkend idx_owndisitemgroup}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_owndisitemgroup}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndIsItemGroup}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0140}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndIsItemGroup}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}}
 OWndIsItemGroup
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }BOOL OWndIsItemGroup(pWI)
\par \tab {\b\f12\fs18 Description\tab }This function determines whether a window item is a group member.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab \tab The address of a window item.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value equals TRUE if the item has been grouped and FALSE if the item is not in a group.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndisitemshape}{\*\bkmkend idx_owndisitemshape}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_owndisitemshape}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndIsItemShape}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0145}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndIsItemShape}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}}
 OWndIsItemShape
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }BOOL OWndIsItemShape(pWI)
\par \tab {\b\f12\fs18 Description\tab }This function determines whether an item is a shape.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab \tab The address of a window item.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value is TRUE if the item is a shape and FALSE if it is not.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }To set an item as a shape, call the function OWndSetItemIsShape.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndisitemtransp}{\*\bkmkend idx_owndisitemtransp}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_owndisitemtransparent}}
 {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndIsItemTransparent}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0150}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndIsItemTransparent}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}} OWndIsItemTransparent
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }BOOL OWndIsItemTransparent(pWI)
\par \tab {\b\f12\fs18 Description\tab }This function determines whether an item is transparent.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab \tab The address of a window item. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value is TRUE if the item is transparent and FALSE if it is not. 
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comme}{\b\f12\fs18 nts\tab }An item is considered to be transparent if it does not paint its entire rectangle.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndisitemvisibl}{\*\bkmkend idx_owndisitemvisibl}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_owndisitemvisible}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndIsItemVisible}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0155}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndIsItemVisible}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}} OWndIsItemVisible
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }BOOL OWndIsItemVisible(pWI)
\par \tab {\b\f12\fs18 Description\tab }This function determines whether an item is visible in its parent window.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab \tab The address of a window item. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value is TRUE if the item is visible and FALSE if it is not.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndislayouttime}{\*\bkmkend idx_owndislayouttime}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_owndislayouttime}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndIsLayoutTime}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0160}} {\plain \f3\fs16\cf2\up6\lang1033 
K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndIsLayoutTime}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}} 
OWndIsLayoutTime
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }BOOL OWndIsLayoutTime(void)
\par \tab {\b\f12\fs18 Description\tab }This function determines whether a window is in layout mode or runtime mode.
\par \tab {\b\f12\fs18 Return Value\tab }The return value is TRUE if the window is in layout mode and FALSE if it is in runtime mode.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }Some items might have to alter the way they are drawn in the window layout. If this is the case, an item can call this function to determine whether or not it is being drawn in
 the window layout. This function should only be called during creation of a window or a window item.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndisliteitem}{\*\bkmkend idx_owndisliteitem}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_owndisliteitem}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndIsLiteItem}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0165}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndIsLiteItem}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}}
 OWndIsLiteItem
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }BOOL OWndIsLiteItem(pWI)
\par \tab {\b\f12\fs18 Description\tab }This function determines whether an item is an LWI.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab \tab The address of a window item. \tab 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }
The return value is TRUE if the item is an LWI (that is, it does not have its own window) and FALSE if it is not.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndiswindowcolo}{\*\bkmkend idx_owndiswindowcolo}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_owndiswindowcolor}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndIsWindowColor}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0170}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndIsWindowColor}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}} OWndIsWindowColor
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }BOOL OWndIsWindowColor(void)
\par \tab {\b\f12\fs18 Description\tab }This function determines whether a window is in color or in black and white.
\par \tab {\b\f12\fs18 Return Value\tab }The return value is TRUE if the object's color version should be used and FALSE if the black-and-white version should be used.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }Some items support color and black-and-white versions of themselves. Items can call this function to see which
 version they should use. Although you could have an item check the device context for the screen to see how many colors it supports, have the item use this function instead so that the black-and-white version can still be shown during the layout of a win
dow on a color system.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_ownditemfromuid}{\*\bkmkend idx_ownditemfromuid}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_ownditemfromuid}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndItemFromUID}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0175}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndItemFromUID}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}}
 OWndItemFromUID
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }OpWndItemD* OWndItemFromUID( oiWnd, itemUID)
\par \tab {\b\f12\fs18 Description\tab }This function gets a pointer to the window item that is identified by the itemUID parameter. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiWnd\tab OBJECTID \tab The object ID of the window of interest
\par itemUID\tab LONG \tab Unique ID associated with a window item
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value is equal to a window item ID. If an error occurs, the return value is equal to zero.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }See also OWndUIDFromItem.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndlptodp}{\*\bkmkend idx_owndlptodp}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_owndlptodp}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndLPtoDP}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0180}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndLPtoDP}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}} OWndLPtoDP
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void OWndLPtoDP(oiWindow, points, numPoints)
\par \tab {\b\f12\fs18 Description\tab }By using the mapping mode for the Window object that was passed in, this function converts logical points to device points. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiWindow\tab OBJECTID\tab The parent Window object.
\par points\tab LPPOINT\tab The address of an array of points.
\par numPoints\tab short\tab The total number of points.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The device points are returned in the points structure.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndlstods}{\*\bkmkend idx_owndlstods}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_owndlstods}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndLStoDS}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0185}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndLStoDS}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}} OWndLStoDS
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void OWndLStoDS( oiWindow, points, numPoints)
\par \tab {\b\f12\fs18 Description\tab }This function converts window coordinates from logical-size units to device-size units.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiWindow\tab OBJECTID \tab The parent Window object.
\par points\tab LPPOINT \tab The point data to be converted.
\par numPoints\tab short\tab The total number of points to be converted.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The device-size units are returned in the points structure.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndmovewindow}{\*\bkmkend idx_owndmovewindow}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_owndmovewindow}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndMoveWindow}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0190}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndMoveWindow}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}}
 OWndMoveWindow
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }BOOL AWINAPI OWndMoveWindow(pHWI, newRect, repaint)
\par \tab {\b\f12\fs18 Description\tab }This function changes the location of an HWI.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pHWI\tab OpHwndWndItemD*\line The address of an HWI.
\par newRect\tab const LPRECT
\par \tab \tab The item's new rectangle, in logical units.
\par repaint\tab BOOL\tab The repaint flag.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value is FALSE if the function fails and TRUE if it succeeds.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndredrawmenuba}{\*\bkmkend idx_owndredrawmenuba}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_owndredrawmenubar}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndRedrawMenuBar}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0195}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndRedrawMenuBar}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_
object_functions')')}} OWndRedrawMenuBar
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }BOOL OWndRedrawMenuBar(oiMenu)
\par \tab {\b\f12\fs18 Description\tab }This function redraws the menu in all of the windows that contain it.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiMenu\tab OBJECTID\tab The menu's object ID.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }
If the function redraws the menu bar successfully, the return value is TRUE. If the function does not redraw the menu bar, the return value is FALSE.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at run time. 
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndreleasecaptu}{\*\bkmkend idx_owndreleasecaptu}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_owndreleasecapture}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndReleaseCapture}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0200}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndReleaseCapture}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}} OWndReleaseCapture
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void OWndReleaseCapture(void)
\par \tab {\b\f12\fs18 Description\tab }This function releases the mouse from capture mode and restores the normal processing of mouse messages. 
\par \tab {\b\f12\fs18 Retu}{\b\f12\fs18 rn Value\tab }None.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at run time. 
\par \tab {\b\f12\fs18 Comments\tab }Have an item call this function after it calls the OWndSetCapture function.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndreleasecurso}{\*\bkmkend idx_owndreleasecurso}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_owndreleasecursor}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndReleaseCursor}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0205}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndReleaseCursor}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}} OWndReleaseCursor
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }HCURSOR OWndReleaseCursor(void)
\par \tab {\b\f12\fs18 Description\tab }This function resets the cursor to whatever the master cursor is. 
\par \tab {\b\f12\fs18 Return Value\tab }The return value is the new cursor handle. If an error occurs, the return value is NULL.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at run time. 
\par \tab {\b\f12\fs18 Comments\tab }This function is used in conjunction with the OWndSetCursor function. If you call this function when you have finished changing the mouse cursor, the function will reset the cursor to whatever the master cursor is.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndsetactiveite}{\*\bkmkend idx_owndsetactiveite}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_owndsetactiveitem}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndSetActiveItem}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0210}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndSetActiveItem}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}} OWndSetActiveItem
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }OpWndItemD* OWndSetActiveItem(pWI)
\par \tab {\b\f12\fs18 Description\tab }This function makes a window item into the active item and gives it the input focus.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab \tab The address of a window item.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value is the visual instance record of either th
e active window item or the item that will be the active window item when the parent Window object is the active window.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at run time.
\par \tab {\b\f12\fs18 Comments\tab }
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }
The window item that is finally made active is not always the same as the one passed in to this function. When some items become active, they immediately make another item active. 
\par {\cf5 \{bmc rr.bmp\}\tab }If the function does not locate a passed-in item in the active window, it will not make an item active until the item's window has been activated. 
\par {\cf5 \{bmc rr.bmp\}\tab }When this function activates an item, the Activate function's causedBy field is OWND_ACTIVATED_BY_OTHER.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndsetcancelite}{\*\bkmkend idx_owndsetcancelite}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_owndsetcancelitem}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndSetCancelItem}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0215}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndSetCancelItem}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}} OWndSetCancelItem
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Syntax\tab }void OWndSetCancelItem(pWI)
\par \tab {\b\f12\fs18 Description\tab }This function makes a window item into the cancel item for the current window.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab \tab The address of a window item.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }If you want an 
item to be the cancel item, have it call this function during the item's CreateFunction. When the <Esc> key is pressed, the effect on the cancel item depends on whether it is an LWI or an HWI. An HWI receives the WM_KEYUP and WM_KEYDOWN messages, and an L
WI's KeyDown and KeyUp methods are called. If more than one item asks to be the cancel item, the function grants the request to the last one. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndsetcaptureit}{\*\bkmkend idx_owndsetcaptureit}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_owndsetcaptureitem}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndSetCaptureItem}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0220}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndSetCaptureItem}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}} OWndSetCaptureItem
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }OpWndItemD* OWndSetCaptureItem(pWI)
\par \tab {\b\f12\fs18 Description\tab }This function sets the mouse capture for the specified window item.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab \tab The address of a window item. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }
The return value is the visual instance record of the item that had the capture previously. If no item had the capture previously, the return value is NULL.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at run time. 
\par \tab {\b\f12\fs18 Comments\tab }
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }The function only works if the item is in the active window. 
\par {\cf5 \{bmc rr.bmp\}\tab }When a window item has the mouse capture, the Window object directs all mouse messages to it. 
\par {\cf5 \{bmc rr.bmp\}\tab }Have the item call OWndReleaseCapture when it no longer needs the mouse capture. 
\par {\cf5 \{bmc rr.bmp\}\tab }HWIs should use this function instead of the Windows API function SetCapture.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndsetcursor}{\*\bkmkend idx_owndsetcursor}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_owndsetcursor}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndSetCursor}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0225}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndSetCursor}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}}
 OWndSetCursor
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }HCURSOR OWndSetCursor(hCursor, master)
\par \tab {\b\f12\fs18 Description\tab }An item can use this function to change the mouse cursor. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 hCursor\tab HCURSOR  \tab The cursor's handle.
\par master\tab BOOL  \tab This parameter is TRUE if the cursor should be used as the master cursor.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value is the handle of the previous cursor.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at run time. 
\par \tab {\b\f12\fs18 Comments\tab }
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }
Because this function uses a copy of the cursor, you can have your object destroy the cursor handle after it calls this function. 
\par {\cf5 \{bmc rr.bmp\}\tab }If master is set to TRUE, the function passes the master cursor. The cursor object is the only object that should call this function with master equal to TRUE.
\par {\cf5 \{bmc rr.bmp\}\tab }When OWndReleaseCursor is called, it uses the master cursor. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndsetdefaultit}{\*\bkmkend idx_owndsetdefaultit}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_owndsetdefaultitem}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndSetDefaultItem}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0230}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndSetDefaultItem}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}} OWndSetDefaultItem
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void OWndSetDefaultItem(pWI)
\par \tab {\b\f12\fs18 Description\tab }This function sets an item as the default item.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab \tab The address of a window item. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }If you want an item to be the default item, have it call this function during its CreateFunction. When the <Enter> key is pressed, the effect on the def
ault item depends on whether it is an LWI or an HWI. An HWI receives the WM_KEYUP and WM_KEYDOWN messages, and an LWI's KeyDown and KeyUp methods are called. If more than one item asks to be the default item, the function grants the request to the last on
e.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndsetitemaccel}{\*\bkmkend idx_owndsetitemaccel}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_owndsetitemaccelkey}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndSetItemAccelKey}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0235}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndSetItemAccelKey}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}} OWndSetItemAccelKey
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }BOOL OWndSetItemAccelKey(pWI, vKey, modifier)
\par \tab {\b\f12\fs18 Description\tab }This function sets an accelerator key for a window item.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab \tab The address of a window item. 
\par vKey\tab char  \tab The virtual key code (that is, VK_XXXX, where XXXX is variable).
\par modifier\tab char  \tab The modifier. It can be set to any of the following values: OWND_{\caps Shift}, OWND_{\caps Ctrl}, or OWND_{\caps Alt}. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }
This function returns TRUE if it sets the accelerator key successfully and FALSE if it fails to set the accelerator key.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }If a window item has an accelerator key, it has to call this function in order to register it with the Window objec
t during the creation of the item's visual instance data. If the item wants to change its accelerator key at any time, it can call this function again.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndsetitemactiv}{\*\bkmkend idx_owndsetitemactiv}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_owndsetitemactivatable}
} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndSetItemActivatable}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0240}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndSetItemActivatable}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}} OWndSetItemActivatable
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void OWndSetItemActivatable(pWI, set)
\par \tab {\b\f12\fs18 Description\tab }This function specifies whether an item can be activated\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab \tab The address of a window item. 
\par set\tab BOOL  \tab The parameter is TRUE if the item can be activated and is FALSE otherwise.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }
If an item can be activated, have the Window object call this function during the item's CreateFunction. If you want to toggle an item's ability to be activated, have the item call this function again. An activatable item can receive the input focus.

\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndsetitemenabl}{\*\bkmkend idx_owndsetitemenabl}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_owndsetitemenabled}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndSetItemEnabled}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0245}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndSetItemEnabled}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_
up', `JI(`', `idx_window_object_functions')')}} OWndSetItemEnabled
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void OWndSetItemEnabled(pWI, set)
\par \tab {\b\f12\fs18 Description\tab }This function specifies whether an item is to be enabled.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab \tab The address of a window item. 
\par set\tab BOOL  \tab The parameter is TRUE if the item can be enabled and is FALSE otherwise.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }
This function should initially be called during a window item's CreateFunction. It can also be called later in order to enable or disable an item. An enabled item can receive mouse clicks. To receive the input focus, an item has to be activatable and enab
led.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndsetitemisgro}{\*\bkmkend idx_owndsetitemisgro}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_owndsetitemisgroup}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndSetItemIsGroup}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0250}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndSetItemIsGroup}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}} OWndSetItemIsGroup
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void OWndSetItemIsGroup(pWI, set)
\par \tab {\b\f12\fs18 Description\tab }This function modifies the group status flag of the window item.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab \tab The address of a window item.
\par set\tab BOOL \tab If the parameter is TRUE, the item will be a group item; otherwise, the parameter should be FALSE.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndsetitemissha}{\*\bkmkend idx_owndsetitemissha}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_owndsetitemisshape}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndSetItemIsShape}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0255}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndSetItemIsShape}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}} OWndSetItemIsShape
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void OWndSetItemIsShape(pWI, set)
\par \tab {\b\f12\fs18 Description\tab }This function modifies a flag to indicate whether an item is part of a shape library. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab \tab The address of a window item. 
\par set\tab BOOL  \tab If the item is part of a shape library, the parameter should be TRUE; otherwise, the parameter should be FALSE.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }Have the item call this function if the item is part of a shape library.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndsetitemtrans}{\*\bkmkend idx_owndsetitemtrans}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_owndsetitemtransparent}
} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndSetItemTransparent}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0260}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndSetItemTransparent}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}} OWndSetItemTransparent
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void OWndSetItemTransparent(pWI, set)
\par \tab {\b\f12\fs18 Description\tab }This function modifies a flag to indicate that an item has transparent regions.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab \tab The address of a window item. 
\par set\tab BOOL  \tab The parameter is TRUE if the item does not paint its entire rectangle and is FALSE otherwise.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time.
\par \tab {\b\f12\fs18 Comments\tab } 
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }If an item does not paint its entire rectangle, have the Window object ca
ll this function during the item's CreateFunction. 
\par {\cf5 \{bmc rr.bmp\}\tab }A transparent item is not entirely invisible, but it does have transparent regions. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndsetitemusesc}{\*\bkmkend idx_owndsetitemusesc}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_owndsetitemusescancelkey}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndSetItemUsesCancelKey}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +}
 SUPP26:0265}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndSetItemUsesCancelKey}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}} OWndSetItemUsesCancelKey
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void OWndSetItemUsesCancelKey(pWI, set)
\par \tab {\b\f12\fs18 Description\tab }This function modifies a flag to indicate that an item uses the cancel key.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab \tab The address of a window item. 
\par set\tab BOOL  \tab The parameter is TRUE if the item uses the cancel key and is FALSE otherwise.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Valu}{\b\f12\fs18 e\tab }None.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }If you want an item to use the cancel key (<Esc>), have it call this function during the item's CreateFunction. If an item uses the cancel key, the cancel item will not get the key.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_n1_owndsetitemus}{\*\bkmkend idx_n1_owndsetitemus}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_n1_owndsetitemusescursorkeys}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndSetItemUsesCursorKeys}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +}
 SUPP26:0270}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndSetItemUsesCursorKeys}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}} OWndSetItemUsesCursorKeys
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void OWndSetItemUsesCursorKeys(pWI, set)
\par \tab {\b\f12\fs18 Description\tab }This function modifies a flag to indicate that an item uses the cursor keys.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab \tab The address of a window item. 
\par set\tab BOOL  \tab The parameter is TRUE if the item uses the cursor keys and is FALSE otherwise.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }If you want an item to use the cursor keys, have it call this function during the item's CreateFunction. (The cursor keys are normally used to change the focus within a tabbing group.)
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndsetitemusesd}{\*\bkmkend idx_owndsetitemusesd}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_owndsetitemusesdefaultkey}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndSetItemUsesDefaultKey}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +}
 SUPP26:0275}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndSetItemUsesDefaultKey}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}} OWndSetItemUsesDefaultKey
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void OWndSetItemUsesDefaultKey(pWI, set)
\par \tab {\b\f12\fs18 Description\tab }This function modifies a flag to indicate that an item uses the default key.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab \tab The address of a window item. 
\par set\tab BOOL  \tab The parameter is TRUE if the item uses the default key and is FALSE otherwise.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }If you want an item to use the default key (<Enter>), have it call this function during the item's CreateFunction. If an item uses the default key, the default item will not get the key.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndsetitemusest}{\*\bkmkend idx_owndsetitemusest}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_owndsetitemusestab}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndSetItemUsesTab}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0280}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndSetItemUsesTab}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}} OWndSetItemUsesTab
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void OWndSetItemUsesTab(pWI, set)
\par \tab {\b\f12\fs18 Description\tab }This function modifies a flag to indicate that an item uses the tab key.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab \tab The address of a window item. 
\par set\tab BOOL  \tab The parameter is TRUE if the item uses the tab key and is FALSE otherwise.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }If you want an item to use the tab key, have it call this function during the item's CreateFunction. If an item uses the tab key and you press the tab key, the tab key will not cause the normal change of focus.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndsetitemvisib}{\*\bkmkend idx_owndsetitemvisib}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_owndsetitemvisible}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndSetItemVisible}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0285}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndSetItemVisible}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}} OWndSetItemVisible
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void OWndSetItemVisible(pWI, set)
\par \tab {\b\f12\fs18 Description\tab }This function modifies the visibility status of an item. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab \tab The address of a window item. 
\par set\tab BOOL  \tab The parameter is TRUE if the item is visible and is FALSE otherwise.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }If calling this function changes an item's visibility, the Window object calls the item's Hide or Show methods.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndsetmenubar}{\*\bkmkend idx_owndsetmenubar}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_owndsetmenubar}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndSetMenuBar}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0290}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndSetMenuBar}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}}
 OWndSetMenuBar
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }BOOL OWndSetMenuBar(oiMenu, oiWindow)
\par \tab {\b\f12\fs18 Description\tab }This function sets the menu bar for a window.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiMenu\tab OBJECTID \tab The object ID of the menu to be set.
\par oiWindow\tab OBJECTID \tab The object ID of the window in which the menu will be displayed.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value is equal to TRUE if the menu bar is successfully set. FALSE is returned if an error occurs.

\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }If no window is specified then this function uses the active window. The menu bar is also redrawn if necessary.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndsimulateacce}{\*\bkmkend idx_owndsimulateacce}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_owndsimulateaccelkey}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndSimulateAccelKey}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0295}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndSimulateAccelKey}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}} OWndSimulateAccelKey
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }BOOL OWndSimulateAccelKey(oiWindow, type, vKey, modifier)
\par \tab {\b\f12\fs18 Description\tab }This function is used to generate accelerator keys.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiWindow\tab OBJECTID  \tab The Window object where the accelerator key is to be simulated.
\par type\tab TYPEID  \tab The type ID of the item that is to receive the accelerator key. If the parameter's value is 0, the window simulates the accelerator key for the first item it finds, regardless of its type.
\par vKey\tab char  \tab The virtual key code (that is, VK_XXXX, where XXXX is variable).
\par modifier\tab char  \tab The modifier. It can be set to any of the following values: OWND_SHIFT, OWND_CTRL, or OWND_ALT. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value is TRUE if the function finds an item
 with the accelerator key to be simulated and FALSE if the accelerator key has not been assigned to any window items.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }Sometimes a window item can receive a keystroke that should be converted into an accelerator key. For example, when a button object receives a keydown, it converts the keydown to an accelerator key and calls this function.

\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndshowitem}{\*\bkmkend idx_owndshowitem}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_owndshowitem}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndShowItem}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0300}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndShowItem}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}} OWndShowItem
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }BOOL OWndShowItem(pWI)
\par \tab {\b\f12\fs18 Description\tab }This function shows a window item so that it will be visible in the window display.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab \tab The address of a window item.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }
The return value is TRUE if the window item's visibility is changed so that the item is visible. It is FALSE if an error occurs or if the window item is already visible.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndshowmenubar}{\*\bkmkend idx_owndshowmenubar}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_owndshowmenubar}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndShowMenuBar}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0305}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndShowMenuBar}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}}
 OWndShowMenuBar
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }BOOL OWndShowMenuBar(oiMenu)
\par \tab {\b\f12\fs18 Description\tab }This function makes the menu bar visible in all windows that contain it.\line  
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiMenu\tab OBJECTID \tab The menu bar's object ID.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }This function returns TRUE if the menu bar is shown successfully. If an error occurs, it returns FALSE.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }If the menu bar's ID equals zero, this function attempts to show the menu bar in the active window.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_ownduidfromitem}{\*\bkmkend idx_ownduidfromitem}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_ownduidfromitem}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndUIDFromItem}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0310}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndUIDFromItem}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}}
 OWndUIDFromItem
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }LONG OWndUIDFromItem(pWI)
\par \tab {\b\f12\fs18 Descriptio}{\b\f12\fs18 n\tab }This function gets the unique window-item ID that is associated with a window item. (The ID is only unique within the context of the window that contains the item.)\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab \tab The address of a window item. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value equals the ID of a window item. If an error occurs, the return value is zero.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }See also OWndItemFromUID.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndvalidatelogi}{\*\bkmkend idx_owndvalidatelogi}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_owndvalidatelogicalrect
}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndValidateLogicalRect}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP26:0315}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndValidateLogicalRect}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}} OWndValidateLogicalRect
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void OWndValidateLogicalRect(oiWindow, rcValid)
\par \tab {\b\f12\fs18 Description\tab }This function validates the area within a logical rectangle by removing the rectangle from the window's update region. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description\tab \tab 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiWindow\tab OBJECTID\tab The object ID of the parent Window object.
\par rcValid\tab const LPRECT
\par \tab \tab The rectangle to be validated, in logical units.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_owndwindowobject}{\*\bkmkend idx_owndwindowobject}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_owndwindowobjectfromhwnd}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} OWndWindowObjectFromHwnd}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +}
 SUPP26:0320}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} OWndWindowObjectFromHwnd}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_object_functions')')}} OWndWindowObjectFromHwnd
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }OBJECTID OWndWindowObjectFromHwnd(hwnd)
\par \tab {\b\f12\fs18 Description\tab }This function gets the Window object's ID for a window handle.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 hwnd\tab HWND\tab The window handle.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value equals the window object's ID. If an error occurs, the return value is zero.
\par \tab {\b\f12\fs18 Availability\tab }This function is available at run time. 
\par \tab {\b\f12\fs18 Comments\tab }None.
\par 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\up6\lang1033 {\*\bkmkstart idx_chapter_10}{\*\bkmkend idx_chapter_10}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_chapter_10}}{\plain 
\f3\fs16\up6\lang1033  +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} chap:0010}} {\plain \f3\fs16\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Chapter 10}} {\plain \f3\fs16\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Chapter 10}} {\plain \f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_contents')')}} Chapter 10
\par \pard\plain \s29\ri432 \f11\fs60\lang1033 Window Item Protocol
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 
\par }{\uldb\cf11 Window Item Protocol}{\v idx_window_item_protocol}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_wind}{\cf6 ow_item_prot}
}{\fldrslt }}
\par 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\fs16\up6 {\*\bkmkstart idx_window_item_prot}{\*\bkmkend idx_window_item_prot}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_window_item_protocol}} {\fs16\up6 ${\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Window Item Protocol}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP11:0015}} {\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K}
 Window Item Protocol}} {\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_contents')')}} Window Item Protocol
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Window Items}{\v idx_window_items}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_window_items}}{\fldrslt }}
\par {\uldb\cf11 Window Item Protocol Methods}{\v idx_n1_window_item_protocol_methods}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_n1_window_item_p}}{\fldrslt }}
\par 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\up6\lang1033 {\*\bkmkstart idx_window_items}{\*\bkmkend idx_window_items}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_window_items}} {\plain 
\caps\f3\fs16\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Window Items}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP228:0005}} {\plain \caps\f3\fs16\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Window Items}} {\plain \caps\f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_item_protocol')')}} Window Items

\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
Window items are displayed within a Window object. A single object can have many visual instances in a Window object, and each visual instance is called a window item. An object that has one or more visual instances is called a visual object. 
\par An object's visual instance can appear in more than one window or more than once in the same window. Some objects, such as buttons, menus, and text fields, are common to most applications and are provided by AppWare. However, you can also create your own 
visual objects that support window items. This chapter describes the process of creating window items and then controlling their behavior through the use of the window item protocol. 
\par When a Window object is created, the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }queries the protocol of each of its window items by sending an {\uldb\cf11 AOBJ_QUERYPROTOCOL}{\v idx_aobj_queryprotocol}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_queryprotoc}}{\fldrslt }}{\cf1  }message to each window item's administration function. (Each visual object {\i has }
to have an administration function.) The administration function returns a pointer to a function that can be called to create window items. When a window item is needed, the Window object calls the function.
\par The AppWare Window object supports two types of window items:
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }
Window items that create their own windows are called handled window items (HWIs). When the parent window of an HWI is opened, the HWI creates a window by calling the operating system's CreateWindow function or the Window object's OWndCreateWindowEx funct
ion. The HWI window is associated with a window callback procedure, WndProc, that
 receives mouse and keyboard inputs directly from the operating system's window manager. HWIs receive other protocol instructions through the protocol methods for window items. HWI window items carry all of the overhead associated with a standard window.

\par {\cf5 \{bmc rr.bmp\}\tab }Window items that do not create their own window are called lite window items (LWIs). LWIs are "lite" because they do not carry all of the overhead in system resources that are associated with a standard window\emdash 
although the operating system is
 unaware of it, they are managed by AppWare. The operating system's window manager sends any LWI mouse and keyboard input to the LWI's parent Window object. In turn, the Window object passes on these mouse and keyboard inputs to the LWI window items throu
gh the window items' protocol methods. In addition to mouse and keyboard inputs, LWIs receive other instructions for window items through the window items' protocol methods.
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 If you are using existing operating-system controls as window items, HWIs are prob
ably best suited for the job. You can also reuse HWI window items outside of the AppWare ALMs. If you need transparency and nonrectangular controls, you should use LWIs. In addition, LWIs use fewer system resources.  The same Window object can contain HWI
s and LWIs.
\par The window item protocol is a class-based protocol that coordinates the behavior of the window items in a Window object. It can instruct window items to be visible or invisible, selected or deselected, and enabled or disabled, and it can also c
ontrol many other window-item attributes such as how some window items respond to mouse and keyboard input. Since the window item protocol does control window-item behavior for AppWare window items, all of them have to respond to it. 
\par Throughout this chapter, the term "operating system" means a Microsoft Windows operating system. For more information about methods, refer to the section on Window Item Protocol Methods. For more information about class-based protocols, refer to {
\uldb\cf11 Chapter 5}{\v idx_chapter_5}{\field{\*\fldinst {\cf1 macrobu}{\cf1 tton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_chapter_5}}{\fldrslt }}{\cf1 .} 

\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 HWI and LWI Examples}{\v idx_hwi_and_lwi_examples}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {
\cf6 gotobutton idx_hwi_and_lwi_exam}}{\fldrslt }}
\par {\uldb\cf11 Writing Window Items in C}{\v idx_writing_window_items_in_c}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_writing_window_i}
}{\fldrslt }}
\par 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\up6\lang1033 {\*\bkmkstart idx_hwi_and_lwi_exam}{\*\bkmkend idx_hwi_and_lwi_exam}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_hwi_and_lwi_examples}}
{\plain \caps\f3\fs16\up6\lang1033  }{\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPPWITMS:0005}} {\plain \caps\f3\fs16\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $}
 HWI and LWI Examples}} {\plain \caps\f3\fs16\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} HWI and LWI Examples}} {\plain \caps\f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_items')')}} HWI and LWI Examples
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 This section describes the Stop Light window item, which simulates the operation of a common traffic light. It has been implemented in C++ as a
n HWI and as an LWI so that you can use both versions as models for building your own window items. The first part of this section describes programming concepts that are common to HWIs and LWIs. In particular, it illustrates how HWI elements can be ident
ical to those for an LWI. The last part of the section consists of code fragments that illustrate the differences between HWIs and LWIs.
\par The ALM Builder's samples directory contains:
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }A complete  LWI example (\\appware\\samples\\stoplite).
\par {\cf5 \{bmc }{\cf5 rr.bmp\}\tab }A complete HWI example (\\appware\\samples\\stophwnd).
\par {\cf5 \{bmc rr.bmp\}\tab }Icon, resource, and project files for the Stop Light window item so that you can test its operation. 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
All AppWare window items have to include an administration function, a create function, and replacement protocol-method functions.  The key concepts for creating window items are shown in the following code fragments:
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }An administration function is shown in stp_adm.cpp. 
\par {\cf5 \{bmc rr.bmp\}\tab }A create function is shown in stp_vi.cpp.
\par {\cf5 \{bmc rr.bmp\}\tab }A replacement protocol-method function is shown in  stp_main.cpp. 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
The main difference between HWIs and LWIs is in the way their mouse and keyboard inputs are processed. Each LWI relies on its parent Window object to handle mouse and keyboard inputs, but each HWI creates a window that has to handle its own inputs. When y
ou implement an HWI, therefore, you have to provide for the creation and destruction of your window item's window, register your Microsoft Windows class with the operating system, and provide a callback routine (WndProc) to handle window events.
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Administration Function}{\v idx_n2_administration_function}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf6 gotobutton idx_n2_administratio}}{\fldrslt }}
\par {\uldb\cf11 Create Function}{\v idx_create_function}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_create_function}}{\fldrslt }}
\par {\uldb\cf11 Replacement Protocol-method Functions}{\v idx_replacement_protocol_method_functions}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_replacement_prot}}{\fldrslt }}
\par {\uldb\cf11 HWI Window Creation}{\v id}{\v x_hwi_window_creation}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_hwi_window_creat}
}{\fldrslt }}
\par {\uldb\cf11 HWI Callback Routine}{\v idx_hwi_callback_routine}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_hwi_callback_rou}
}{\fldrslt }}
\par {\uldb\cf11 HWI Window Destruction}{\v idx_hwi_window_destruction}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_hwi_window_destr}
}{\fldrslt }}
\par {\uldb\cf11 HWI Base-class Registration}{\v idx_hwi_base_class_registration}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_hwi_base_class_r}}{\fldrslt }}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_n2_administratio}{\*\bkmkend idx_n2_administratio}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_n2_administration_function}} {
\caps\fs16\up6 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Administration Function}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP230:0005}} {\caps\fs16\up6 K{\footnote \pard\plain 
\s245 \f3\fs20\lang1033 {\fs16\up6 K} Administration Function}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_hwi_and_lwi_examples')')}} Administration Function
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 Your visual object has to have an administration function that responds to {\uldb\cf11 AOBJ_QUERYPROTOCOL}{\v idx_aobj_queryprotocol}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_queryprotoc}}{\fldrslt }}{\cf1  }messages from the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1 .}
 (It should also respond to other object messages, but the following fragment from stp_adm.cppcode only shows {\uldb\cf11 AOBJ_QUERYPROTOCOL}{\v idx_aobj_queryprotocol}{\field{\*\fldinst {\cf1 macrobut}{\cf1 ton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_queryprotoc}}{\fldrslt }}{\cf1 .}
) The Stop Light object's administration function is called StoplightObjectAdm. It returns a pointer to the function that creates Stop Light window items, which is named StopLightCreate. The {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
creates window items from the Stop Light object by calling StopLightCreate. A section of the administration function for the Stop Light object is as follows: 
\par \pard\plain \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 LONG ALMCALLBACK StoplightObjectAdm(
\par \tab \tab OBJECTID\tab \tab \tab oiStoplight,
\par \tab \tab pAObjMessage\tab \tab \tab pMessage)
\par \tab \{\tab \tab o
\par \tab \tab \tab o
\par \tab \tab \tab o
\par \tab switch(pMessage->message1)
\par \tab \{\tab \tab o
\par \tab \tab \tab o
\par \tab \tab \tab o
\par \tab \tab case AOBJ_QUERYPROTOCOL:
\par \tab \tab \tab pQueryInfo = 
\par \tab \tab \tab \tab \tab (ApQueryInfo*) pMessage->message4;
\par 
\par \tab \tab \tab if (pQueryInfo->protocol == APROT_WND)
\par \tab \tab \tab \{
\par \tab \tab \tab \tab rVal = AP_SUPPORTED;
\par \tab \tab \tab \tab pQueryInfo->pfnCreate = (APPCFN) StopLightCreate;
\par \tab \tab \tab \}
\par \tab \tab \tab break;
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_create_function}{\*\bkmkend idx_create_function}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_create_function}} {\caps\fs16\up6 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Create Function}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP230:0010}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {
\fs16\up6 K} Create Function}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_hwi_and_lwi_examples')')}} Create Function
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 Your visual object has to have a create function that can be called by the {\uldb\cf11 AppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
to create window items. At design time, the create function is called during window layout. At run time, the create function is called when a window item's Window object is started. The following code, which is taken from stp_vi.cpp, shows the create func
tion for the Stop Light object, StopLightCreate:
\par \pard\plain \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 OpWndItemD* ALMAPI\tab \tab StopLightCreate(OBJECTID oiItem, \tab \tab \tab \tab OBJECTID oiParent, RECT* rcItem, 
\par \tab \tab \tab long status, long /*special*/\tab )
\par \tab \{
\par \tab StopLightVI* stp_vi = 
\par \tab \tab new StopLightVI(oiItem, oiParent, rcItem, \tab status);
\par \tab return stp_vi;
\par \tab \}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_replacement_prot}{\*\bkmkend idx_replacement_prot}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_replacement_protocol_method_functions}} {
\caps\fs16\up6 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Replacement Protocol-method Functions}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP230:0015}} {\caps\fs16\up6 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Replacement Protocol-method Functions}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_hwi_and_lwi_examples')')}}
 Replacement Protocol-method Functions
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
When you implement specialized functions for your window item, you should also replace default window item protocol methods with your own functions. The Stop Light window item implements specialized functions for the Destroy, DataChanged, Activate, Deacti
vated,  Draw, MouseDown, MouseMove, MouseUp, and KeyDown protocol methods. Model your replacement on the following code, which is from the stp_vi.cpp file:
\par \pard\plain \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 void ALMAPI\tab StopLightVI::Destroy(
\par \tab void
\par \tab )\tab \tab \tab o
\par \tab \tab \tab \tab o
\par \tab \tab \tab \tab o
\par void ALMAPI\tab StopLightVI::DataChanged(
\par \tab long\tab \tab details,
\par \tab long\tab \tab modifiers,
\par \tab long\tab \tab variation
\par \tab )\tab \tab \tab o
\par \tab \tab \tab \tab o
\par \tab \tab \tab \tab o
\par long ALMAPI\tab StopLightVI::Activate(
\par \tab int\tab \tab causedBy,
\par \tab BOOL\tab \tab mustKeep
\par \tab )\tab \tab \tab o
\par \tab \tab \tab \tab o
\par \tab \tab \tab \tab o
\par void ALMAPI\tab StopLightVI::Deactivated(
\par \tab void
\par \tab )\tab \tab \tab o
\par \tab \tab \tab \tab o
\par \tab \tab \tab \tab o
\par void ALMAPI\tab StopLightVI::Draw(
\par \tab HDC\tab \tab hdc,
\par \tab RECT*\tab \tab invalidRect
\par \tab )\tab \tab \tab o
\par \tab \tab \tab \tab o
\par \tab \tab \tab \tab o
\par void ALMAPI\tab StopLightVI::MouseDown(
\par \tab POINT*\tab \tab where,
\par \tab int\tab \tab keysDown,
\par \tab int\tab \tab button
\par \tab )\tab \tab \tab o
\par \tab \tab \tab \tab o
\par \tab \tab \tab \tab o
\par void ALMAPI\tab StopLightVI::MouseMove(
\par \tab POINT*\tab \tab where,
\par \tab int\tab \tab keysDown
\par \tab )\tab \tab \tab o
\par \tab \tab \tab \tab o
\par \tab \tab \tab \tab o
\par void ALMAPI\tab StopLightVI::MouseUp(
\par \tab POINT*\tab \tab where,
\par \tab int\tab \tab keysDown,
\par \tab int\tab \tab button
\par \tab )\tab \tab \tab o
\par \tab \tab \tab \tab o
\par \tab \tab \tab \tab o
\par void ALMAPI\tab StopLightVI::KeyDown(
\par \tab int\tab \tab vKey,
\par \tab char\tab \tab ascii,
\par \tab long\tab \tab keyData
\par \tab )
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_hwi_window_creat}{\*\bkmkend idx_hwi_window_creat}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_hwi_window_creation}} {\caps\fs16\up6 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} HWI Window Creation}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP230:0020}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {
\fs16\up6 K} HWI Window Creation}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_hwi_and_lwi_examples')')}} HWI Window Creation
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The window for an HWI should be created when the parent window is opened. When a window item's parent is opened, the {\uldb\cf11 AppWare Bus}{\v 
idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
uses the Stop Light's HWI ParentOpened protocol method to call the OWndCreateWindowEx function. The function creates the window. 
\par \pard\plain \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 void ALMAPI StopLightVI::ParentOpened()
\par \tab \{
\par \tab \tab m_hwndItem = 
\par \tab \tab \tab OWndCreateWindowEx(this, 0, 
\par \tab \tab \tab "StopLight", "",
\par \tab \tab \tab WS_CHILD, hInstance, this);
\par \tab \}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_hwi_callback_rou}{\*\bkmkend idx_hwi_callback_rou}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_hwi_callback_routine}} {\caps\fs16\up6 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} HWI Callback Routine}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP230:0025}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 
{\fs16\up6 K} HWI Callback Routine}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_hwi_and_lwi_examples')')}} HWI Callback Routine
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 Your HWI requires a callback routine (WndProc proc
edure) that receives keyboard and mouse events through its window from the operating system. The Stop Light HWI calls the same mouse and keyboard input methods as those that are called by the LWI version. The only difference between them is that the HWI c
alls these input methods directly from its WndProc. These methods include the window item's Draw, MouseDown, MouseMove, MouseUp, and KeyDown protocol methods.
\par The Stop Light window item's callback routine is called StopLightWndProc. It responds to WM_CREATE, WM_PAINT, and other WM_  messages from the operating system.
\par \pard\plain \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 LONG FAR PASCAL StopLightWndProc (HWND hWnd, 
\par \tab \tab \tab \tab \tab UINT\tab message, 
\par \tab \tab \tab \tab \tab UINT\tab wParam,
\par \tab \tab \tab \tab \tab LONG\tab lParam)
\par \tab \{\tab \tab \tab o
\par \tab \tab \tab \tab o
\par \tab \tab \tab \tab o
\par switch(message)
\par \tab \tab \{
\par \tab \tab case WM_CREATE:
\par \tab \tab \tab stp_vi =
\par \tab \tab \tab (StopLightVI*)(((CREATESTRUCT*)
\par \tab \tab \tab \tab \tab lParam)->lpCreateParams);
\par 
\par \tab \tab \tab // The following line is required for 
\par \tab \tab \tab // ALL handled window items!  
\par \tab \tab \tab // Windows sends other messages before
\par \tab \tab \tab // CreateWindow returns.
\par \tab \tab \tab stp_vi->m_hwndItem = hWnd;
\par 
\par \tab \tab \tab SetWindowLong(hWnd, 0, (long)stp_vi);
\par \tab \tab \tab break;
\par 
\par \tab \tab case WM_PAINT:
\par \tab \tab \tab stp_vi = (StopLightVI*)GetWindowLong(hWnd, 0);
\par \tab \tab \tab stp_vi->Draw();
\par \tab \tab \tab break;
\par \tab \tab \tab 
\par \tab \tab case WM_LBUTTONDOWN:
\par \tab \tab case WM_MBUTTONDOWN:
\par \tab \tab case WM_RBUTTONDOWN:
\par \tab \tab \tab stp_vi = (StopLightVI*)GetWindowLong(hWnd, 0);
\par \tab \tab \tab where.x = LOWORD(lParam);
\par \tab \tab \tab where.y = HIWORD(lParam);
\par \tab \tab \tab stp_vi->MouseDown(&where);
\par \tab \tab \tab break;
\par \tab \tab \tab \tab o
\par \tab \tab \tab \tab o
\par \tab \tab \tab \tab o
\par \tab \}
\par 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_hwi_window_destr}{\*\bkmkend idx_hwi_window_destr}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_hwi_window_destruction}} {\caps\fs16\up6 
${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} HWI Window Destruction}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP230:0030}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 K} HWI Window Destruction}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_hwi_and_lwi_examples')')}} HWI Window Destruction
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 An HWI's window should be destroyed while the parent window is closing. When a window item's parent window is about to close, the {\uldb\cf11 AppWare Bus}{\v 
idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
uses the Stop Light HWI's ParentClosing protocol method to call the DestroyWindow function. The DestroyWindow function destroys the window. 
\par \pard\plain \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 void ALMAPI StopLightVI::ParentClosing()
\par \tab \{
\par \tab \tab DestroyWindow(m_hwndItem);
\par \tab \tab m_hwndItem = NULL;
\par \tab \}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_hwi_base_class_r}{\*\bkmkend idx_hwi_base_class_r}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_hwi_base_class_registration}} {
\caps\fs16\up6 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} HWI Base-class Registration}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP230:0035}} {\caps\fs16\up6 K{\footnote \pard\plain 
\s245 \f3\fs20\lang1033 {\fs16\up6 K} HWI Base-class Registration}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_hwi_and_lwi_examples')')}} HWI Base-class Registration
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 HWIs require the registration of your window item's Microsoft Wi
ndows class with the operating system. The following code fragment, which is taken from the file stp_main.cpp, shows registration of the "StopLight" class. When the window for your HWI window item is registered and instances of this class are created, the
 specified WndProc receives the window messages for these window items. In the following example, the StopLightWndProc has been specified to receive window messages for all of the Stop Light object's window items.
\par \pard\plain \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 //////////////////////////////////////////////////////////
\par //  Function: LibMain
\par //\tab Description:  Called when a library is initially loaded.
\par //////////////////////////////////////////////////////////
\par int FAR PASCAL LibMain(HINSTANCE hIns, WORD, WORD, LPSTR)
\par \tab \{
\par     WNDCLASS wc;
\par #ifdef __BORLANDC__
\par \tab \tab _WinAllocFlag = GMEM_SHARE;
\par #endif
\par 
\par \tab wc.style = NULL;
\par \tab wc.lpfnWndProc = StopLightWndProc;
\par \tab wc.cbWndExtra = sizeof(StopLightVI*);
\par \tab wc.hInstance = hIns;
\par \tab wc.hIcon = NULL;
\par \tab wc.hCursor = LoadCursor(NULL, IDC_ARROW);
\par \tab wc.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);
\par \tab wc.lpszMenuName = NULL;
\par \tab wc.lpszClassName = "StopLight";
\par \tab RegisterClass (&wc);
\par 
\par \tab hInstance = hIns;
\par \tab return TRUE;
\par \tab \}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\up6\lang1033 {\*\bkmkstart idx_writing_window_i}{\*\bkmkend idx_writing_window_i}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_writing_window_items_in_c}}{\plain \caps\f3\fs16\up6\lang1033  }{\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPPWITMS:0010}} {\plain \caps\f3\fs16\up6\lang1033 ${\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 $} Writing Window Items in C}} {\plain \caps\f3\fs16\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Writing Window Items in C}} {\plain \caps\f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_items')')}} Writing Window Items in C
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
The window items that have been created by Novell are written in C++. C++ was chosen because its built-in features support object-oriented programming. Although it would be more difficult to do, however, a programmer could also use C to create a window it
em. This section describes the differences between window items that have been written in C and C++. It also describes techniques for writing window items in either language.  
\par There are two areas where window items written in C are different from window items written in C++. The first occurs when protocol methods are invoked and the second occurs when window-item data is accessed.
\par If you write a window item in C, you have to write a virtual table (vtable) that defines how your window item will respond to window item protocol. The virtual table is a statically alloc
ated table of functions. It directs the processing of the required functions that correspond to window events and window item protocol instructions; therefore, you can make your window item override default functions by replacing the default functions in 
the vtable. The order and the number of functions in the vtable is fixed. 
\par If you write a window item in C++, the derived class can override the default methods defined in the base class. This eliminates any need for a vtable when you write a window item in C++.
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 The Virtual Table}{\v idx_the_virtual_table}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_the_virtual_tabl}}{\fldrslt }}
\par {\uldb\cf11 Data-member Reference}{\v idx_data_member_reference}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_data_member_refe}
}{\fldrslt }}
\par {\uldb\cf11 Requirements for Window Items}{\v idx_requirements_for_window_items}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_requirements_for}}{\fldrslt }}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_the_virtual_tabl}{\*\bkmkend idx_the_virtual_tabl}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_the_virtual_table}} {\caps\fs16\up6 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} The Virtual Table}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP231:0005}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {
\fs16\up6 K} The Virtual Table}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_writing_window_items_in_c')')}} The Virtual Table
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 This section contains two examples of a virtual table. The first is for an LWI 
and the second is for an HWI. The following LWI virtual table is a collection of the default functions that are called in response to the window item protocol for LWIs. Although you cannot change their order, you can override the default functionality by 
replacing individual functions in the table.
\par \pard\plain \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 vtable = \{
\par OpLwiDestroy,\tab \tab \tab /* default for destroy\tab */
\par OpLwiQueryProtocol,\tab \tab /* default for QueryProtocol\tab */
\par OpLwiType,\tab \tab \tab /* default for Type\tab */
\par OpLwiEdit,\tab \tab \tab /* default for Edit\tab */
\par OpLwiCut,\tab \tab \tab /* default for Cut\tab */
\par OpLwiCopy,\tab \tab \tab /* default for Copy\tab */
\par OpLwiPaste,\tab \tab \tab /* default for Paste\tab */
\par OpLwiUndo,\tab \tab \tab /* default for Undo\tab */
\par OpLwiDataChanged,\tab \tab /* default for DataChanged\tab */
\par OpLwiParentOpened,\tab \tab /* default for ParentOpened\tab */
\par OpLwiParentClosing,\tab \tab /* default for ParentClosing\tab */
\par OpLwiAccelKeyHit,\tab \tab /* default for AccelKeyHit\tab */
\par OpLwiSetSelection,\tab \tab /* default for SetSelection\tab */
\par OpLwiSetDefaultItem,\tab \tab /* default for SetDefaultItem\tab */
\par OpLwiActivate,\tab \tab \tab /* default for Activate \tab */
\par OpLwiDeactivated,\tab \tab /* default for Deactivated \tab */
\par OpLwiShow,\tab \tab \tab /* default for Show\tab */
\par OpLwiHide,\tab \tab \tab /* default for Hide\tab */
\par OpLwiMove,\tab \tab \tab /* default for Move\tab */
\par OpLwiEnable,\tab \tab \tab /* default for Enable\tab */
\par OpLwiScreenLocationChanged,
\par \tab  \tab \tab \tab /* default for ScreenLocationChanged\tab */
\par OpLwiAdjustNewRect,\tab \tab /* default for AdjustNewRect\tab */
\par OpLwiPointInItem,\tab \tab /* default for PointInItem\tab */
\par OpLwiInvalidateItem,\tab \tab /* default for InvalidateItem\tab */
\par OpLwiItemInRect,\tab \tab \tab /* default for ItemInRect\tab */
\par OpLwiItemInRegion,\tab \tab /* default for ItemInRegion\tab */
\par OpLwiRemoveItemFromRegion,
\par \tab \tab \tab \tab \tab /* default for RemoveItemFromRegion\tab */
\par OpLwiDrawTrackingRect,
\par \tab \tab \tab \tab \tab /* default for DrawTrackingRect\tab */
\par OpLwiDrawGrabHandles,\tab \tab /* default for DrawGrabHandles\tab */
\par OpLwiInvalidateGrabHandles,
\par \tab \tab \tab \tab /* default for InvalidateGrabHandles\tab */
\par OpLwiPointInGrabHandle,
\par \tab \tab \tab \tab \tab /* default for PointInGrabHandle\tab */
\par OpLwiGetExtraData,\tab \tab /* default for GetExtraData \tab */
\par OpLwiExportExtraData,\tab \tab /* default for ExportExtraData\tab */
\par OpLwiImportExtraData,\tab \tab /* default for ImportExtraData\tab */
\par OpLwiParentNotification,\tab 
\par \tab \tab \tab \tab \tab /* default for ParentNotification\tab */
\par OpLwiKeyDown,\tab \tab \tab /* default for KeyDown\tab */
\par OpLwiKeyUp,\tab \tab \tab /* default for KeyUp\tab */
\par OpLwiMouseMove,\tab  \tab \tab /* default for MouseMove\tab */
\par OpLwiMouseDown,\tab  \tab \tab /* default for MouseDown\tab */
\par OpLwiDoubleClicked,\tab \tab /* default for DoubleClicked \tab */
\par OpLwiMouseUp,\tab \tab \tab /* default for MouseUp \tab */
\par OpLwiCancelMode, \tab \tab /* default for CancelMode\tab */
\par OpLwiUndo\tab \tab \tab /* default for Undo \tab */
\par \};
\par \pard \s26\li1440\ri432\tx288\tqc\tx576\tqr\tlul\tx864\tx1152\tx1440\tqc\tx1728\tx1890\tqr\tlul\tx1980\tqr\tlul\tx2592\tlul\tx2880\tqc\tlul\tx3168\tx3240\tx3456\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The HWI table is a collection of the default functions that are called in response t
o the window item protocol for HWIs. Although you cannot change their order, you can override the default functionality by replacing individual functions in the table.\line 
\par \pard\plain \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 vtable = \{
\par OpHwiDestroy,\tab \tab \tab /* default for destroy\tab */
\par OpHwiQueryProtocol,\tab \tab /* default for QueryProtocol \tab */
\par OpHwiType,\tab \tab \tab /* default for Type  \tab */
\par OpHwiEdit,\tab \tab \tab /* default for Edit\tab */
\par OpHwiCut,\tab \tab \tab /* default for Cut \tab */
\par OpHwiCopy,\tab \tab \tab /* default for Copy  \tab */
\par OpHwiPaste,\tab \tab \tab /* default for Paste  \tab */
\par OpHwiUndo,\tab \tab \tab /* default for Undo  \tab */
\par OpHwiDataChanged,\tab \tab /* default for DataChanged  \tab */
\par OpHwiParentOpened,\tab \tab /* default for ParentOpened \tab */
\par OpHwiParentClosing,\tab \tab /* default for ParentClosing \tab */
\par OpHwiAccelKeyHit,\tab \tab /* default for AccelKeyHit \tab */
\par OpHwiGetSelection,\tab \tab /* default for GetSelection\tab */
\par OpHwiSetSelection,\tab \tab /* default for SetSelection \tab */
\par OpHwiSetDefaultItem,\tab \tab /* default for SetDefaultItem \tab */
\par OpHwiActivate,\tab \tab \tab /* default for Activate \tab */
\par OpHwiDeactivated,\tab \tab /* default for Deactivated \tab */
\par OpHwiShow,\tab \tab \tab /* default for Show \tab */
\par OpHwiHide,\tab \tab \tab /* default for Hide \tab */
\par OpHwiMove,\tab \tab \tab /* default for Move \tab */
\par OpHwiEnable,\tab \tab \tab /* default for Enable \tab */
\par OpHwiScreenLocationChanged,
\par \tab \tab \tab \tab /* default for ScreenLocationChanged\tab */
\par OpHwiAdjustNewRect,\tab \tab /* default for AdjustNewRect \tab */
\par OpHwiPointInItem,\tab \tab /* default for PointInItem \tab */
\par OpHwiInvalidateItem,\tab \tab /* default for InvalidateItem \tab */
\par OpHwiItemInRect,\tab \tab \tab /* default for ItemInRect \tab */
\par OpHwiItemInRegion,\tab \tab /* default for ItemInRegion \tab */
\par OpHwiRemoveItemFromRegion,
\par \tab \tab \tab \tab \tab /* default for RemoveItemFromRegion\tab */
\par OpHwiDrawTrackingRect,
\par \tab \tab \tab \tab \tab /* default for DrawTrackingRect\tab */
\par OpHwiDrawGrabHandles,\tab \tab /* default for DrawGrabHandles \tab */
\par OpHwiInvalidateGrabHandles,
\par \tab \tab \tab \tab /* default for InvalidateGrabHandles\tab */
\par OpHwiPointInGrabHandle,
\par \tab \tab \tab \tab \tab /* default for PointInGrabHandle \tab */
\par OpHwiGetExtraData,\tab \tab /* default for GetExtraData \tab */
\par OpHwiExportExtraData,\tab \tab /* default for ExportExtraData \tab */
\par OpHwiImportExtraData,\tab \tab /* default for ImportExtraData \tab */
\par OpHwiParentNotification \tab 
\par \tab \tab \tab \tab \tab /* default for ParentNotification \tab */
\par \};
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_data_member_refe}{\*\bkmkend idx_data_member_refe}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_data_member_reference}} {\caps\fs16\up6 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Data-member Reference}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP231:0010}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 K} Data-member Reference}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_writing_window_items_in_c')')}} Data-member Reference{\pard\plain 
\s2\sb240\sa120\keepn \b\v\f3\fs36\cf2\lang1033 {\tc {\v Data-member Reference}}}
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
OpHwndWndItem and OpLiteWndItem are structures that define a visual instance of a window item. Window items written in C++ can use inheritance to simplify a structure's implementation and access. A window item's visual instance record has to inherit from 
either OpLiteWndItem or OpHwndWndItem. The default constructors for these classes are private; therefore, you cannot call them. (The default constructors are without parameters.)
\par I
f you reference data members of window-item structures in C, you can embed structures within structures; however, these embedded references are cumbersome and are prone to programming mistakes. The Window object has data-reference macros that make referen
ces to its public data members easier. If you program a window item in C, you should use these macros to reference window-item structures. 
\par The window item's data-reference macros are listed in the following table. They give C programs access to the public data members of a window item's visual instance data. The macros' only parameters are the OpHwndWndItem and OpLiteWndItem structures.
\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Macro\tab \tab Member Type, Usage
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 OPWND_TABLE\tab Pointer\line The virtual table.
\par OPWND_OIITEM\tab OBJECTID\line The object ID of the window item.
\par OPWND_RCITEM\tab RECT\line The bounding rectangle of the window item in logical decipoints. An item is responsible for painting from the top-left corner to, and including, the bottom-right corner of this rectangle. 
\par OPWND_OIPARENT\tab OBJECTID\line The object ID of the parent Window object.
\par OPWND_HWNDPARENT\tab HWND\line The window handle of the parent Window object.
\par OPWND_HWNDITEM\tab HWND\line The item's window handle for HWIs. This field is not present for LWIs. 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
\par The public members of OpLiteWndItem and OpHwndWndItem class are:\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Member\tab Type\tab Usage
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 m_oiItem\tab OBJECTID\tab The object ID of the window item.
\par m_rcItem\tab RECT\tab The bounding rectangle of the window item in logical coordinates. Units are in tenths of a millimeter.
\par m_oiParent\tab OBJECTID\tab The object ID of the parent Window object.
\par m_hwndParent\tab HWND\tab The window handle of the parent Window object.\line 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 In addition to the public members listed in the preceding table, OpHwndWndItem also contains:\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Member\tab Type\tab Usage
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 m_hwndItem\tab HWND\tab 
The item's window handle. When an item creates a window, it has to use this member as a value to store its window handle. If it creates a parent window with children, it has to use this member to store the parent window handle.
\par 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_requirements_for}{\*\bkmkend idx_requirements_for}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_requirements_for_window_items}} {
\caps\fs16\up6 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Requirements for Window Items}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP231:0015}} {\caps\fs16\up6 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Requirements for Window Items}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_writing_window_items_in_c')')}}
 Requirements for Window Items{\pard\plain \s2\sb240\sa120\keepn \b\v\f3\fs36\cf2\lang1033 {\tc {\v Requirements for Window Items}}}
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 To be classified as an AppWare window item, an item has to respond to the window item protocol when it is queried by the {\uldb\cf11 AppWare Bus}{\v 
idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1 .}
 It responds by supplying a pointer to the create function that allocates and initializes the item's visual-instance record. The following procedure lists the steps you should use when you write an LWI or HWI. 
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 1.\tab Set up the create function's pointer.
\par 2.\tab Make the record's first member an OpLiteWndItem or OpHwndWndItem structure. 
\par 3.\tab Call OpLwiInit or OpHwiInit to initialize the appropriate window item structures.
\par 4.\tab Use the OPWND_TABLE macro to initialize the virtual table for your \line window item.
\par \pard\plain \f3\fs20\lang1033 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The beginning of your window item's visual instance record should be structured as follows:
\par \pard\plain \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 Struct MY_ITEM
\par \{
\par \tab OpLiteWndItem\tab \tab \tab wi;
\par \tab int\tab \tab \tab MYDATA;
\par \tab char\tab \tab \tab MoreOfMyData[10];
\par \};
\par CreateFunction(idItem, idParent, 
\par \tab \tab \tab rcItem, status, special)
\par \{
\par \tab MY_ITEM\tab \tab \tab * myItem
\par \tab myItem = (MY_ITEM*) malloc(sizeof(MY_ITEM));
\par \tab \tab OpLwiInit(myItem);
\par \tab OPWND_TABLE(myItem) = vTable;
\par \tab \tab \tab \tab o
\par \tab \tab \tab \tab o
\par \tab \tab \tab \tab o
\par \}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\up6\lang1033 {\*\bkmkstart idx_n1_window_item_p}{\*\bkmkend idx_n1_window_item_p}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_n1_window_item_protocol_methods}} {\plain \caps\f3\fs16\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Window Item Protocol Methods}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {
\fs16\up6 +} SUPP228:0010}} {\plain \caps\f3\fs16\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Window Item Protocol Methods}} {\plain \caps\f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_window_item_protocol')')}} Window Item Protocol Methods
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 This section contains detailed descriptions of the window item protocol methods, which are class based. {\uldb\cf11 Chapter 5}{\v idx_chapter_5}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_chapter_5}}{\fldrslt }}{\cf1  }
contains more information about class-based protocols. 
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 AccelKeyHit}{\v idx_accelkeyhit}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_accelkeyhit}}{\fldrslt }}
\par {\uldb\cf11 Activ}{\uldb\cf11 ate}{\v idx_activate}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_activate}}{\fldrslt }}
\par {\uldb\cf11 AdjustNewRect}{\v idx_adjustnewrect}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_adjustnewrect}}{\fldrslt }}
\par {\uldb\cf11 CancelMode}{\v idx_cancelmode}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_cancelmode}}{\fldrslt }}
\par {\uldb\cf11 Copy}{\v idx_copy}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_copy}}{\fldrslt }}
\par {\uldb\cf11 CreateFunction}{\v idx_createfunction}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_createfunction}}{\fldrslt }}
\par {\uldb\cf11 Cut}{\v idx_cut}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_cut}}{\fldrslt }}
\par {\uldb\cf11 DataChanged}{\v idx_datachanged}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_datachanged}}{\fldrslt }}
\par {\uldb\cf11 Deactivated}{\v idx_deactivated}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_deactivated}}{\fldrslt }}
\par {\uldb\cf11 Destroy}{\v idx_destroy}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_destroy}}{\fldrslt }}
\par {\uldb\cf11 DoubleClicked}{\v idx_doubleclicked}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_doubleclicked}}{\fldrslt }}
\par {\uldb\cf11 Draw}{\v idx_draw}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_draw}}{\fldrslt }}
\par {\uldb\cf11 DrawGrabHandles}{\v idx_drawgrabhandles}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_drawgrabhandles}}{\fldrslt }}
\par {\uldb\cf11 DrawTrackingRect}{\v idx_drawtrackingrect}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_drawtrackingrect}}{\fldrslt }}
\par {\uldb\cf11 Edit}{\v idx_edit}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_edit}}{\fldrslt }}
\par {\uldb\cf11 Enable}{\v idx_enable}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_enable}}{\fldrslt }}
\par {\uldb\cf11 ExportExtraData}{\v idx_exportextradata}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_exportextradata}}{\fldrslt }}
\par {\uldb\cf11 GetExtraData}{\v idx_getextradata}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_getextradata}}{\fldrslt }}
\par {\uldb\cf11 GetSelection}{\v idx_getselection}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_getselection}}{\fldrslt }}
\par {\uldb\cf11 Hide}{\v idx_hide}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_hide}}{\fldrslt }}
\par {\uldb\cf11 ImportExtraData}{\v idx_importextradata}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_importextradata}}{\fldrslt }}
\par {\uldb\cf11 InvalidateGrabHandles}{\v idx_invalidategrabhan}{\v dles}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_invalidategrabha}
}{\fldrslt }}
\par {\uldb\cf11 InvalidateItem}{\v idx_invalidateitem}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_invalidateitem}}{\fldrslt }}
\par {\uldb\cf11 ItemInRect}{\v idx_iteminrect}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_iteminrect}}{\fldrslt }}
\par {\uldb\cf11 ItemInRegion}{\v idx_iteminregion}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_iteminregion}}{\fldrslt }}
\par {\uldb\cf11 KeyDown}{\v idx_keydown}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_keydown}}{\fldrslt }}
\par {\uldb\cf11 KeyUp}{\v idx_key}{\v up}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_keyup}}{\fldrslt }}
\par {\uldb\cf11 MouseDown}{\v idx_mousedown}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_mousedown}}{\fldrslt }}
\par {\uldb\cf11 MouseMove}{\v idx_mousemove}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_mousemove}}{\fldrslt }}
\par {\uldb\cf11 MouseUp}{\v idx_mouseup}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_mouseup}}{\fldrslt }}
\par {\uldb\cf11 Move}{\v idx_move}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_move}}{\fldrslt }}
\par {\uldb\cf11 ParentClosing}{\v idx_parentclosing}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton }{\cf6 DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_parentclosing}}{\fldrslt }}
\par {\uldb\cf11 ParentNotification}{\v idx_parentnotification}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_parentnotificati}}{\fldrslt }}

\par {\uldb\cf11 ParentOpened}{\v idx_parentopened}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_parentopened}}{\fldrslt }}
\par {\uldb\cf11 Paste}{\v idx_paste}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_paste}}{\fldrslt }}
\par {\uldb\cf11 PointInGrabHandle}{\v idx_pointingrabhandle}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_pointingrabhandl}}{\fldrslt }}

\par {\uldb\cf11 PointInItem}{\v idx_pointinitem}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_pointinitem}}{\fldrslt }}
\par {\uldb\cf11 Print}{\v idx_print}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_print}}{\fldrslt }}
\par {\uldb\cf11 RemoveItemFromRegion}{\v idx_removeitemfromregion}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_removeitemfromre}
}{\fldrslt }}
\par {\uldb\cf11 ScreenLocationChanged}{\v idx_screenlocationchanged}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_screenlocationch}
}{\fldrslt }}
\par {\uldb\cf11 SetDefaultItem}{\v idx_setdefaultitem}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_se}{\cf6 tdefaultitem}}{\fldrslt }}

\par {\uldb\cf11 SetSelection}{\v idx_setselection}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_setselection}}{\fldrslt }}
\par {\uldb\cf11 Show}{\v idx_show}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_show}}{\fldrslt }}
\par {\uldb\cf11 Undo}{\v idx_undo}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_undo}}{\fldrslt }}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\up6\lang1033 {\*\bkmkstart idx_accelkeyhit}{\*\bkmkend idx_accelkeyhit}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_accelkeyhit}} {\plain 
\caps\f3\fs16\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AccelKeyHit}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP229:0005}} {\plain \caps\f3\fs16\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AccelKeyHit}} {\plain \caps\f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_window_item_protocol_methods')')}}
 AccelKeyHit
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void AccelKeyHit(pWI)
\par \tab {\b\f12\fs18 Description\tab }This method is called when a window item's accelerator key is pressed while the item is in the active window.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab \tab The address of a window item. This parameter is not passed in C++. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None.
\par \tab {\b\f12\fs18 Comments\tab }To register an item's accelerator key with the Window object, have the item call the API function OWndSetItemAccelKey.
\par \tab {\b\f12\fs18 Default Action\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\up6\lang1033 {\*\bkmkstart idx_activate}{\*\bkmkend idx_activate}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_activate}} {\plain 
\caps\f3\fs16\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Activate}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP229:0010}} {\plain \caps\f3\fs16\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Activate}} {\plain \caps\f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_window_item_protocol_methods')')}} Activate
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }long Activate(pWI, causedBy, mustKeep)
\par \tab {\b\f12\fs18 Description\tab }This method is called when a window item should be activated.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab   \tab The item's visual instance record. This parameter is not passed in C++. 
\par causedBy\tab int  \tab Set this parameter to one of the following:\line {\fs20 OWND_ACTIVATED_BY_WINDOW, OWND_ACTIVATED_BY_MOUSE, OWND_ACTIVATED_BY_TAB, OWND_ACTIVATED_BY_CURSORKEYS, }or\line {\fs20 OWND_ACTIVATED_BY_OTHER}. 
\par mustKeep\tab BOOL  \tab The parameter is TRUE if the item must not pass the activation on to another item and FALSE if the item can request that the activation be passed on. Refer to the list of return values for more information.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value specifies what action, if any, should be taken by the protoc
ol method. The following table lists possible responses.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab \tab Meaning
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 OWND_ACTIVATION_KEPT\tab The item kept the activation.
\par OWND_ACTIVATION_PASS\tab 
The window item declines the activation and requests that the next item in the group be activated. If the protocol method returns this value, the Window object might attempt to activate the item again if the activation cannot be passe
d. If that happens, the Window object activates the item with mustKeep equal to TRUE. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Comments\tab }When this method is called, the 
item has the input focus and should make any changes necessary to reflect its ownership. The necessary ownership changes are listed under Default Action. 
\par \tab {\b\f12\fs18 Default Action\tab }
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }For HWIs, the item's window handle is used to call SetFocus. 
\par {\cf5 \{bmc rr.bmp\}\tab }For LWIs, the item is invalidated.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\up6\lang1033 {\*\bkmkstart idx_adjustnewrect}{\*\bkmkend idx_adjustnewrect}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_adjustnewrect}} {\plain 
\caps\f3\fs16\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AdjustNewRect}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP229:0015}} {\plain \caps\f3\fs16\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} AdjustNewRect}} {\plain \caps\f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_window_item_protocol_methods')')}}
 AdjustNewRect
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }LONG AdjustNewRect(pWI, newRect, flag)
\par \tab {\b\f12\fs18 Description\tab }When necessary, this method adjusts the size or position of a window item's new display rectangle.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab \tab The address of a window item. This parameter is not passed in C++. 
\par newRect\tab RECT*   \tab The item's new, requested rectangle.
\par flag\tab LONG\tab A combination of the following flags.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab \tab Meaning
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 OWND_ADJRECT_ANCHOR_T\tab The top of the item's rectangle is to remain unchanged.
\par OWND_ADJRECT_ANCHOR_L\tab The left of the item's rectangle is to remain unchanged.
\par OWND_ADJRECT_ANCHOR_B\tab The bottom of the item's rectangle is to remain unchanged.
\par OWND_ADJRECT_ANCHOR_R\tab The right of the item's rectangle is to remain unchanged.
\par OWND_ADJRECT_DEFAULT_W
\par \tab \tab The item is to modify newRect to either the default width or the ideal width for the item and its data.
\par OWND_ADJRECT_DEFAULT_H
\par \tab \tab The item is to modify newRect to either the default height or the ideal height for the item and its data.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value is a combination of the following flags.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab \tab Meaning
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 OWND_ADJRECT_SWAPPED_TB
\par \tab \tab The item swapped the top and bottom values of the rectangle.
\par OWND_ADJRECT_SWAPPED_LR
\par \tab \tab The item swapped the left and right values of the rectangle.
\par OWND_ADJRECT_CHANGED_T
\par \tab \tab The item changed the rectangle's top value.
\par OWND_ADJRECT_CHANGED_L
\par \tab \tab The item changed the rectangle's left value.
\par OWND_ADJRECT_CHANGED_B
\par \tab \tab The item changed the rectangle's bottom value.
\par OWND_ADJRECT_CHANGED_R
\par \tab \tab The item changed the rectangle's right value.
\par OWND_ADJRECT_NODEFAULT_W\line There is no default width for this item. 
\par OWND_ADJRECT_NODEFAULT_H\line There is no default height for this item. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Comments\tab }This function is called to deter
mine whether a newRect is acceptable before an item is relocated. If the newRect is not acceptable, have the item change it by modifying the unanchored corner. 
\par \tab {\b\f12\fs18 Default Action\tab }The newRect field is verified to make sure that the top coordinate is less than the bottom coordinate, the left coordinate is less than the right coordinate, and the item is at least the minimum size. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\up6\lang1033 {\*\bkmkstart idx_cancelmode}{\*\bkmkend idx_cancelmode}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_cancelmode}} {\plain 
\caps\f3\fs16\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} CancelMode}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP229:0020}} {\plain \caps\f3\fs16\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} CancelMode}} {\plain \caps\f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_window_item_protocol_methods')')}}
 CancelMode
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void CancelMode(pLWI)
\par \tab {\b\f12\fs18 Description\tab }This method informs an LWI that it is to cancel any internal mode, such as capturing the mouse or waiting for a KeyUp method to be called. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pLWI\tab OpLiteWndItemD*   \tab \line The address of an LWI. This parameter is not passed in C++.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None.
\par \tab {\b\f12\fs18 Comments\tab }This method is called when a dialog box opens that might cause an item to lose the mouse capture or not receive a KeyUp that it is waiting for.
\par \tab {\b\f12\fs18 Default Action\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\up6\lang1033 {\*\bkmkstart idx_copy}{\*\bkmkend idx_copy}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_copy}} {\plain \caps\f3\fs16\up6\lang1033 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Copy}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP229:0025}} {\plain \caps\f3\fs16\up6\lang1033 K{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 K} Copy}} {\plain \caps\f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_window_item_protocol_methods')')}} Copy
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void Copy(pWI)
\par \tab {\b\f12\fs18 Description\tab }When this method is called, the item copies itself to the operating system's clipboard.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab    \tab The address of a window item. This parameter is not passed in C++. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None.
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \tab {\b\f12\fs18 Default Action\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\up6\lang1033 {\*\bkmkstart idx_createfunction}{\*\bkmkend idx_createfunction}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_createfunction}} {\plain 
\caps\f3\fs16\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} CreateFunction}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP229:0030}} {\plain \caps\f3\fs16\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} CreateFunction}} {\plain \caps\f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_window_item_protocol_methods')')}}
 CreateFunction
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }OpWndItemD* CreateFunction(oiItem, oiParent, rcItem, status, miExtraData)
\par \tab {\b\f12\fs18 Description\tab }This function allocates and initializes the memory required for the visual instance information. It is called:
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }Once per visual instance when the Window object receives a STARTUP event. 
\par {\cf5 \{bmc rr.bmp\}\tab }At design time when an item is added to the layout.
\par {\cf5 \{bmc rr.bmp\}\tab }For existing items when the window layout is open.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 oiItem\tab OBJECTID\tab The item's object ID.
\par oiParent \tab OBJBECTID\tab The parent Window's object ID.
\par rcItem\tab LPRECT    \tab The item's rectangle.
\par status\tab long   \tab In C, this parameter is passed to the init function. In C++, it is passed to the constructor.
\par miExtraData
\par \tab MEMBLOCKID\tab Any extra visual-instance data associated with the item can be store
d in this memory block. The memory block is freed after this function has been called. The parameter's value is 0 if the item does not have any extra visual-instance data. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value is a pointer to a window item.
\par \tab {\b\f12\fs18 Comments\tab }
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }
Although this function is not a method, it has been included with the methods because it returns the pointer that creates a pathway for methods to be called. 
\par {\cf5 \{bmc rr.bmp\}\tab }This function will not be called until the parent window has been opened.
\par {\cf5 \{b}{\cf5 mc rr.bmp\}\tab }This function is the prototype for the function pointer that an item has to provide when it is queried to see if it supports the window item protocol. 
\par {\cf5 \{bmc rr.bmp\}\tab }You should not create window handles or a GDI resource in response to this function; instead, you should create them when the item's ParentOpened method is called. 
\par {\cf5 \{bmc rr.bmp\}\tab }The Window object saves the information in the miExtraData memory block on behalf of the window item during the last time the window item is created and sav
ed. The Window object gets this data from a window item by calling the window item's GetExtraData method. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Default Action\tab }
There is no default action. An item has to provide a create function. If it does not, it cannot be a window item.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\up6\lang1033 {\*\bkmkstart idx_cut}{\*\bkmkend idx_cut}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_cut}} {\plain \caps\f3\fs16\up6\lang1033 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Cut}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP229:0035}} {\plain \caps\f3\fs16\up6\lang1033 K{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 K} Cut}} {\plain \caps\f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_window_item_protocol_methods')')}} Cut
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void Cut(pWI)
\par \tab {\b\f12\fs18 Description\tab }This methods cuts an item and places it on the operating system's clipboard.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab    \tab The address of a window item. This parameter is not passed in C++. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None.
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \tab {\b\f12\fs18 Default Action\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\up6\lang1033 {\*\bkmkstart idx_datachanged}{\*\bkmkend idx_datachanged}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_datachanged}} {\plain 
\caps\f3\fs16\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} DataChanged}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP229:0040}} {\plain \caps\f3\fs16\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} DataChanged}} {\plain \caps\f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_window_item_protocol_methods')')}}
 DataChanged
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void DataChanged(pWI, details, modifiers, variation)
\par \tab {\b\f12\fs18 Description\tab }When the Window object receives an object-changed event, it calls this method for every window item of the object that changed. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab    \tab The address of a window item. This parameter is not passed in C++. 
\par details \tab long   \tab The value of the event record's details field when the objectChanged event was posted.
\par modifiers \tab long   \tab The value of the event record's modifiers field when the objectChanged event was posted.
\par variation \tab long   \tab The value of the event record's variation field when the objectChanged event was posted.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None.
\par \tab {\b\f12\fs18 Comments\tab }An item should make any necessary changes in the visual instance information and then invalidate itself, if necessary, to force a redraw.
\par \tab {\b\f12\fs18 Default Action\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\up6\lang1033 {\*\bkmkstart idx_deactivated}{\*\bkmkend idx_deactivated}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_deactivated}} {\plain 
\caps\f3\fs16\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Deactivated}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP229:0045}} {\plain \caps\f3\fs16\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Deactivated}} {\plain \caps\f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_window_item_protocol_methods')')}}
 Deactivated
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void Deactivated(pWI)
\par \tab {\b\f12\fs18 Description\tab }This method is called when an item has been deactivated.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab    \tab The address of a window item. This parameter is not passed in C++. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None.
\par \tab {\b\f12\fs18 Comments\tab }When this method is called, the item has lost the input focus. 
\par \tab {\b\f12\fs18 Default Action\tab }
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }For HWIs, there is no default action. Setting the focus to something else automatically causes an item to be redrawn. 

\par {\cf5 \{bmc rr.bmp\}\tab }For LWIs, this method invalidates the item's rectangle so that the object will be redrawn.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\up6\lang1033 {\*\bkmkstart idx_destroy}{\*\bkmkend idx_destroy}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_destroy}} {\plain 
\caps\f3\fs16\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Destroy}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP229:0050}} {\plain \caps\f3\fs16\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Destroy}} {\plain \caps\f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_window_item_protocol_methods')')}} Destroy
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void Destroy(pWI)
\par \tab {\b\f12\fs18 Description\tab }This method is called when the window item should be destroyed (freed).\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab    \tab The address of a window item. This parameter is not passed in C++. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None.
\par \tab {\b\f12\fs18 Comments\tab }
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }
When CreateFunction is called, the Destroy method has to be called later on. If ParentOpened is called, ParentClosing has to be called before the Destroy method is called.
\par {\cf5 \{bmc rr.bmp\}\tab }If the Window object receives its shutdown event during run 
time, the ParentClosing function for the visual instance is called before this method is called. When this method is called, the item should be designed to free any memory it allocated to store its visual instance information. \tab 
\par {\cf5 \{bmc rr.bmp\}\tab }This method is also called if a window closes during layout time. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Default Action\tab }
All window items have to provide their own implementation for this function. If they do not, a message box is displayed with the warning "[Object type] not freeing its memory!" 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\up6\lang1033 {\*\bkmkstart idx_doubleclicked}{\*\bkmkend idx_doubleclicked}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_doubleclicked}} {\plain 
\caps\f3\fs16\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} DoubleClicked}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP229:0055}} {\plain \caps\f3\fs16\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} DoubleClicked}} {\plain \caps\f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_window_item_protocol_methods')')}}
 DoubleClicked
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void DoubleClicked(pLWI, where, keysDown, button)
\par \tab {\b\f12\fs18 Description\tab }When a mouse button is double-clicked over an LWI, this method gives the window item information about which button was double-clicked and which keys were down.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pLWI\tab OpLiteWndItemD*   \tab \line The address of a window item. This parameter is not passed in C++. 
\par where\tab POINT*   \tab The location of the mouse, expressed in logical coordinates.
\par keysDown\tab int   \tab These are the keys that were already down when the mouse button was double-clicked. It can be a combination of MK_CONTROL, MK_LBUTTON, MK_MBUTTON, MK_RBUTTON, and MK_SHIFT.
\par button\tab int   \tab This is the button that was double-clicked. It can be MK_LBUTTON, MK_MBUTTON, or MK_RBUTTON.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None.
\par \tab {\b\f12\fs18 Comments\tab }This method is called whenever a mouse button is double-clicked over an LWI. If the LWI has set the capture, it is called whenever a mouse button is double-clicked.
\par \tab {\b\f12\fs18 Default Action\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\up6\lang1033 {\*\bkmkstart idx_draw}{\*\bkmkend idx_draw}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_draw}} {\plain \caps\f3\fs16\up6\lang1033 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Draw}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP229:0060}} {\plain \caps\f3\fs16\up6\lang1033 K{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 K} Draw}} {\plain \caps\f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_window_item_protocol_methods')')}} Draw
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void Draw(pLWI, hdc, invalidRect)
\par \tab {\b\f12\fs18 Description\tab }This method is called when an LWI is to be drawn.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pLWI\tab OpLiteWndItemD*   \line The address of an LWI. This parameter is not passed in C++. 
\par hdc\tab HDC   \tab This is the device context to draw into. The item has to restore any changes made to the device context.
\par invalidRect
\par \tab RECT*   \tab This is the invalid rectangle for the window. An item need only redraw the intersection of this rectangle and its rectangle. Clipping is not set to the item's rectangle. If an item sets the clip area, it {\i has to }
restore the previous clip area.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None.
\par \tab {\b\f12\fs18 Comments\tab }None. 
\par \tab {\b\f12\fs18 Default Action\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\up6\lang1033 {\*\bkmkstart idx_drawgrabhandles}{\*\bkmkend idx_drawgrabhandles}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_drawgrabhandles}} 
{\plain \caps\f3\fs16\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} DrawGrabHandles}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP229:0065}} {\plain 
\caps\f3\fs16\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} DrawGrabHandles}} {\plain \caps\f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_window_item_protocol_methods')')}} DrawGrabHandles
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void DrawGrabHandles(pWI, hdc)
\par \tab {\b\f12\fs18 Description\tab }This method draws an item's grab handles.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab    \tab The address of a window item. This parameter is not passed in C++. 
\par hdc\tab HDC   \tab The device context to draw in.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None.
\par \tab {\b\f12\fs18 Comments\tab }When an item is selected in the window layout, grab handles and a fra
me have to be drawn around the item. If you design a nonrectangular outline shape, you might want to replace this method with one that draws grab handles for the shape you designed. If an item does any drawing, it {\i must not }
change the drawing mode or invalidate anything. The item should not change the pen or colors. If it does, it {\i has to }restore the previous state of the device context.
\par \tab {\b\f12\fs18 Default Action\tab }The following figure illustrates the grab handles and frame that are drawn by default around selected windows items.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\up6\lang1033 {\*\bkmkstart idx_drawtrackingrect}{\*\bkmkend idx_drawtrackingrect}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_drawtrackingrect}} 
{\plain \caps\f3\fs16\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} DrawTrackingRect}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP229:0070}} {\plain 
\caps\f3\fs16\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} DrawTrackingRect}} {\plain \caps\f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_window_item_protocol_methods')')}} DrawTrackingRect
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void DrawTrackingRect(pWI, hdc, rect)
\par \tab {\b\f12\fs18 Description\tab }This method draws the tracking frame for an item.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*   \tab The address of a window item. This parameter is not passed in C++. 
\par hdc\tab HDC   \tab The device context to draw in.
\par rect\tab RECT*   \tab The rectangle to use when the tracking frame is being drawn. The units are in logical coordinates.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None.
\par \tab {\b\f12\fs18 Comments\tab }When an item is being moved in the window at layout ti
me, a tracking frame has to be drawn. If you design a nonrectangular item, you might want to replace this method with one that draws a tracking frame for the shape you designed. If an item does do any drawing, it {\i must not }
change the drawing mode or invalidate anything. The item should not change the pen or colors. If it does, it has to restore the previous state of the device context.
\par \tab {\b\f12\fs18 Default Action\tab }The rectangle is framed.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\up6\lang1033 {\*\bkmkstart idx_edit}{\*\bkmkend idx_edit}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_edit}} {\plain \caps\f3\fs16\up6\lang1033 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Edit}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP229:0075}} {\plain \caps\f3\fs16\up6\lang1033 K{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 K} Edit}} {\plain \caps\f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_window_item_protocol_methods')')}} Edit
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void Edit(pWI, bEditExtra)
\par \tab {\b\f12\fs18 Description\tab }This method allows you to edit an item or an object.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab    \tab The address of a window item. This parameter is not passed in C++. 
\par bEditExtra\tab BOOL\tab This parameter is TRUE if the item should edit its extra visual instance data.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None.
\par \tab {\b\f12\fs18 Comments\tab }
This method is called when an item is double-clicked in the window layout. If the control key is held down when the item is double-clicked, this method edits any extra window-item information. If the item does not have any ex
tra window-item information that can be edited, have it edit the object.
\par \tab {\b\f12\fs18 Default Action\tab }{\uldb\cf11 AObjEdit}{\v idx_aobjedit}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobjedit
}}{\fldrslt }}{\cf1  }is called with the item's object ID.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\up6\lang1033 {\*\bkmkstart idx_enable}{\*\bkmkend idx_enable}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_enable}} {\plain 
\caps\f3\fs16\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Enable}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP229:0080}} {\plain \caps\f3\fs16\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Enable}} {\plain \caps\f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_window_item_protocol_methods')')}} Enable
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void Enable(pWI, bEnable)
\par \tab {\b\f12\fs18 Description\tab }This method enables items.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab    \tab The address of a window item. This parameter is not passed in C++. 
\par bEnable\tab BOOL \tab This parameter is TRUE if the item should be enabled and FALSE if it should be disabled.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None.
\par \tab {\b\f12\fs18 Comments\tab }
This method notifies a visual instance that it has been changed. The method is called when a window item is enabled or disabled. Items can be enabled or disabled through the use of the Window object's Enable Item and Disable Item functions. 
\par \tab {\b\f12\fs18 Default Action\tab }
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }For HWIs, EnableWindow(m_hwndItem, bEnable) is called.
\par {\cf5 \{bmc rr.bmp\}\tab }For LWIs, the item's rectangle is invalidated. (The invalidation causes a redraw.)
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\up6\lang1033 {\*\bkmkstart idx_exportextradata}{\*\bkmkend idx_exportextradata}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_exportextradata}} 
{\plain \caps\f3\fs16\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ExportExtraData}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP229:0085}} {\plain 
\caps\f3\fs16\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ExportExtraData}} {\plain \caps\f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_window_item_protocol_methods')')}} ExportExtraData
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void ExportExtraData(pWI)
\par \tab {\b\f12\fs18 Description\tab }This method notifies a window item that its extra data should be exported to a UPSF file.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*   \tab The address of a window item. This parameter is not passed in C++. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None.
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \tab {\b\f12\fs18 Default Action\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\up6\lang1033 {\*\bkmkstart idx_getextradata}{\*\bkmkend idx_getextradata}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_getextradata}} {\plain 
\caps\f3\fs16\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} GetExtraData}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP229:0090}} {\plain \caps\f3\fs16\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} GetExtraData}} {\plain \caps\f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_window_item_protocol_methods')')}}
 GetExtraData
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }MEMBLOCKID GetExtraData(pWI)
\par \tab {\b\f12\fs18 Description\tab }This method is called when the Window object is saving layout information so that it can retrieve specific window-item data. The data might be used later by the same window item.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab \tab The address of a window item. This parameter is not passed in C++.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }
The return value is the MEMBLOCKID. It can be used to save extra window-item data. The MEMBLOCKID is freed by the caller.
\par \tab {\b\f12\fs18 Comments\tab }The retrieved data is given back to the item when CreateFunction is called to create the window item.
\par \tab {\b\f12\fs18 Default Action\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\up6\lang1033 {\*\bkmkstart idx_getselection}{\*\bkmkend idx_getselection}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_getselection}} {\plain 
\caps\f3\fs16\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} GetSelection}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP229:0095}} {\plain \caps\f3\fs16\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} GetSelection}} {\plain \caps\f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_window_item_protocol_methods')')}}
 GetSelection
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }BOOL GetSelection(pWI, pStart, pCount)
\par \tab {\b\f12\fs18 Description\tab }This method gets the start and the count of a specific item.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab    \tab The address of a window item. This parameter is not passed in C++. 
\par pStart\tab long*   \tab An item should fill in the starting point of the current selection. This parameter is a one-based index. It should count <CR> <LF> combinations as a single character.
\par pCount \tab long*   \tab An item should fill in the number of selected characters. It should count <CR> <LF> combinations as a single character.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value is TRUE if the item supports selection and FALSE if it does not.
\par \tab {\b\f12\fs18 Comments\tab }
When the Window object's Get Selection function is called, this method is called to get the item's start and count. If the return value is TRUE, the function follows the "After getting" flow. If the return value is FALSE, the function follows the "Selecti
on not supported" flow.
\par \tab {\b\f12\fs18 Default Action\tab }The method returns FALSE.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\up6\lang1033 {\*\bkmkstart idx_hide}{\*\bkmkend idx_hide}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_hide}} {\plain \caps\f3\fs16\up6\lang1033 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Hide}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP229:0100}} {\plain \caps\f3\fs16\up6\lang1033 K{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 K} Hide}} {\plain \caps\f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_window_item_protocol_methods')')}} Hide
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void Hide(pWI)
\par \tab {\b\f12\fs18 Description\tab }This method hides items. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab \tab The address of a window item. This parameter is not passed in C++. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None.
\par \tab {\b\f12\fs18 Comments\tab }This method is called when the Window object's function Hide Item is called. 
\par \tab {\b\f12\fs18 Default Action\tab }
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }For HWIs, the item's window handle and SW_HIDE are used to call ShowWindow.
\par {\cf5 \{bmc rr.bmp\}\tab }For LWIs, the item is invalidated. (Invalidated items are redrawn.)
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\up6\lang1033 {\*\bkmkstart idx_importextradata}{\*\bkmkend idx_importextradata}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_importextradata}} 
{\plain \caps\f3\fs16\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ImportExtraData}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP229:0105}} {\plain 
\caps\f3\fs16\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ImportExtraData}} {\plain \caps\f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_window_item_protocol_methods')')}} ImportExtraData
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void ImportExtraData(pWI)
\par \tab {\b\f12\fs18 Descript}{\b\f12\fs18 ion\tab }This method notifies a window item that its extra data should be imported to a UPSF file.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab   \tab The address of a window item. This parameter is not passed in C++. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None.
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \tab {\b\f12\fs18 Default Action\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\up6\lang1033 {\*\bkmkstart idx_invalidategrabha}{\*\bkmkend idx_invalidategrabha}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_invalidategrabhandles}
} {\plain \caps\f3\fs16\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} InvalidateGrabHandles}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP229:0110}} {\plain 
\caps\f3\fs16\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} InvalidateGrabHandles}} {\plain \caps\f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`
btn_up', `JI(`', `idx_n1_window_item_protocol_methods')')}} InvalidateGrabHandles
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void InvalidateGrabHandles(pWI)
\par \tab {\b\f12\fs18 Description\tab }This method invalidates grab handles.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab    \tab The address of a window item. This parameter is not passed in C++.
\par bErase\tab BOOL\tab This parameter specifies whether the background should be erased when the grab handles are invalidated. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None.
\par \tab {\b\f12\fs18 Comments\tab }
If an item replaces the method that draws grab handles, it has to provide a method to invalidate the grab handles it drew. This method is called when the item is no longer selected. If you change this method and you want to avoid the unnecessary flashing 
that sometimes occurs when a large area is redrawn, you should design this method so that it invalidates the smallest amount of space possible. 
\par \tab {\b\f12\fs18 Default Action\tab }The standard grab handles are invalidated.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\up6\lang1033 {\*\bkmkstart idx_invalidateitem}{\*\bkmkend idx_invalidateitem}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_invalidateitem}} {\plain 
\caps\f3\fs16\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} InvalidateItem}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP229:0115}} {\plain \caps\f3\fs16\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} InvalidateItem}} {\plain \caps\f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_window_item_protocol_methods')')}}
 InvalidateItem
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void InvalidateItem(pWI, bErase)
\par \tab {\b\f12\fs18 Description\tab }This method invalidates items.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab    \tab The address of a window item. This parameter is not passed in C++.
\par bErase\tab BOOL\tab This parameter specifies whether the background should be erased when the item is invalidated. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None.
\par \tab {\b\f12\fs18 Comments\tab }This method is called when an item is to be invalidated.
\par \tab {\b\f12\fs18 Default Action\tab }
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }For HWIs, the method invalidates the item's rectangle.
\par {\cf5 \{bmc rr.bmp\}\tab }For LWIs, the method invalidates the item's rectangle.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\up6\lang1033 {\*\bkmkstart idx_iteminrect}{\*\bkmkend idx_iteminrect}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_iteminrect}} {\plain 
\caps\f3\fs16\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ItemInRect}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP229:0120}} {\plain \caps\f3\fs16\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ItemInRect}} {\plain \caps\f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_window_item_protocol_methods')')}}
 ItemInRect
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }BOOL ItemInRect(pWI, rect, bFullInclosure)
\par \tab {\b\f12\fs18 Description\tab }This method is called when it is necessary to determine whether an item is located inside a rectangle.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab    \tab The address of a window item. This parameter is not passed in C++. 
\par rect\tab RECT*   \tab The rectangle.
\par bFullInclosure\tab 
\par \tab BOOL   \tab The parameter is TRUE if the item has to be fully enclosed by the rectangle.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value is TRUE if the item is in the rectangle and FALSE otherwise.
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \tab {\b\f12\fs18 Default Action\tab }
The method determines whether the rectangle and the item's rectangle intersect. If you designed a nonrectangular item, you might want to replace this method with one that uses the same shape as your item instead of using the default rectangle. Otherwise, 
an item might be inside the default rectangle but outside the item's boundaries. 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
For an example of how this particular placement of an item might cause a problem, suppose you had a circular item that was inside the default rectangle. If an item was outside the circle but inside the rectangle, this method might incorrectly tell you tha
t the item being tested was inside the rectangle {\i and }the circle.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\up6\lang1033 {\*\bkmkstart idx_iteminregion}{\*\bkmkend idx_iteminregion}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_iteminregion}} {\plain 
\caps\f3\fs16\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ItemInRegion}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP229:0125}} {\plain \caps\f3\fs16\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ItemInRegion}} {\plain \caps\f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_window_item_protocol_methods')')}}
 ItemInRegion
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }BOOL ItemInRegion(pWI, hRegion, bDeviceUnits)
\par \tab {\b\f12\fs18 Description\tab }This method is called when it is necessary to determine whether an item is located inside a region.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab    \tab The address of a window item. This parameter is not passed in C++. 
\par hRegion\tab HRGN   \tab The rectangle.
\par bDeviceUnits
\par \tab BOOL   \tab This parameter is TRUE if the region is measured in device units and FALSE if it is measured in logical units. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value is TRUE if the item is in the region and FALSE otherwise.
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \tab {\b\f12\fs18 Default Action\tab }This method determines whether an item's rectangle is in a specific region.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\up6\lang1033 {\*\bkmkstart idx_keydown}{\*\bkmkend idx_keydown}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_keydown}} {\plain 
\caps\f3\fs16\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} KeyDown}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP229:0130}} {\plain \caps\f3\fs16\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} KeyDown}} {\plain \caps\f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_window_item_protocol_methods')')}} KeyDown
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void KeyDown(pWI, vKey, ascii, keyData)
\par \tab {\b\f12\fs18 Description\tab }This method is called for the active LWI when a key is pressed. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpLite WndItemD*  \line The address of a window item. This parameter is not passed in C++. 
\par vKey\tab int   \tab The virtual key code of the given key.
\par ascii\tab char   \tab The key's ASCII value, if any.
\par keyData\tab long   \tab The repeat count, scan code, extended key, context code, previous key state, and key-transition state. (For more information on the keyData field, refer to WM_KEYUP in the Microsoft Windows documentation.)
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None.
\par \tab {\b\f12\fs18 Comments\tab }None. 
\par \tab {\b\f12\fs18 Default Action\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\up6\lang1033 {\*\bkmkstart idx_keyup}{\*\bkmkend idx_keyup}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_keyup}} {\plain \caps\f3\fs16\up6\lang1033 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} KeyUp}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP229:0135}} {\plain \caps\f3\fs16\up6\lang1033 K{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 K} KeyUp}} {\plain \caps\f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_window_item_protocol_methods')')}} KeyUp
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void KeyUp(pLWI, vKey, ascii, keyData)
\par \tab {\b\f12\fs18 Description\tab }This method is called for the active LWI when a key is released.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pLWI\tab OpLiteWndItemD*   \tab \line The address of an LWI. This parameter is not passed in C++. 
\par vKey\tab int   \tab The virtual key code of the given key.
\par ascii\tab char   \tab The key's ASCII value, if any.
\par keyData\tab long   \tab The repeat count, scan code, extended key, context code, previous key state, and key-transition state. (For more information on the keyData field, refer to WM_KEYUP in the Microsoft Windows documentation.)
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None.
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \tab {\b\f12\fs18 Default Action\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\up6\lang1033 {\*\bkmkstart idx_mousedown}{\*\bkmkend idx_mousedown}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_mousedown}} {\plain 
\caps\f3\fs16\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} MouseDown}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP229:0140}} {\plain \caps\f3\fs16\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} MouseDown}} {\plain \caps\f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_window_item_protocol_methods')')}} MouseDown
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void MouseDown(pLWI, where, keysDown, button)
\par \tab {\b\f12\fs18 Description\tab }This method is called whenever a user presses a mouse button over an LWI. If the item has set the capture, the function is called whenever a mouse button is pressed. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pLWI\tab OpLiteWndItemD*   \tab \line The address of an LWI. This parameter is not passed in C++. 
\par where\tab POINT*   \tab The location of the mouse, expressed in logical coordinates.
\par keysDown\tab int   \tab These are the keys that were already down when the mouse button was pressed. It can be a combination of MK_CONTROL, MK_LBUTTON, MK_MBUTTON, MK_RBUTTON, and  MK_SHIFT.
\par button\tab int   \tab The button that was pressed. It can be MK_LBUTTON, MK_MBUTTON, or MK_RBUTTON.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None.
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \tab {\b\f12\fs18 Default Action\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\up6\lang1033 {\*\bkmkstart idx_mousemove}{\*\bkmkend idx_mousemove}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_mousemove}} {\plain 
\caps\f3\fs16\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} MouseMove}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP229:0145}} {\plain \caps\f3\fs16\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} MouseMove}} {\plain \caps\f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_window_item_protocol_methods')')}} MouseMove
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void MouseMove(pLWI, where, keysDown)
\par \tab {\b\f12\fs18 Description\tab }This method is called whenever a uses moves the mouse over an LWI. If the item has set the capture, it is called whenever the mouse moves. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pLWI\tab OpLiteWndItemD*   \line The address of an LWI. This parameter is not passed in C++. 
\par where\tab POINT*   \tab The location of the mouse, expressed in logical coordinates.
\par keysDown\tab int   \tab A combination of MK_CONTROL, MK_LBUTTON, MK_MBUTTON, MK_RBUTTON, and MK_SHIFT
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None.
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \tab {\b\f12\fs18 Default Action\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\up6\lang1033 {\*\bkmkstart idx_mouseup}{\*\bkmkend idx_mouseup}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_mouseup}} {\plain 
\caps\f3\fs16\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} MouseUp}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP229:0150}} {\plain \caps\f3\fs16\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} MouseUp}} {\plain \caps\f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_window_item_protocol_methods')')}} MouseUp
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void MouseUp(pLWI, where, keysDown, button)
\par \tab {\b\f12\fs18 Description\tab }This method is called when the mouse is released over an LWI or when an LWI has the mouse capture set.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pLWI\tab OpLiteWndItemD*\tab \line The address of an LWI. This parameter is not passed in C++. 
\par where\tab POINT*\tab The location of the mouse, expressed in logical coordinates.
\par keysDown\tab int\tab These are the keys that were still down when the mouse button was released. It can be a combination of MK_CONTROL, MK_LBUTTON, MK_MBUTTON, MK_RBUTTON, and MK_SHIFT.
\par button\tab int\tab This is the button that was released. It can be MK_LBUTTON, MK_MBUTTON, or MK_RBUTTON.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None.
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \tab {\b\f12\fs18 Default Action\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\up6\lang1033 {\*\bkmkstart idx_move}{\*\bkmkend idx_move}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_move}} {\plain \caps\f3\fs16\up6\lang1033 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Move}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP229:0155}} {\plain \caps\f3\fs16\up6\lang1033 K{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 K} Move}} {\plain \caps\f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_window_item_protocol_methods')')}} Move
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void Move(pWI, newRect)
\par \tab {\b\f12\fs18 Description\tab }This method is called when an item's location or size is being changed. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab    \tab The address of a window item. This parameter is not passed in C++. 
\par newRect\tab RECT*   \tab The item's new, requested rectangle.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None.
\par \tab {\b\f12\fs18 Comments\tab }The item's old rectangle should be invalidated, the item rectangle should be changed to newRect, and newRect should be invalidated.
\par \tab {\b\f12\fs18 Default Action\tab }
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }For HWIs, the item's rectangle is updated and MoveWindow is called with the item's window handle.
\par {\cf5 \{bmc rr.bmp\}\tab }For LWIs, the item's old and new rectangles are invalidated and the item's rectangle is updated.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\up6\lang1033 {\*\bkmkstart idx_parentclosing}{\*\bkmkend idx_parentclosing}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_parentclosing}} {\plain 
\caps\f3\fs16\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ParentClosing}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP229:0160}} {\plain \caps\f3\fs16\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ParentClosing}} {\plain \caps\f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_window_item_protocol_methods')')}}
 ParentClosing
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void ParentClosing(pWI)
\par \tab {\b\f12\fs18 Description\tab }This method is called when the parent Window object is about to be closed (destroyed). \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab    \tab The address of a window item. This parameter is not passed in C++.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None.
\par \tab {\b\f12\fs18 Comments\tab }If an item created any window handles, or if it created any GDI objects, they should be destroyed at this time. The parent window handle in the item is set to zero after this method is called.
\par \tab {\b\f12\fs18 Default Action\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\up6\lang1033 {\*\bkmkstart idx_parentnotificati}{\*\bkmkend idx_parentnotificati}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_parentnotification}} 
{\plain \caps\f3\fs16\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ParentNotification}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP229:0165}} {\plain 
\caps\f3\fs16\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ParentNotification}} {\plain \caps\f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_window_item_protocol_methods')')}} ParentNotification
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }LPARAM ParentNotification(pWI, hwnd, message, wParam, lParam)
\par \tab {\b\f12\fs18 Description\tab }The parent Window object uses this function to pass messages to its window items.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpHwndWndItemD* \line The address of a window item. This parameter is not passed in C++. 
\par hwnd\tab HWND   \tab The parent Window object's window handle.
\par message\tab UINT   \tab The Microsoft Windows message that is being passed up to the item.
\par wParam\tab WPARAM   \tab The WPARAM that is being passed up to the item.
\par lParam\tab LPARAM   \tab The LPARAM that is being passed up to the item.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value depends on the message being passed up to the item.
\par \tab {\b\f12\fs18 Comments\tab }
When standard window controls are placed in a window, some messages concerning the control are sent to the parent window. Because the Window object does not know anything about the item's data, or even what the item is, it must pass these messages on to t
he item. The me
ssages it currently passes up to the item are WM_COMMAND, WM_HSCROLL, WM_VSCROLL , WM_CTLCOLOR, WM_DRAWITEM, WM_MEASUREITEM, WM_COMPAREITEM, WM_VKEYTOITEM, and WM_CHARTOITEM. For information about the messages, refer to the SDK documentation for Microsoft
 Windows.
\par \tab {\b\f12\fs18 Default Action\tab }The method returns DefWindowProc.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\up6\lang1033 {\*\bkmkstart idx_parentopened}{\*\bkmkend idx_parentopened}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_parentopened}} {\plain 
\caps\f3\fs16\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ParentOpened}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP229:0170}} {\plain \caps\f3\fs16\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ParentOpened}} {\plain \caps\f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_window_item_protocol_methods')')}}
 ParentOpened
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void ParentOpened(pWI)
\par \tab {\b\f12\fs18 Description\tab }This method is called when the parent window is opened (created). \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab    \tab The address of a window item. This parameter is not passed in C++. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None.
\par \tab {\b\f12\fs18 Comments\tab }
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }
If an item creates any window handles or any GDI objects, it should create them when this method is called. The m_hwndParent item's field is initialized with the parent window handle before this method is called. 
\par {\cf5 \{bmc rr.bmp\}\tab }If an item creates a window, it has to get the control ID to use in its call to CreateWindow. (It gets the ID by calling the API function OWndGetItemControlID.) To avoid rema
pping the coordinate system, the item can also call OWndCreateWindowEx.
\par {\cf5 \{bmc rr.bmp\}\tab }Once created, the newly created window should not be displayed until the Show method is called.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\b\f12\fs18 \tab Default Action}\tab None.
\par 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\up6\lang1033 {\*\bkmkstart idx_paste}{\*\bkmkend idx_paste}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_paste}} {\plain \caps\f3\fs16\up6\lang1033 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Paste}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP229:0175}} {\plain \caps\f3\fs16\up6\lang1033 K{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 K} Paste}} {\plain \caps\f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_window_item_protocol_methods')')}} Paste
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void Paste(pWI)
\par \tab {\b\f12\fs18 Description\tab }When this method is called, it pastes the item into the operating system's clipboard.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab    \tab The address of a window item. This parameter is not passed in C++. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None.
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \tab {\b\f12\fs18 D}{\b\f12\fs18 efault Action\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\up6\lang1033 {\*\bkmkstart idx_pointingrabhandl}{\*\bkmkend idx_pointingrabhandl}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_pointingrabhandle}} 
{\plain \caps\f3\fs16\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} PointInGrabHandle}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP229:0180}} {\plain 
\caps\f3\fs16\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} PointInGrabHandle}} {\plain \caps\f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_window_item_protocol_methods')')}} PointInGrabHandle
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }long PointInGrabHandle(pWI, pt, phCursor)
\par \tab {\b\f12\fs18 Description\tab }This method is called when there is a need to determine which grab handle, if any, the mouse is in. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab    \tab The address of a window item. This parameter is not passed in C++. 
\par pt\tab POINT*   \tab The point, expressed in logical coordinates.
\par phCursor\tab HCURSOR*
\par \tab    \tab The pointer to the mouse cursor's handle, which is to be used if the point is over the grab
 handle. If this value is left NULL, the Window object chooses which mouse cursor to use. The cursor used here has to be loaded from a resource such as LoadCursor.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value is the one of the following:\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab \tab Meaning
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 OWND_POINT_IN_NONE\tab The point is not in a grab handle.
\par OWND_POINT_IN_TL\tab The point is in the top-left grab handle.
\par OWND_POINT_IN_TR\tab The point is in the top-right grab handle.
\par OWND_POINT_IN_BL\tab The point is in the bottom-left grab handle.
\par OWND_POINT_IN_BR\tab The point is in the bottom-right grab handle.
\par OWND_POINT_IN_T\tab The point is in the top-middle grab handle.
\par OWND_POINT_IN_L\tab The point is in the left-middle grab handle.
\par OWND_POINT_IN_B\tab The point is in the bottom-middle grab handle.
\par OWND_POINT_IN_R\tab The point is in the right-middle handle.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Comments\tab }
If the item replaces the method that draws the grab handles, it is impossible to determine whether the mouse is in a grab handle. Therefore, the item should provide a method to determine which grab handle the mouse is in, if any.
\par \tab {\b\f12\fs18 Default Action\tab }The method determines whether the point is in any of the standard grab handles that are drawn.
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\up6\lang1033 {\*\bkmkstart idx_pointinitem}{\*\bkmkend idx_pointinitem}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_pointinitem}} {\plain 
\caps\f3\fs16\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} PointInItem}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP229:0185}} {\plain \caps\f3\fs16\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} PointInItem}} {\plain \caps\f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_window_item_protocol_methods')')}}
 PointInItem
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }BOOL PointInItem(pWI, point)
\par \tab {\b\f12\fs18 Description\tab }This method is called whenever there is a need to determine whether a point is in an item. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab    \tab The address of a window item. This parameter is not passed in C++. 
\par point\tab POINT*   \tab The point, expressed in logical coordinates.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value is TRUE if the point is in the item and FALSE otherwise.
\par \tab {\b\f12\fs18 Comments\tab }
If an item is nonrectangular, you might want to replace this method with one that uses the same shape as your item instead of using the default rectangle. Otherwise, an item might be inside the default rectangle but outside the item's boundaries. 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
For an example of how this particular placement of an item might cause a problem, suppose you had a circular item that was inside the default rectangle. If an item was outside the circle but inside the r
ectangle, this method might incorrectly tell you that the item was inside the rectangle {\i and }the circle. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Default Action\tab }The method determines whether the point is in the item's rectangle. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_print}{\*\bkmkend idx_print}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_print}} {\plain 
\caps\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Print}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP229:0190}} {\plain \caps\f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Print}} {\plain \caps\f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_window_item_protocol_methods')')}} Print

\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void Print(pWI, hdc, printRect, pclPrinter)
\par \tab {\b\f12\fs18 Description\tab }When a user prints a window, the Window object calls this method for all of its items. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab    \tab The address of a window item. This parameter is not passed in C++. 
\par hdc\tab HDC   \tab This is the device context to draw into.
\par printRect\tab RECT*   \tab This is the rectangle to print in. The rectangle is different from the one used for the screen display.
\par pclPrinter\tab int\tab Possible values are as follows:\line 0 = not pcl\line 1 = pcl\line 2 = white rule\line For more information, refer to the operating system's documentation on QUERYESCSUPPORT.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None.
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \tab {\b\f12\fs18 Default Action\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_removeitemfromre}{\*\bkmkend idx_removeitemfromre}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_removeitemfromregion}} {\plain \caps\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} RemoveItemFromRegion}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +}
 SUPP229:0195}} {\plain \caps\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} RemoveItemFromRegion}} {\plain \caps\f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_window_item_protocol_methods')')}} RemoveItemFromRegion
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void RemoveItemFromRegion(pWI, hRegion, bDeviceUnits)
\par \tab {\b\f12\fs18 Description\tab }This method is called whenever there is a need to remove an item from a region. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab    \tab The address of a window item. This parameter is not passed in C++. 
\par hRegion\tab HRGN   \tab The region's handle.
\par bDeviceUnits
\par \tab BOOL\tab TRUE if the region is measured in device units and FALSE if it is measured in logical units.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None.
\par \tab {\b\f12\fs18 Comments\tab }None.
\par \tab {\b\f12\fs18 Default Action\tab }The method removes the item's rectangle from the region. If you designed a nonrectangular item, you might want to replace t
his method with one that uses the same shape as your item instead of using the default rectangle. Otherwise, an item might be inside the default rectangle but outside the item's boundaries. 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
For an example of how this particular placement of an item might cause a problem, suppose you had a circular item that was inside the default rectangle. If an item was outside the circle but inside the rectangle, this method might incorrectly tell you tha
t the item being removed was inside the rectangle {\i and }the circle.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_screenlocationch}{\*\bkmkend idx_screenlocationch}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_screenlocationchanged}} {\plain \caps\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ScreenLocationChanged}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP229
:0200}} {\plain \caps\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ScreenLocationChanged}} {\plain \caps\f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_window_item_protocol_methods')')}} ScreenLocationChanged
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void ScreenLocationChanged(pWI, causedBy)
\par \tab {\b\f12\fs18 Description\tab }This method is called when an item's screen location is changed because the parent Window object is being moved or scrolled.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab    \tab The address of a window item. This parameter is not passed in C++. 
\par causedBy\tab int   \tab This parameter has one of the following values: OWND_LOC_HSCROLL, OWND_LOC_VSCROLL, or OWND_LOC_MOVED.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None.
\par \tab {\b\f12\fs18 Comments\tab }None. 
\par \tab {\b\f12\fs18 Defau}{\b\f12\fs18 lt Action\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_setdefaultitem}{\*\bkmkend idx_setdefaultitem}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_setdefaultitem}} 
{\plain \caps\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} SetDefaultItem}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP229:0205}} {\plain 
\caps\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} SetDefaultItem}} {\plain \caps\f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_window_item_protocol_methods')')}} SetDefaultItem
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void SetDefaultItem(pWI, set)
\par \tab {\b\f12\fs18 Description\tab }This method is called when the default item in a window changes. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab    \tab The address of a window item. This parameter is not passed in C++. 
\par set\tab BOOL   \tab TRUE if the item is to be considered the default item and FALSE otherwise. If an item is the default item, it receives the default key (<Enter>) regardless of which item has the focus. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None. 
\par \tab {\b\f12\fs18 Commen}{\b\f12\fs18 ts\tab }
In order for this method to be called for an item, the item has to call OWndSetDefaultItem to request that it be the default item. When this method is called, an item might need to change its appearance to reflect whether it is the default item. 
\par \tab {\b\f12\fs18 Default Action\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_setselection}{\*\bkmkend idx_setselection}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_setselection}} {\plain 
\caps\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} SetSelection}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP229:0210}} {\plain \caps\f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} SetSelection}} {\plain \caps\f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_window_item_protocol_methods')')}}
 SetSelection
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }BOOL SetSelection(pWI, pStart, pCount)
\par \tab {\b\f12\fs18 Description\tab }This method is called when the Window object's ALM function Set Selection is called. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab    \tab The address of a window item. This parameter is not passed in C++. 
\par pStart\tab long   \tab The address of the starting-point index. This parameter is a one-based index. It should count <CR> <LF> combinations as a single character.
\par pCount\tab long   \tab The address of the number of characters to select. It should count <CR> <LF> combinations as a single character.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }The return value is TRUE if the item supports selection and FALSE if it does not.
\par \tab {\b\f12\fs18 Comments\tab }If the return value is TRUE, the SetSelection function's "Done" flow is followed. If the return value is FALSE, the "Selection not supported" flow is followed.
\par \tab {\b\f12\fs18 Default Action\tab }None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_show}{\*\bkmkend idx_show}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_show}} {\plain 
\caps\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Show}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP229:0215}} {\plain \caps\f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Show}} {\plain \caps\f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_window_item_protocol_methods')')}} Show

\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void Show(pWI)
\par \tab {\b\f12\fs18 Description\tab }This method makes items visible within a Window object.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab    \tab The address of a window item. This parameter is not passed in C++.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None.
\par \tab {\b\f12\fs18 Comments\tab }This method is called when an item is to be made visible. After the ParentOpened method has been called, this method is called for
 visible items. If an item is initially invisible and the ALM function Show Item is called, this method will also be called. 
\par \tab {\b\f12\fs18 Default Action\tab }
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }For HWIs, ShowWindow is called with the item's window handle and SW_SHOWNOACTIVATE.
\par {\cf5 \{bmc rr.bmp\}\tab }For LWIs, the item and the item's rectangle are invalidated.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_undo}{\*\bkmkend idx_undo}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_undo}} {\plain 
\caps\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Undo}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} SUPP229:0220}} {\plain \caps\f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Undo}} {\plain \caps\f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_n1_window_item_protocol_methods')')}} Undo

\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }void Undo(pWI)
\par \tab {\b\f12\fs18 Description\tab }This method undoes the last editing action that has taken place. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description 
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 pWI\tab OpWndItemD*
\par \tab    \tab The address of a window item. This parameter is not passed in C++. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value\tab }None.
\par \tab {\b\f12\fs18 Comments\tab }When this method is called, the item should undo the last edit action that took place.
\par \tab {\b\f12\fs18 Default Action\tab }None.
\par 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\fs16\up6 {\*\bkmkstart idx_appendix_a}{\*\bkmkend idx_appendix_a}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_appendix_a}}{\fs16\up6  }{\plain \f3\fs16\up6\lang1033 +
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} chap:0011}} {\fs16\up6 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Appendix A}} {\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K}
 Appendix A;ALMs:design guidelines}} {\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_contents')')}} Appendix A
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 
\par \pard\plain \s29\ri432 \f11\fs60\lang1033 ALM User Interface Guidelines{\pard\plain \s29\ri432 \v\f11\fs60\lang1033 {\tc {\v ALM User Interface Guidelines}}}
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 This appendix contains guidelines for ALM design. It is applicable to the Microsoft Windows platform. 
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Design Issues}{\v idx_design_issues}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 gotobutton idx_design_issues}}{\fldrslt }}
\par {\uldb\cf11 Functions}{\v idx_f}{\v unctions}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_functions}}{\fldrslt }}
\par {\uldb\cf11 Online Help}{\v idx_online_help}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_online_help}}{\fldrslt }}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_design_issues}{\*\bkmkend idx_design_issues}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_design_issues}}{\caps\fs16\up6  }{\plain 
\f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} UI:0005}} {\caps\fs16\up6 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Design Issues}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {
\fs16\up6 K} Design Issues}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_appendix_a')')}} Design Issues
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 This section addresses design issues such as the audience level, standard platform layouts, function design, signals, and online help. 
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Audience Level}{\v idx_audience_level}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_audience_level}}{\fldrslt }}
\par {\uldb\cf11 Layouts for Object-editing Dialogs}{\v idx_layouts_fo}{\v r_object_editing_dialogs}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_layouts_for_obje}}{\fldrslt }}
\par 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_audience_level}{\*\bkmkend idx_audience_level}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_audience_level}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Audience Level}} {\plain \f3\fs16\cf2\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws118:0000}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Audience Level;Visual AppBuilder:user description}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_design_issues')')}} Audience Level
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
As you design your ALMs, you should be aware that the intended users of AppWare and the ALM library are corporate developers and power users. Only a minority use Pascal, C, C++, or similar environments in their day-to-day work. However, most AppBuilder us
ers will have had previous experience with a higher level (4 GL) tool, such as dBASE, Paradox, Omnis, Double Helix, Oracle Card, Power Builder, HyperCard, SuperCard, Spinnaker Plus, or Excel macros. 
\par AppWare simplifies programming not only through its iconic metaphor, but also by providing high-level access to desktop and network operating system services. It exposes low-level APIs at much higher levels of abstraction. {\i 
No AppWare user should ever need detailed knowledge of an API in order to use an ALM that exposes the services of that API.
\par }\pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_layouts_for_obje}{\*\bkmkend idx_layouts_for_obje}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_layouts_for_object_editing_dialogs}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Layouts for Object-editing Dialogs}} {\plain \f3\fs16\cf2\up6\lang1033 +{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 +} brws118:0005}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Layouts for Object-editing Dialogs;Object types:editing dialogs for;Dialogs;Layouts;Resolution}} {\plain 
\f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_design_issues')')}} Layouts for Object-editing Dialogs
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 Although there is still variation in 
the look of some object-editing dialogs, Novell has adopted standard layouts for each platform that it hopes other developers will follow. The following figures illustrates the object-editing dialog for the Bundle object.
\par {\cf5 \{bml bundle.bmp\}}
\par {\cf1 W}e recommend that your target resolution be 640 pixels by 480 pixels, but complex edit dialogs might be sizable for use on larger-resolution screens.
\par As you construct an object-editing dialog for a Microsoft Windows object, please keep the following guidelines in mind: 
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 1.\tab 
Place the object icon in the upper left corner. It should be followed by the name of the object in 18-point Arial bold italic. Arial is a standard TrueType Microsoft Windows font. The text for the other headings and for the buttons is the system font. 
(Novell's developers have been using eight-point Helvetica as the system font.)
\par 2.\tab Arrange the OK, Cancel, and Help buttons vertically, in the order listed, along the right side.
\par 3.\tab Use a line to divide the icon, the Cancel button, and the OK button from the rest of the dialog.
\par 4.\tab Novell recommends the use of the light gray background and embossed styling provided by the Borland Resource Workshop.
\par 5.\tab In most cases, you should designate the OK button as the default button. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_functions}{\*\bkmkend idx_functions}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_functions}}{\caps\fs16\up6  }{\plain 
\f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} UI:0010}} {\caps\fs16\up6 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Functions}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {
\fs16\up6 K} Functions;APIs;ALMs:number of;Parameters:number of;Flows;Input parameters:number of;Output parameters:number of}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up
', `JI(`', `idx_appendix_a')')}} Functions
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
Functions are not one-to-one representations of API calls. A well-designed ALM hides low-level complexity. It reduces the difficulty and also the number of issues that the AppWare user has to confront; by reducing difficulty and complexity, it also reduce
s the n
umber of required functions. In general, features that are available in the object's editing dialog should be presented as functions. Although the number of functions required to support a given API varies from one ALM to another, this number should be ke
pt to as small a number as possible. Most current ALMs have fewer than 40 functions. 
\par Keep the number of parameters and flows to a minimum. Most current functions require no more than three or four {\uldb\cf11 input parameters}{\v idx_input_parameters}{\field{\*\fldinst {\cf1 macrobutton NextField}{\cf1  }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_input_parameters}}{\fldrslt }}{\cf1  }and even fewer {\uldb\cf11 output parameters}{\v idx_output_parameters}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_output_parameter}}{\fldrslt }}{\cf1 .}
 If an ALM requires a large number of parameters, the object editing dialog should handle these wherever possible.
\par For an example of this, consider the Calculation ALM. It allows the user of AppWare to work with an large number of variables\emdash too many to accommodate in a function. You link a variable to a Number obje
ct in your application by selecting the object from the Number pop-up menu. You then assign the object a name that is referenced in the expression. Defining such a large number of variables through the use of a function is tedious and wastes valuable scre
en real estate. 
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Parameter Organization}{\v idx_parameter_organization}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf6 gotobutton idx_parameter_organi}}{\fldrslt }}
\par {\uldb\cf11 Input Parameters}{\v idx_n1_input_parameters}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_n1_in}{\cf6 put_paramet}
}{\fldrslt }}
\par {\uldb\cf11 Output Parameters}{\v idx_n1_output_parameters}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_n1_output_parame}}{\fldrslt }}

\par {\uldb\cf11 Icon Design}{\v idx_icon_design}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_icon_design}}{\fldrslt }}
\par {\uldb\cf11 Function Flows}{\v idx_n1_function_flows}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_n1_function_flow}}{\fldrslt }}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_parameter_organi}{\*\bkmkend idx_parameter_organi}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_parameter_organization}
} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Parameter Organization}} {\plain \f3\fs16\cf2\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws119:0000}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Parameter Organization;Parameters:order of;Parameters:name length}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_functions')')}} Parameter Organization
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 Function parameters should be ordered, top to bottom, from most important to least important. Optional parameters should be listed last. If one of the {
\uldb\cf11 input parameters}{\v idx_input_parameters}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_input_parameters}}{\fldrslt }}{
\cf1  }
is an object of the same type as the function's category, that parameter should be listed first. For example, consider the Database object and its functions. Since a Database object is required for all database functions, the Database input parameter is a
lways first in the list of {\uldb\cf11 input parameters}{\v idx_input_parameters}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJum}{\cf6 p <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_input_parameters}}{\fldrslt }}{\cf1 .}
\par Parameter names should describe the nature of the input or output wherever possible; for example, "Count" or "Index" instead of "Number," and "Find Text" or "Pathname" instead of "Text." Keep names as brief as possible, but avoid abbreviations. If you ent
er a name that is too long, the name will be clipped from the right. The number of characters you can enter before clipping occurs is variable because the font is proportional; in general, the maximum length of an u
nclipped name is approximately six to 11 characters. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_n1_input_paramet}{\*\bkmkend idx_n1_input_paramet}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_n1_input_parameters}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Input Parameters}} {\plain \f3\fs16\cf2\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws119:0005}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Input Parameters;Temporary objects:accepting;Flag object;Input parameters:avoidance of numbers;Text object:for multiple modes;Defaults}} {\plain 
\f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_functions')')}} Input Parameters
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
If an input parameter is a Date, Number, Text, or Time object, it should accept temporary objects wherever possible; this allows the user to declare a value by double-clicking the parameter label.
\par If a function has only two modes of operation, such as a find-and-replace function that might be case-sensitive, let the user specify the mode with a Flag object\emdash one of AppWare's Essentials objects. In order to prevent the AppWare
 user from having to learn different codes for each function set, avoid the use of numerical function inputs, such as 0, 1, or \endash 1, to specify modes of operation.
\par If a function has three or more possible operation modes, let the user specify them with an optional Text object input that the function parses when it is executes; if no input is entered, designate a predefined default. For example, if a function had thr
ee different modes for case-sensitivity, the modes could be indicated by the words ASCII, International, or NoCase. If a user did not enter one of the three choices, the function could default to NoCase.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_n1_output_parame}{\*\bkmkend idx_n1_output_parame}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_n1_output_parameters}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Output Parameters}} {\plain \f3\fs16\cf2\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws119:0010}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Output Parameters;Output parameters:optional;Function flows:using}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_functions')')}} Output Parameters
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
Unless the only purpose of the function is to return information, output parameters should be optional. In particular, avoid using output parameters to indicate the success or failure of a function's execution. Use {\uldb\cf11 function flows}{\v 
idx_function_flows}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_function_flows}}{\fldrslt }}{\cf1  }instead. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_icon_design}{\*\bkmkend idx_icon_design}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_icon_design}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Icon Design}} {\plain \f3\fs16\cf2\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws119:0015}} {\plain \f3\fs16\cf2\up6\lang1033 K
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Icon Design;Icons}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_functions')')}} Icon Design
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 Icon imag
es should convey the nature of the action performed by the function. Avoid use of language-specific text in the icon wherever possible, since text translations complicate localization into foreign languages. All icons should be bounded by a black border t
hat is one pixel wide. Each function category and its associated object should follow a design theme to distinguish its category graphically from all others. For good examples of icon design, see the Database, Table, Laser Disc, PolyButton, and Movie ALMs
.
\par Black-and-white icons and color icons should both be supported.
\par Icons can be trademarked. Instead of using a trademarked icon, such as the Novell N-Design, you should design your own icon. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_n1_function_flow}{\*\bkmkend idx_n1_function_flow}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_n1_function_flows}} 
{\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Function Flows}} {\plain \f3\fs16\cf2\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} brws119:0020}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Function Flows;Function flows:how to use;Error codes;Indexes:using;Names}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {
\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_functions')')}} Function Flows
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The flows generated by a function should expose only those events that an AppWare developer can understand and respond to.\~
Most current functions involve three or fewer flows. The function should automatically handle most, if not all, low-level events. For example, the functions involved in l
oading a file typically provide flows for successful execution, user cancellation (if a dialog is used), and failure due to error. Do not itemize errors as signals unless the user can correct the errors through the use of function calls. To generate error
 codes, use a Text output parameter.
\par Function-flow options should also take into account variations and errors in the input parameters, such as an invalid pathname being passed to a function when a file is to be loaded, or an out-of-range number being pass
ed to functions that require an index. This last case merits specific attention. All functions that take an index-number input should have an "Index out of range" flow. Such a flow is especially useful in loops. Without it, a user is obliged to set up fun
ctions manually in order to determine whether the index being passed is still within range. One function that uses this sort of flow correctly is the Group object's Get Object function.
\par Signal and flow names should be both brief and intelligible. If possib
le, use a single word and capitalize its first letter. If there are any subsequent words, they should be lowercase. For example, use "No error" instead of "no error." Names that refer to actions should be in the form of past participles such as "Opened," 
"Canceled," or "Closed." 
\par The default flow should always represent successful execution of the function, as illustrated in the following figure. The figure shows the Open Connection function and its flows.
\par {\cf5 \{bml connect.bmp\}}{\cf1 
\par }Use flows instead of output pa
rameters to indicate what the function did. For example, the Open Connection function in the previous figure could have been designed to return different numerical values to indicate its success or failure. Although the use of numerical values is normal p
ractice in 3 GL programming, it is foreign to AppWare's event-and-signal metaphor and should be avoided.
\par If a function has only one signal flow, use "Done" as its name. By convention, "Done" tells the AppWare user that there is only one possible result. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_online_help}{\*\bkmkend idx_online_help}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_online_help}} {\caps\fs16\up6 ${\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Online Help}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} UI:0015}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K}
 Online Help;Online help;Help files:online}} {\caps\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_appendix_a')')}} Online Help
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
Online help should be provided through Microsoft Windows help files. At a minimum, help should be provided for each object type and function. Help for editing dialogs should also be provided through a help button. 
\par 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\fs16\up6 {\*\bkmkstart idx_appendix_b}{\*\bkmkend idx_appendix_b}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_appendix_b}}{\fs16\up6  }{\plain \f3\fs16\up6\lang1033 +
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} chap:0012}} {\fs16\up6 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Appendix B}} {\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Appendix B}} {
\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_contents')')}} Appendix B
\par \pard\plain \f3\fs20\lang1033 
\par \pard\plain \s29\ri432 \f11\fs60\lang1033 Debugging Support
\par \pard\plain \f3\fs20\lang1033 
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Introduction to ALM Debugging}{\v idx_n2_introduction_to_alm_debugging}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 gotobutton idx_n2_introduction_}}{\fldrslt }}
\par {\uldb\cf11 Errors and Warnings}{\v idx_errors_and_warnings}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutt}{\cf6 on DoJump <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
gotobutton idx_errors_and_warni}}{\fldrslt }}
\par {\uldb\cf11 Runtime Control of Debugging Information}{\v idx_runtime_control_of_debugging_information}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf6 gotobutton idx_runtime_control_}}{\fldrslt }}
\par 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_n2_introduction_}{\*\bkmkend idx_n2_introduction_}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_n2_introduction_to_alm_debugging}}{\plain \f3\fs16\cf2\up6\lang1033  }{\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} APPB10:0005}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 $} Introduction to ALM Debugging}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Introduction to ALM Debugging}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain 
\s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_appendix_b')')}} Introduction to ALM Debugging
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
At run time, ALM Builder supports the display of debugging information on a debugging terminal. This functionality is provided for the executable code you receive with ALM Builder and for the ALM code you write. To implement debugging support for the {
\uldb\cf11 A}{\uldb\cf11 ppWare Bus}{\v idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}
}{\fldrslt }}{\cf1 ,} ALM developers have two sets of DLLs. One set is for debugging and the other set is for redistribution with finished applications and ALMs. 
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }The debugging DLLs are located in the c:\\appware\\bin\\
debug directory. The debugging version checks all API parameters and issues warnings if the parameters are invalid. The debugging version also checks for memory locking or unlocking problems. It should be used to help catch {\uldb\cf11 AppWare Bus}{\v 
idx_the_appware_bus}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_the_appware_bus}}{\fldrslt }}{\cf1  }
access errors during development. 
\par {\cf5 \{bmc rr.bmp\}\tab }The retail set of DLLs, which are located in the c:\\appware\\bin\\nodebug directory, has been optimized for efficiency and size. It does not include the same level of debugging support as the debugging version. 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 In general, you can check for errors and warning conditions in every AppWare function you call by using the de
bugging version of the DLLs in your code. You can also use the AppWare debugging functions and macros to check for errors and to display error messages in your own code.
\par When your code is compiled with a defined {\uldb\cf11 ADBG_DEBUG}{\v idx_adbg_debug}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_adbg_debug}}{\fldrslt }}{\cf1  }macro, the AppWare debugging macros are expanded into code that evaluates expressions and posts error messages. When the ADBG_DEBUG macro is not defined, the debugging macros are not expanded and you
r compiled code does not carry any debugging overhead. In other words, you can generate your own versions of ALM code with or without debugging. This is the same mechanism that was used to generate the two DLL versions that were delivered to you with ALM 
Builder. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_errors_and_warni}{\*\bkmkend idx_errors_and_warni}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_errors_and_warnings}}
{\plain \f3\fs16\cf2\up6\lang1033  }{\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} APPB10:0010}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $}
 Errors and Warnings}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Errors and Warnings}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_appendix_b')')}} Errors and Warnings
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 Each message printed to the debugging terminal by the operating system's OutputDebugString call has an associated level and object type, as described in {
\uldb\cf11 ADbgPrint}{\v idx_adbg_print}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton D}{\cf6 oJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_adbg_print}}{\fldrslt }}{\cf1 (}
). The levels have the following values:
\par \pard\plain \s36\fi-288\li1714\ri432\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab 0 = info
\par \tab 1 = warning
\par \tab 2 = error
\par \pard \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \tab 3 = unknown 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The object type associated with a message is an internal TYPEID that consists of four ASCII characters. 
\par In deciding where you should place error checks and warnings in your ALM code, the following information might help.
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }An object type with a value of 0 is considered to be untyped. 
\par {\cf5 \{bmc rr.bmp\}\tab }Warnings should be issued for those conditions where the operation can continue, but the input or the state is questionable. If an object does not support the {\uldb\cf11 AOBJ_EDITOBJECT}{\v idx_aobj_editobject}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_aobj_editobject}}{\fldrslt }}{\cf1  }
message, for example, a warning should be issued because the environment can continue operating. Similarly, unlocking an already unlocked data produces a warning because no harm is done by an attempt to unlock data. 
\par {\cf5 \{bmc rr.bmp\}\tab }Errors should be issued for those conditions where it is impossible to co
ntinue the operation. If an attempt is made to resize a locked data block, for example, an error should be issued because later operations could fail. In general, a function that fails should issue an error.
\par {\cf5 \{bmc rr.bmp\}\tab }An unknown indicates some message that does not fit within one of the other categories. 
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 Debugging DLL Procedures and Macros}{\v idx_debugging_dll_procedures_and_macros}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 gotobutton idx_debugging_dll_pr}}{\fldrslt }}
\par {\uldb\cf11 Compilation Options}{\v idx_compilation_options}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
gotobutton idx_compilation_opti}}{\fldrslt }}
\par 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_debugging_dll_pr}{\*\bkmkend idx_debugging_dll_pr}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_debugging_dll_procedures_and_macros}}{\plain \caps\f3\fs16\cf2\up6\lang1033  }{\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} APPB11:0005}} {\plain \caps\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain 
\s245 \f3\fs20\lang1033 {\fs16\up6 $} Debugging DLL Procedures and Macros}} {\plain \caps\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Debugging DLL Procedures and Macros}} {\plain \caps\f3\fs16\cf2\up6\lang1033 !
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_errors_and_warnings')')}} Debugging DLL Procedures and Macros
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 This section describes the debugging DLL procedures and macros that are provided with the ALM Builder. {\uldb\cf11 Chapter 8}{\v idx_chapter_8}
{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_chapter_8}}{\fldrslt }}{\cf1  }contains more detailed descriptions. 
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 ADBG_DEBUG}{\v idx_adbg_debug}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {
\cf6 gotobutton idx_adbg_debug}}{\fldrslt }}
\par {\uldb\cf11 ADBG_EVAL}{\v idx_adbg_eval}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 gotobutton idx_adbg_eval}}{\fldrslt }}
\par {\uldb\cf11 ADbgPrint, ADbgPrintRes}{\v idx_adbgprint__adbgprintres}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
gotobutton idx_adbgprint__adbgp}}{\fldrslt }}
\par {\uldb\cf11 ADBG_ASSERT}{\v idx_adbg_assert}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 gotobutton idx_adbg_assert}}{\fldrslt }}

\par {\uldb\cf11 ADBG_PRINT}{\v idx_adbg_print}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 gotobutton idx_adbg_print}}{\fldrslt }}
\par 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_adbg_debug}{\*\bkmkend idx_adbg_debug}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_adbg_debug}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ADBG_DEBUG}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} APPB12:0005}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ADBG_DEBUG}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_debugging_dll_procedures_and_macros')')}} ADBG_DEBUG

\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The existence of ADBG_DEBUG controls whether the debugging macros are expanded. If it is to
 turn on the other debugging macros, the ADBG_DEBUG macro has to be defined before A_ALM.H has been included. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_adbg_eval}{\*\bkmkend idx_adbg_eval}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_adbg_eval}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ADBG_EVAL}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} APPB12:0010}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ADBG_EVAL}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_debugging_dll_procedures_and_macros')')}} ADBG_EVAL

\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The code expression for ADBG_EVAL(e) is as follows: 
\par \pard\plain \s26\li1440\ri432\tx1440\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 #define ADBG_EVAL(e)
\par 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 If {\uldb\cf11 ADBG_DEBUG}{\v idx_adbg_debug}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_adbg_debug}}{\fldrslt }}{\cf1  }has been defined, ADBG_EVAL(e) evaluates the given expression. If ADBG_DEBUG is undefined, it does nothing.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_adbgprint__adbgp}{\*\bkmkend idx_adbgprint__adbgp}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_adbgprint__adbgprintres
}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ADbgPrint, ADbgPrintRes}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} APPB12:0015}} {\plain 
\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ADbgPrint, ADbgPrintRes}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_debugging_dll_procedures_and_macros')')}} ADbgPrint, ADbgPrintRes
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The {\uldb\cf11 ADbgPrint}{\v idx_adbg_print}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_adbg_print}}{\fldrslt }}{\cf1  }and {\uldb\cf11 ADbgPrintRes}{\v idx_adbgprintres}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_adbgprintres}}{\fldrslt }}{\cf1  }
procedures are used by the other debugging macros to output information to a debugging terminal. You can also call them directly. ADbgPrint uses a format string (pszFmt) to control its output format; ADbgPrintRes uses a resource file. The code expressions
 for ADbgPrint and ADbgPrintRes are as follows: 
\par \pard\plain \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 int WINAPI ADbgPrint(int level, TYPEID typeID, LPSTR pszFmt, ...);
\par int WINAPI ADbgPrintRes(int level, TYPEID typeID, HINSTANCE h, UINT id, ...); 
\par \pard \s26\li1440\ri432\tx1440\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
In the retail version of the DLLs, ADbgPrint() and ADbgPrintRes do nothing. In the debugging version, pszFmt is used as the format string and the ... parameters are used as arguments to the format, then printed using OutputDebugString(). The level paramet
er has to be one of the following values:\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab \tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 ADBG_E_INFO\tab informational message 
\par ADBG_E_WARNING\tab warning message
\par ADBG_E_ERROR\tab error message\line 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
The typeID parameter is used for object-type filtering. If it is nonzero, the message will be printed only if filtering is off or if that type is not being filtered out.
\par For ADbgPrint(), the actual string output is of the form:
\par <type>: <pszFmt>\\r\\n
\par where <type> is "Info," "Warn," or "Err." ADbgPrint() always returns the value 0. 
\par For ADbgPrintRes(), the string output is of the form
\par <module> <errcode>: <type>: <pszFmt>\\r\\n
\par where 
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }<module> is derived from the string ID number 0 in the HINSTANCE that was passed in.
\par {\cf5 \{bmc rr.bmp\}\tab }<errcode> is the ID that was passed in.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_adbg_assert}{\*\bkmkend idx_adbg_assert}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_adbg_assert}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ADBG_ASSERT}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} APPB12:0020}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ADBG_ASSERT}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_debugging_dll_procedures_and_macros')')}} ADBG_ASSERT

\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The code expressions for ADBG_ASSERT are as follows: 
\par \pard\plain \s26\li1440\ri432\tx1440\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 #define ADBG_ASSERT_I(e, r, s)
\par #define ADBG_ASSERT_W(e, r, s)
\par #define ADBG_ASSERT_E(e, r, s)
\par #define ADBG_ASSERT_RES_I(e, r, h, i)
\par #define ADBG_ASSERT_RES_W(e, r, h, i)
\par #define ADBG_ASSERT_RES_E(e, r, h, i)
\par 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 If {\uldb\cf11 ADBG_DEBUG}{\v idx_adbg_debug}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_adbg_debug}}{\fldrslt }}{\cf1  }is set in A_ALM.H and is c
ompiled with your code, these macros expand to an expression that evaluates e. If e is false, the expression uses the s string to call ADbgPrint(). The last letter of the macro (_I, _W, or _E) gives the value of the message level (info, warning, or error)
. After the expression calls ADbgPrint, it performs the statement r. (The expanded code is a statement, not an expression.) The optional r parameter is typically used for returning out of a procedure. For example, to check that a parameter is not NULL, an
d to return if it is, the following assert would be used:
\par \pard\plain \s26\li1440\ri432\tx1440\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 ADBG_ASSERT(pPtr != NULL, return, "Invalid pPtr param in procedure GHI");
\par 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
The _RES macros accept an HINSTANCE and a string-resource ID instead of a literal string. The string is retrieved from the resources of the HINSTANCE and is then printed; that is, it uses {\uldb\cf11 ADbgPrintRes}{\v idx_adbgprintres}{\field{\*\fldinst {
\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_adbgprintres}}{\fldrslt }}{\cf1 (}).
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_adbg_print}{\*\bkmkend idx_adbg_print}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_adbg_print}} {\plain 
\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ADBG_PRINT}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} APPB12:0025}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ADBG_PRINT}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_debugging_dll_procedures_and_macros')')}} ADBG_PRINT

\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The code expressions for ADBG_PRINT are as follows: 
\par \pard\plain \s26\li1440\ri432\tx1440\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 #define ADBG_PRINT_I(s)
\par #define ADBG_PRINT_W(s)
\par #define ADBG_PRINT_E(s)
\par #define ADBG_PRINT_RES_I(h, i)
\par #define ADBG_PRINT_RES_W(h, i)
\par #define ADBG_PRINT_RES_E(h, i)
\par 
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 If {\uldb\cf11 ADBG_DEBUG}{\v idx_adbg_debug}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_adbg_debug}}{\fldrslt }}{\cf1  }is not set when the file is compiled, ADBG_PRINT expands to nothing. These macros call either ADbgPrint() or {\uldb\cf11 ADbgPrintRes}{\v 
idx_adbgprintres}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_adbgprintres}}{\fldrslt }}{\cf1 (}). ADbgPrint() and ADbgP
rintRes() print the given string with the indicated type, where  _I is for information, _W is for a warning, and _E is for an error. 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \caps\f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_compilation_opti}{\*\bkmkend idx_compilation_opti}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_compilation_options}} {\plain \caps\f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Compilation Options}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} APPB11:0010}}
 {\plain \caps\f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Compilation Options}} {\plain \caps\f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
 EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_errors_and_warnings')')}} Compilation Options
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 To obtain maximum information from the DEBUG DLLs, you should define the {\uldb\cf11 ADBG_DEBUG}{\v idx_adbg_debug}{\field{\*\fldinst {\cf1 
macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_adbg_debug}}{\fldrslt }}{\cf1  }
macro when you compile your code modules. If ADBG_DEBUG is defined before your header files, the following conditions will print a history of the locks and unlocks on an object's data blocks:
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }Attempting to resize, set data in, or delete a locked data block.
\par {\cf5 \{bmc rr.bmp\}\tab }Exceeding the MaxLockLife or the MaxLockCount.
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
Another debugging support macro that can be defined is ASTRICT. ASTRICT is analogous to the Microsoft Windows STRICT option that validates the variable types passed to APIs at compile time. ASTRICT enables type validation for AppWare's OBJECTID, TYPEID, E
VENTID, and PROTOCOLID data types.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\cf2\up6\lang1033 {\*\bkmkstart idx_runtime_control_}{\*\bkmkend idx_runtime_control_}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_runtime_control_of_debugging_information}} {\plain \f3\fs16\cf2\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Runtime Control of Debugging Information}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 +} APPB10:0015}} {\plain \f3\fs16\cf2\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} Runtime Control of Debugging Information}} {\plain \f3\fs16\cf2\up6\lang1033 !{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_appendix_b')')}} Runtime Control of Debugging Information
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 Runtim
e control of the ALM Builder's debugging information is specified in the appware.ini file. The file is located in the operating system's main directory. The debugging control is very similar to Microsoft Windows support for the DEBUG kernel. The [Debug] s
ection of the appware.ini file specifies the following key words that affect the debugging environment:
\par \pard\plain \s36\fi-288\li1714\ri432\sa240\tx288\tx1710\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 {\cf5 \{bmc rr.bmp\}\tab }
MaxLockCount=<number>, where <number> tells the system the maximum allowable lock count that can occur before a warning is issued. A data b
lock's lock count is incremented by one each time the data block is locked. It is decremented by one each time the data block is unlocked unless the lock count is already zero. 
\par {\cf5 \{bmc rr.bmp\}\tab }
MaxLockLife=<number>, where <number> tells the system how high the lock-life count can go before the system is to complain about a data block being locked too long. A data block's lock life is the number of locks and unlocks that have occurred for that da
ta block since its lock count was zero. When the count goes to zero, the lock-life count goes to zero. If the keyword does not exist, there is no maximium. This key word helps catch cases where data blocks are not unlocking.
\par {\cf5 \{bmc rr.bmp\}\tab }TraceLevel=<number>, where <number> is 0..3. Messages that are destined for the output terminal will only be printed if their error level is greater than or equal to this number. The default is zero for all messages.
\par {\cf5 \{bmc rr.bmp\}\tab }BreakOn=<number>, where <number> is a four-bit value whose individual bits tell the system whether or not t
o use DebugBreak in order to break when a message with the corresponding error level is printed. Bit number 0 is info, number 1 is warning, and so forth. For a break on errors, for example, the value of <number> would be four. The default is zero.
\par {\cf5 \{bmc rr.bmp\}\tab }
TypeFilters=<string>, where <string> is a list of object-type IDs, separated by semicolons, that specify the type messages that can be printed. Subject to TraceLevel, an untyped message will be printed. If a message is typed and the value of TypeFilt
ers is not null, the message will only print if its object-type ID is listed. For example, to get messages from the Window object and from untyped messages, TypeFilters should be Wino.
\par {\cf5 \{bmc rr.bmp\}\tab }TraceEvents=<0/1>, where zero will not trace events in the AppWare system, and a nonzero value will. The default is zero.
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The suggested contents of the appware.ini file's [Debug] section are:
\par \pard\plain \s26\li1440\ri432\tx1710\tx1890\tx3240\tqr\tx4032\tqc\tlul\tx4320\tqr\tx4608\tqc\tlul\tx4896 \f9\fs18\lang1033 [Debug]
\par MaxLockLife=30
\par MaxLockCount=5
\par TraceLevel=0
\par BreakOn=6
\par TypeFilters=
\par TraceEvents=
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 
\par \pard\plain \s2\sb240\sa120\keepn\tx180 \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\up6\lang1033 {\*\bkmkstart idx_appendix_c}{\*\bkmkend idx_appendix_c}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_appendix_c}} {\plain 
\f3\fs16\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} Appendix C}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} chap:0014}} {\plain \f3\fs16\up6\lang1033 K{\footnote \pard\plain 
\s245 \f3\fs20\lang1033 {\fs16\up6 K} Appendix C}} {\plain \f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}  EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_contents')')}} Appendix C
\par \pard\plain \s29\ri432 \f11\fs60\lang1033 ALM Utility Functions
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 List of ALM Utility Functions}{\v idx_list_of_alm_utility_functions}{\field\flddirty{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 gotobutton idx_list_of_alm_util}}{\fldrslt }}
\par {\uldb\cf11 ALM Utility Function Descriptions}{\v idx_alm_utility_function_descriptions}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 
gotobutton idx_alm_utility_func}}{\fldrslt }}{\cf6 
\par }\pard\plain \f3\fs20\lang1033 
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\up6\lang1033 {\*\bkmkstart idx_list_of_alm_util}{\*\bkmkend idx_list_of_alm_util}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_list_of_alm_utility
_functions}}{\plain \f3\fs16\up6\lang1033   ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} List of ALM Utility Functions}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} APPC13:0005}} {\plain 
\f3\fs16\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} List of ALM Utility Functions}} {\plain \f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
  EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_appendix_c')')}} List of ALM Utility Functions
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The following table lists the ALM utility functions. When many separate ALMs are operating simultaneously, Microsoft Windows can become incapable 
of accommodating resource demands. The ALM utility functions address this problem by consolidating and sharing Microsoft Windows resources between separate ALMs. 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Function\tab \tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 {\uldb\cf11 AUtlCreateBrushIndirect}{\v idx_autlcreatebrushindirect}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 
macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_autlcreatebrushi}}{\fldrslt }}{\cf1 
\par }\tab \tab Creates a logical brush whose style, color, and pattern are in a data structure. 
\par AUtlCreateFont\tab Creates a logical font.\tab 
\par {\uldb\cf11 AUtlCreateFontIndirect}{\v idx_autlcreatefontindirect}{\field{\*\fldinst {\cf1 macrobutton NextF}{\cf1 ield }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 
gotobutton idx_autlcreatefontin}}{\fldrslt }}{\cf1 
\par }\tab \tab Creates a logical font whose characteristics are in a data structure.
\par {\uldb\cf11 AUtlCreateSolidBrush}{\v idx_autlcreatesolidbrush}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_autlcreatesolidb}
}{\fldrslt }}{\cf1 \tab }Creates a logical brush that has the specified solid color.
\par {\uldb\cf11 AUtlDeleteBrush}{\v idx_autldeletebrush}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_autldeletebrush}}{\fldrslt }}{
\cf1 \tab }Deletes a brush and its associated data from an application.
\par {\uldb\cf11 AUtlDelete}{\uldb\cf11 Font}{\v idx_autldeletefont}{\field{\*\fldinst {\cf1 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf1 gotobutton idx_autldeletefont}
}{\fldrslt }}{\cf1 \tab }Deletes a font and its associated data from an application.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\plain \f3\fs16\up6\lang1033 {\*\bkmkstart idx_alm_utility_func}{\*\bkmkend idx_alm_utility_func}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #}
 idx_alm_utility_function_descriptions}} {\plain \f3\fs16\up6\lang1033 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} ALM Utility Function Descriptions}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {
\fs16\up6 +} APPC13:0010}} {\plain \f3\fs16\up6\lang1033 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 K} ALM Utility Function Descriptions}} {\plain \f3\fs16\up6\lang1033 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}
  EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_appendix_c')')}} ALM Utility Function Descriptions
\par \pard\plain \s22\li1440\ri432\sb72\sa216\tx2448\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 The remainder of this appendix contains descriptions of the ALM utility functions.
\par \pard\plain \s21\li720\ri432 \f3\fs20\lang1033 {\uldb\cf11 AUtlCreateBrushIndirect}{\v idx_autlcreatebrushindirect}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}
{\field{\*\fldinst {\cf6 gotobutton idx_autlcreatebrushi}}{\fldrslt }}
\par {\uldb\cf11 AUtlCreateFontIndirect}{\v idx_autlcreatefontindirect}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton D}{\cf6 oJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_autlcreatefontin}
}{\fldrslt }}
\par {\uldb\cf11 AUtlCreateSolidBrush}{\v idx_autlcreatesolidbrush}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_autlcreatesolidb}
}{\fldrslt }}
\par {\uldb\cf11 AUtlDeleteBrush}{\v idx_autldeletebrush}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_autldeletebrush}}{\fldrslt }}
\par {\uldb\cf11 AUtlDeleteFont}{\v idx_autldeletefont}{\field{\*\fldinst macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf6 macrobutton DoJump <+>}}{\fldrslt }}{\field{\*\fldinst {\cf6 gotobutton idx_autldeletefont}}{\fldrslt }}
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_autlcreatebrushi}{\*\bkmkend idx_autlcreatebrushi}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_autlcreatebrushindirect}} {
\caps\fs16\up6 ${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AUtlCreateBrushIndirect}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} APPC14:0005}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 K} AUtlCreateBrushIndirect}}{\caps\fs16\up6  }{\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}  EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_alm_utility_function_descriptions')')}} AUtlCreateBrushIndirect

\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax\tab }HBRUSH AUtlCreateBrushIndirect(logicalBrush)
\par \tab {\b\f12\fs18 Description}\tab This function creates a logical brush whose style, color, and pattern are given in the data structure pointed to by the logicalBrush parameter.\line   
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 logicalBrush\tab 
\par \tab LOGBRUSH* \tab Points to a LOGBRUSH data structure that contains information about this brush.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab The return value equals one of the following constants.\line  
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab \tab Meaning
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 NULL\tab \tab The function did not create the font successfully.
\par hBrush\tab \tab The function created a logical brush. This value is the brush's HBRUSH handle.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Availability}\tab This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments}\tab This function maps directly to the Microsoft Windows function CreateBrushIndirect.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_autlcreatefontin}{\*\bkmkend idx_autlcreatefontin}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_autlcreatefontindirect}} {\caps\fs16\up6 
${\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AUtlCreateFontIndirect}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} APPC14:0010}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 
\f3\fs20\lang1033 {\fs16\up6 K} AUtlCreateFontIndirect}} {\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}  EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_alm_utility_function_descriptions')')}} AUtlCreateFontIndirect
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab 
HFONT AUtlCreateFont(lfHeight, lfWidth, lfEscapement, lfOrientation, lfWeight,   lfItalic, lfUnderline, lfStrikeOut, lfCharSet, lfOutPrecision, lfClipPrecision, lfQuality, lfPitchAndFamily, lfFaceName)
\par \tab {\b\f12\fs18 Description}\tab This function creates a logical font that has the specified characteristics.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 lfHeight\tab short \tab The average height of the font, in user units.
\par lfWidth\tab short \tab The average width of the font, in device units.
\par lfEscapement
\par \tab short \tab The average angle of each text line written in the font. The angle is in tenths of a degree, relative to the bottom of the page.
\par lfOrientation
\par \tab short \tab The angle, in tenths of a degree, between the character's baseline and the bottom of the page.
\par lfWeight\tab short \tab The font weight (zero to 1,000).
\par lfItalic\tab BYTE \tab If the parameter is nonzero, the font is italic.
\par lfUnderline
\par \tab BYTE \tab If the parameter is nonzero, the font is underlined.
\par lfStrikeOut
\par \tab BYTE \tab If the parameter is nonzero, the font is a strikeout font.
\par lfCharSet\tab BYTE \tab The font's character set. Possible values are ANSI_CHARSET, OEM_CHARSET, and SYMBOL_CHARSET.
\par lfOutPrecision
\par \tab BYTE \tab The font's output precision, which defines how closely the output has to match the requested font settings.
\par lfClipPrecision
\par \tab BYTE \tab The font's clipping precision, which defines how to clip characters that are partially outside the clipping region.
\par lfQuality\tab BYTE \tab The font's output quality. Possible values are DEFAULT_QUALITY, DRAFT_QUALITY, and PROOF_QUALITY.
\par lfPitchAndFamily
\par \tab BYTE \tab The font's pitch and family. Possible values are DEFAULT_PITCH, FIXED_PITCH, and VARIABLE_PITCH.
\par lfFaceName
\par \tab LPSTR \tab The font's typeface. If the parameter is set to NULL, the function uses the default typeface.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab The return value equals one of the following constants. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab \tab Meaning
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 NULL\tab \tab The function did not create the font successfully.
\par hFont\tab \tab The function created a logical font. This value is the font's HFONT handle.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Availability}\tab This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments}\tab This function does not actually create a new font.  Instead, it selects the closest match from the available fonts. This function maps directly to the Microsoft Windows function CreateFont.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_autlcreatesolidb}{\*\bkmkend idx_autlcreatesolidb}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_autlcreatesolidbrush}} {\caps\fs16\up6 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AUtlCreateSolidBrush}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} APPC14:0020}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {
\fs16\up6 K} AUtlCreateSolidBrush}} {\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}  EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_alm_utility_function_descriptions')')}} AUtlCreateSolidBrush
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab HBRUSH AUtlCreateSolidBrush(clRef)
\par \tab {\b\f12\fs18 Description}\tab This function creates a logical brush that has the specified solid color.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 clRef\tab COLORREF\tab Specifies the color of the brush.\line 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab The return value equals one of the following constants. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab \tab Meaning
\par \pard\plain \s25\fi-1440\li2880\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 NULL\tab \tab The function did not create the font successfully.
\par hBrush\tab \tab The function created a logical brush. This value is the brush's HBRUSH handle.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Availability}\tab This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments}\tab This function maps directly to the Microsoft Windows function CreateSolidBrush.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_autldeletebrush}{\*\bkmkend idx_autldeletebrush}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_autldeletebrush}} {\caps\fs16\up6 $
{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AUtlDeleteBrush}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} APPC14:0025}} {\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {
\fs16\up6 K} AUtlDeleteBrush}} {\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !}  EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_alm_utility_function_descriptions')')}} AUtlDeleteBrush
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab short AUtlDeleteBrush(hBrush)
\par \tab {\b\f12\fs18 Description}\tab This function deletes a given brush and its associated data from an application.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 hBrush\tab HBRUSH\tab The HBRUSH handle for the logical brush that is to be deleted.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab The return value equals one of the following constants.\line  
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab \tab Meaning
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 AUTL_HANDLENOTCREATED\tab This brush was not created by an AppWare Bus function. 
\par AUTL_HANDLEDELETED\tab The function deleted the brush successfully.
\par AUTL_HANDLEINUSE\tab The brush was in use, so the function could not delete it.
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Availability}\tab This function is available at design time and run time.
\par \tab {\b\f12\fs18 Comments}\tab None.
\par \pard\plain \s2\sb240\sa120\keepn \b\f3\fs36\cf2\lang1033 \page {\caps\fs16\up6 {\*\bkmkstart idx_autldeletefont}{\*\bkmkend idx_autldeletefont}#{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 #} idx_autldeletefont}} {\caps\fs16\up6 ${\footnote 
\pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 $} AUtlDeleteFont}} {\plain \f3\fs16\up6\lang1033 +{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 +} APPC14:0030}}{\fs16  }{\caps\fs16\up6 K{\footnote \pard\plain \s245 \f3\fs20\lang1033 {
\fs16\up6 K} AUtlDeleteFont}}{\caps\fs16\up6  }{\fs16\up6 !{\footnote \pard\plain \s245 \f3\fs20\lang1033 {\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_alm_utility_function_descriptions')')
\par }} AUtlDeleteFont
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Syntax}\tab short AUtlDeleteFont(hFont)
\par \tab {\b\f12\fs18 Description}\tab This function deletes a given font and its associated data from an application.\line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Parameter\tab Type\tab Description
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 hFont\tab HFONT\tab The HFONT handle for the logical font that is to be deleted.\line  
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Return Value}\tab The return value equals one of the following constants. \line 
\par \pard\plain \s23\li1440\ri288\sa144\brdrb\brdrth\brdrw15 \brdrbtw\brdrs\brdrw15 \tx1728\tx2880\tx4320 \b\f8\fs18\lang1033 Value\tab \tab Meaning
\par \pard\plain \s24\fi-2880\li4320\ri432\sa144\tx2880\tx4320\tx5184 \f7\fs22\lang1033 AUTL_HANDLENOTCREATED\tab This font was not created by an AppWare Bus function.
\par AUTL_HANDLEDELETED\tab The function deleted the font successfully.
\par AUTL_HANDLEINUSE\tab The font was in use, so the function could not delete it. 
\par \pard\plain \s32\fi-1267\li1440\ri432\sb240\tqr\tx1260\tx1440\tx2736\tx3024\tx3456\tx5184 \f7\fs22\lang1033 \tab {\b\f12\fs18 Availability}\tab This function is available at design time and run time. 
\par \tab {\b\f12\fs18 Comments}\tab None.
\par 
\par }