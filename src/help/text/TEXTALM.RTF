{\rtf1\ansi \deff5\deflang1033{\fonttbl{\f0\froman\fcharset0\fprq2 Tms Rmn;}{\f1\froman\fcharset2\fprq2 Symbol;}{\f2\fswiss\fcharset0\fprq2 Helv;}{\f3\fmodern\fcharset0\fprq1 Courier;}
{\f4\froman\fcharset0\fprq2 Times New Roman;}{\f5\fswiss\fcharset0\fprq2 Arial;}{\f6\froman\fcharset0\fprq2 MS Serif;}{\f7\fswiss\fcharset0\fprq2 MS Sans Serif;}{\f8\froman\fcharset0\fprq2 Times;}{\f9\fswiss\fcharset0\fprq2 Helvetica;}
{\f10\fswiss\fcharset0\fprq2 System;}{\f11\fmodern\fcharset0\fprq1 Courier New;}{\f12\fnil\fcharset2\fprq2 Wingdings;}{\f13\fnil\fcharset0\fprq2 WP OverflowSet;}{\f14\fscript\fcharset0\fprq2 Brush738 BT;}{\f15\fscript\fcharset0\fprq2 Blackletter686 BT;}
{\f16\froman\fcharset0\fprq2 Arrus Blk BT;}{\f17\froman\fcharset2\fprq2 MT Extra;}{\f18\fmodern\fcharset2\fprq1 MS LineDraw;}{\f19\fdecor\fcharset0\fprq2 Algerian;}{\f20\fswiss\fcharset0\fprq2 Arial Rounded MT Bold;}
{\f21\froman\fcharset0\fprq2 Bookman Old Style;}{\f22\fdecor\fcharset0\fprq2 Braggadocio;}{\f23\fswiss\fcharset0\fprq2 Britannic Bold;}{\f24\fscript\fcharset0\fprq2 Brush Script MT;}{\f25\fswiss\fcharset0\fprq2 Century Gothic;}
{\f26\fdecor\fcharset0\fprq2 Colonna MT;}{\f27\fdecor\fcharset0\fprq2 Desdemona;}{\f28\froman\fcharset0\fprq2 Footlight MT Light;}{\f29\fswiss\fcharset0\fprq2 Impact;}{\f30\fdecor\fcharset0\fprq2 Kino MT;}{\f31\froman\fcharset0\fprq2 Wide Latin;}
{\f32\fscript\fcharset0\fprq2 Matura MT Script Capitals;}{\f33\fdecor\fcharset0\fprq2 Playbill;}{\f34\fswiss\fcharset2\fprq2 WP Phonetic;}{\f35\fnil\fcharset2\fprq2 WP MathExtendedB;}{\f36\fmodern\fcharset0\fprq1 WP BoxDrawing;}
{\f37\fnil\fcharset2\fprq2 WP IconicSymbolsB;}{\f38\fnil\fcharset2\fprq2 WP Greek Helve;}{\f39\fnil\fcharset2\fprq2 WP MathExtendedA;}{\f40\froman\fcharset2\fprq2 WP CyrillicA;}{\f41\fnil\fcharset2\fprq2 WP Japanese;}{\f42\fnil\fcharset2\fprq2 WP MathB;}
{\f43\fnil\fcharset2\fprq2 WP IconicSymbolsA;}{\f44\fnil\fcharset2\fprq2 WP Arabic Sihafa;}{\f45\froman\fcharset2\fprq2 WP MultinationalA Roman;}{\f46\fnil\fcharset0\fprq2 WP CyrillicB;}{\f47\fnil\fcharset2\fprq2 WP MultinationalB Roman;}
{\f48\fmodern\fcharset2\fprq1 WP Greek Courier;}{\f49\fnil\fcharset2\fprq2 WP MathA;}{\f50\fnil\fcharset2\fprq2 WP ArabicScript Sihafa;}{\f51\fnil\fcharset2\fprq2 WP Greek Century;}{\f52\fnil\fcharset2\fprq2 WP TypographicSymbols;}
{\f53\fnil\fcharset2\fprq2 WP Hebrew David;}{\f54\fnil\fcharset2\fprq2 WP MultinationalA Helve;}{\f55\fnil\fcharset2\fprq2 WP MultinationalB Helve;}{\f56\fmodern\fcharset2\fprq1 WP MultinationalA Courier;}
{\f57\fmodern\fcharset2\fprq1 WP MultinationalB Courier;}{\f58\fscript\fcharset0\fprq2 Ribbon131 Bd BT;}{\f59\froman\fcharset0\fprq2 Humanst521 Lt BT;}{\f60\froman\fcharset0\fprq2 GeoSlab703 Lt BT;}{\f61\fswiss\fcharset0\fprq2 Swis721 BlkEx BT;}
{\f62\fswiss\fcharset0\fprq2 Humanst521 Cn BT;}{\f63\fdecor\fcharset0\fprq2 Onyx BT;}{\f64\fdecor\fcharset0\fprq2 CaslonOpnface BT;}{\f65\fswiss\fcharset0\fprq2 EngraversGothic BT;}{\f66\fscript\fcharset0\fprq2 ShelleyVolante BT;}
{\f67\froman\fcharset0\fprq2 BernhardMod BT;}{\f68\froman\fcharset0\fprq2 Arrus BT;}{\f69\fscript\fcharset0\fprq2 OzHandicraft BT;}{\f70\fswiss\fcharset0\fprq2 AvantGarde;}{\f71\froman\fcharset0\fprq2 Bookman;}
{\f72\fswiss\fcharset0\fprq2 Helvetica-Narrow;}{\f73\froman\fcharset0\fprq2 NewCenturySchlbk;}{\f74\froman\fcharset0\fprq2 Palatino;}{\f75\fscript\fcharset0\fprq2 ZapfChancery;}{\f76\fdecor\fcharset2\fprq2 ZapfDingbats;}
{\f77\froman\fcharset255\fprq2 Roman;}{\f78\fscript\fcharset255\fprq2 Script;}{\f79\fmodern\fcharset255\fprq2 Modern;}{\f80\fswiss\fcharset0\fprq1 MS Dialog;}{\f81\fswiss\fcharset0\fprq0 BI Helvetica BoldOblique;}{\f82\fnil\fcharset0\fprq0 AGaramond;}
{\f83\fnil\fcharset0\fprq1 Small Fonts;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;
\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\f5\fs20 \snext0 Normal;}{\s1\sb240\sa60\keepn \b\f5\fs28\kerning28 
\sbasedon0\snext15 heading 1;}{\s2\sb240\sa60\keepn \b\f5 \sbasedon0\snext15 heading 2;}{\s3\sb240\sa60\keepn \b\f5 \sbasedon0\snext15 heading 3;}{\s4\sb240\sa60\keepn \b\f5 \sbasedon0\snext15 heading 4;}{\*\cs10 \additive Default Paragraph Font;}{
\s15\li360\sa60\nowidctlpar \f5\fs20\cf1 \snext15 Body;}{\s16\tqc\tx4320\tqr\tx8640 \f5\fs20 \sbasedon0\snext16 header;}{\s17\li360\sb120\sa40\nowidctlpar \f5\fs20\cf1 \sbasedon29\snext0 Signal Name;}{\s18\fi-360\li720\sa60\nowidctlpar \f5\fs20\cf1 
\sbasedon15\snext18 Body - Bullet;}{\s19\li720\sa60\nowidctlpar \f5\fs20\cf1 \sbasedon30\snext17 Signal Text;}{\s20\fi-360\li720\sa60\nowidctlpar{\*\pn \pnlvl12\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\f5\fs20\cf1 \sbasedon15\snext20 
Body - Indent;}{\s21\fi-360\li720\sa60\nowidctlpar{\*\pn \pnlvl10\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}\f5\fs20\cf1 \sbasedon20\snext21 Instructions;}{\s22\tqc\tx4320\tqr\tx8640 \f5\fs20 \sbasedon0\snext22 footer;}{\*\cs23 \additive\f5 
\sbasedon10 page number;}{\s24\sa144\keep \f81\fs36\cf1 \sbasedon0\snext0 Header 2;}{\s25\ri432\sb40\sa40 \b\f5\fs20 \sbasedon28\snext25 Platform;}{\s26\fi-360\li720\sa60\nowidctlpar\tx360\tx1224\tx1440 \f5\fs20\cf1 \sbasedon18\snext26 Body - Left;}{
\s27\ri432\sb40\sa40 \b\f5\fs20 \sbasedon25\snext27 ALM;}{\s28\ri432\sb40\sa40 \b\f5\fs20 \sbasedon0\snext15 Action;}{\s29\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 \sbasedon15\snext0 Flow Name;}{\s30\li720\sa60\nowidctlpar \f5\fs20\cf1 
\sbasedon15\snext29 Flow Text;}{\s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 \sbasedon29\snext0 Input Name;}{\s32\li720\sa60\nowidctlpar \f5\fs20\cf1 \sbasedon30\snext31 Input Text;}{\s33\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 \sbasedon29\snext0 
Output Name;}{\s34\li720\sa60\nowidctlpar \f5\fs20\cf1 \sbasedon30\snext33 Output Text;}{\s35\sb40\sa40 \b\f5\fs20 \sbasedon28\snext35 Usage;}{\s36\sb240\sa60 \b\f5\fs20 \sbasedon35\snext36 Caution;}{\*\cs37 \additive\f5\super \sbasedon10 
endnote reference;}{\s38\ri432\sb40\sa40 \b\f5\fs20 \sbasedon28\snext38 Flows;}{\*\cs39 \additive\f5\fs16\up6 \sbasedon10 footnote reference;}{\s40 \f5\fs20 \sbasedon0\snext40 footnote text;}{\s41\sb80 \f11 \sbasedon0\snext0 Function Syntax;}{\s42 \b\f5 
\sbasedon0\snext0 Help Popup Heading;}{\s43 \b\f5 \sbasedon0\snext43 Help See Also;}{\s44\sb20\sa40 \b\f5 \sbasedon0\snext0 Help Topic Heading;}{\s45\li360\sa100 \b\f5\fs20 \sbasedon0\snext45 HelpBreeze TOC;}{\s46\li360\ri20 \f5\fs20 \sbasedon0\snext0 
hlpbrz_toc;}{\s47\sb40\sa40 \b\f5\fs20 \sbasedon28\snext47 Input Parameters;}{\s48\sb20\sa40\tx720\tx1260 \b\f5\fs32 \sbasedon44\snext48 new 2;}{\s49\ri432\sb40\sa40 \b\f5\fs20 \sbasedon28\snext49 Output Parameters;}{
\s50\li720\ri720\tldot\tx8280\tqr\tx8640 \f5\fs20\cf8 \sbasedon0\snext0 toc 2;}{\s51\li1400\tqr\tldot\tx8640 \f5\fs20 \sbasedon0\snext0 toc 8;}{\s52\sa60\tx720\tx1260 \b\f5\fs20 \sbasedon0\snext0 Topic Section;}{\s53\sa120\tx2880 \f5\fs16 
\sbasedon0\snext53 Topic Wizard Line 2;}{\s54\li360 \b\f5\fs20\uldb\cf11 \sbasedon45\snext54 Function Table;}{\s55 \f5\fs10 \sbasedon0\snext55 Space After;}}{\info{\title Introduction to the XXX ALM:}{\author Kathy Schofield}
{\doccomm <project = o:\\help\\text\\awustext.hpj>}{\operator Kathy Schofield}{\creatim\yr1995\mo8\dy10\hr17\min22}{\revtim\yr1995\mo8\dy10\hr17\min22}{\version3}{\edmins31}{\nofpages51}{\nofwords6580}{\nofchars37507}{\vern49203}}
\widowctrl\ftnbj\aenddoc\linkstyles\formshade \fet0{\*\template C:\\WINWORD\\TEMPLATE\\hlpbrz6.dot}\sectd \linex0\endnhere {\header \pard\plain \s16\tqc\tx4320\tqr\tx8640 \f5\fs20 {\field{\*\fldinst {\cs23  DATE  \\l }}{\fldrslt {\cs23 5/2/95}}}{\cs23 
\tab \tab }{\field{\*\fldinst {\cs23  TIME }}{\fldrslt {\cs23 6:08 PM}}}
\par }{\footer \pard\plain \s22\qc\tqc\tx4320\tqr\tx8640 \f5\fs20 {\field{\*\fldinst {\cs23  PAGE }}{\fldrslt {\cs23 10}}}
\par }{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5
\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang
{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \s44\sb20\sa40\keepn \b\f5 {\cs39\fs16\up6 #{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_contents}}{\*\bkmkstart idx_contents}
{\*\bkmkend idx_contents} {\cs39\fs16\up6 ${\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 $} Text ALM Contents}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 K} Contents}} {\cs39\fs16\up6 !{\footnote \pard\plain \s40 
\f5\fs20 {\cs39\fs16\up6 !}  DB(`btn_up')}} Contents
\par \pard\plain \s45\li360\sa100 \b\f5\fs20 
\par {\uldb\cf11 Introduction to the Text ALM}{\v idx_introduction_to_the_text_alm}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1 
 ADDIN }{\cf1 {\*\datafield 6964785f696e74726f64756374696f6e5f746f5f7468655f746578745f616c6d}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par {\uldb\cf11 Editing the Text Object}{\v idx_editing_the_text_object}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{
\cf1 {\*\datafield 6964785f65646974696e675f7468655f746578745f6f626a656374}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par {\uldb\cf11 Text Object Signals}{\v idx_text_object_signals}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 
{\*\datafield 6964785f746578745f6f626a6563745f7369676e616c73}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par {\uldb\cf11 Text Functions}{\v idx_text_alm_functions}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 
{\*\datafield 6964785f746578745f616c6d5f66756e6374696f6e73}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \pard\plain \s44\sb20\sa40\keepn \b\f5 \page {\cs39\fs16\up6 {\*\bkmkstart idx_introduction_to_the_text_alm}{\*\bkmkend idx_introduction_to_the_text_alm}#{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_introduction_to_the_text_alm}} {
\cs39\fs16\up6 +{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 +} top1:0005}} {\cs39\fs16\up6 ${\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 $} Introduction to the Text ALM}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {
\cs39\fs16\up6 K} Introduction to the Text ALM}} {\cs39\fs16\up6 !{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 !}  EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_contents')')}} Introduction
\par \pard\plain \s45\li360\sa100\keepn \b\f5\fs20 {\uldb\cf11 Object Editing}{\v  idx_editing_the_text_object}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f65646974696e675f7468655f746578745f6f626a656374}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}\tab \tab {\uldb\cf11 Signals}{\v 
 idx_text_object_signals}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 
6964785f746578745f6f626a6563745f7369676e616c73}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}\tab \tab {\uldb\cf11 Functions}{\v  idx_text_alm_functions}{\field\flddirty{\*\fldinst  macrobutton NextField 
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f746578745f616c6d5f66756e6374696f6e73}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1 
 macrobutton NextField }}{\fldrslt }}
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s25\ri432\sb40\sa40 \b\f5\fs20 Windows
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 
The Text object is used to display, edit, and manipulate text. You can pass Text objects to Date, Number, and Time functions. You can also pass Date, Number, and Time objects to Text functions. If a connection to or from a Text object makes no sense, you'
ll be prevented from making it.
\par One Text object stores approximately 32,000 characters. If you like, you can display the contents of a Text object by placing the object in a window. 
\par The Text object allows you to manipulate text in basic, high-level ways, so it is similar to the Number object. If you are using the Text object for long, complicated, or repetitive operations, you might have to design your own Text functions so you can g
et acceptable performance from your application. Custom functions are created in a lower-level language such as C or C++. 
\par \pard \s15\li360\sa60\nowidctlpar Since the performance
 of each application varies, you must decide whether you need custom functions to improve performance. Consider creating a custom function if a given operation uses several hundred Text functions, or if a loop with a sequence of Text functions repeats mor
e than 100 times.
\par \pard\plain \s25\ri432\sb40\sa40 \b\f5\fs20 Macintosh
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 
If you don't display text in a window, it can be as long as you want. The only limitation is the size of your application's memory partition. However, you'll notice a delay in how fast you can display or edit a large section of t
ext in the editing dialog. 
\par \pard\plain \s44\sb20\sa40\keepn \b\f5 \page {\cs39\fs16\up6 {\*\bkmkstart idx_editing_the_text_object}{\*\bkmkend idx_editing_the_text_object}#{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_editing_the_text_object}} {\cs39\fs16\up6 +
{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 +} top1:0010}} {\cs39\fs16\up6 ${\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 $} List of,}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 K} Editing the Text Object}} {
\cs39\fs16\up6 !{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 !}  EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_contents')')}} Editing the Text Object
\par \pard\plain \s45\li360\sa100 \b\f5\fs20 
\par {\uldb\cf11 Entering Default Text}{\v idx_entering_default_text}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 
{\*\datafield 6964785f656e746572696e675f64656661756c745f74657874}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par {\uldb\cf11 Specifying Size Options}{\v idx_specifying_size_options}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{
\cf1 {\*\datafield 6964785f73706563696679696e675f73697a655f6f7074696f6e73}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par {\uldb\cf11 Specifying Case (Windows)}{\v idx_specifying_case__windows}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN 
}{\cf1 {\*\datafield 6964785f73706563696679696e675f636173655f5f77696e646f7773}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par {\uldb\cf11 Specifying a Type}{\v idx_specifying_a_type}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 
{\*\datafield 6964785f73706563696679696e675f615f74797065}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par {\uldb\cf11 Setting Style Options (Windows)}{\v idx_setting_style_options__windows}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {
\cf1  ADDIN }{\cf1 {\*\datafield 6964785f73657474696e675f7374796c655f6f7074696f6e735f5f77696e646f7773}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par {\uldb\cf11 Specifying Justification}{\v idx_specifying_justification}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }
{\cf1 {\*\datafield 6964785f73706563696679696e675f6a757374696669636174696f6e}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par {\uldb\cf11 Setting Attributes}{\v idx_setting_attributes}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 
{\*\datafield 6964785f73657474696e675f61747472696275746573}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \pard\plain \s44\sb20\sa40\keepn \b\f5 \page {\cs39\fs16\up6 {\*\bkmkstart idx_entering_default_text}{\*\bkmkend idx_entering_default_text}#{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_entering_default_text}} {\cs39\fs16\up6 ${\footnote 
\pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 $} Entering Default Text}} {\cs39\fs16\up6 +{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 +} brws3:0000}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 K} Editing the Text Object}} {
\cs39\fs16\up6 !{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 !}  EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_editing_the_text_object')')}} Entering Default Text
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s25\ri432\sb40\sa40 \b\f5\fs20 Windows
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 To enter default text, type it in the Value
 field. An object's default value becomes a permanent part of the application during compilation. A compiled application initializes the object with the default value whenever the application starts up. 
\par To save information from a previous session, either make the object persistent or use some other object, such as Database or File, to save the object's contents in a separate file. At run time, you can either restore the object fro
m a file or use any of several functions to pass a new value to the object.
\par To enter return characters in the editing dialog, hold down the Ctrl key as you press Enter.
\par \pard\plain \s25\ri432\sb40\sa40 \b\f5\fs20 Macintosh
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 For Macintosh, the Ctrl key corresponds to the Control key. 
\par \pard\plain \s44\sb20\sa40\keepn \b\f5 \page {\cs39\fs16\up6 {\*\bkmkstart idx_specifying_size_options}{\*\bkmkend idx_specifying_size_options}#{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_specifying_size_options}} {\cs39\fs16\up6 $
{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 $} Specifying Size Options}} {\cs39\fs16\up6 +{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 +} brws3:0005}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 K}
 Editing the Text Object}} {\cs39\fs16\up6 !{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 !}  EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_editing_the_text_object')')}} Specifying Size Options
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s25\ri432\sb40\sa40 \b\f5\fs20 Windows
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 There are two size options to be set: Limit and Tab Width. 
\par \pard\plain \s21\fi-360\li720\sa60\nowidctlpar\tx360 \f5\fs20\cf1 {\cf0 1.\tab Enter a value in the Limit field.
\par {\pntext\tab}}\pard\plain \s20\fi-360\li720\sa60\nowidctlpar{\*\pn \pnlvlcont\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\f5\fs20\cf1 The value is a maximum that limits the number of characters a user can enter. 
\par \pard\plain \s21\fi-360\li720\sa60\nowidctlpar\tx360 \f5\fs20\cf1 {\cf0 2.\tab Enter a value in the Tab Width field. 
\par {\pntext\tab}}\pard\plain \s20\fi-360\li720\sa60\nowidctlpar{\*\pn \pnlvlcont\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\f5\fs20\cf1 The value is the number of spaces between tabs.
\par \pard\plain \s25\ri432\sb40\sa40 \b\f5\fs20 Macintosh
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 For Macintosh, there is no Tab Width field.
\par \pard\plain \s44\sb20\sa40\keepn \b\f5 \page {\cs39\fs16\up6 {\*\bkmkstart idx_specifying_case__windows}{\*\bkmkend idx_specifying_case__windows}#{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_specifying_case__windows}} {\cs39\fs16\up6 $
{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 $} Specifying Case (Windows)}} {\cs39\fs16\up6 +{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 +} brws3:0010}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 K}
 Editing the Text Object}} {\cs39\fs16\up6 !{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 !}  EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_editing_the_text_object')')}} Specifying Case (Windows)
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 
Although the Text object displays both uppercase and lowercase text by default, the Case box allows you to display and store text in just one or the other. If you want to display and store only one case, select either the Uppercase or the Lowercase radio 
button. To preserve the case of the text as it was entered, select Mixed Case.
\par \pard\plain \s44\sb20\sa40\keepn \b\f5 \page {\cs39\fs16\up6 {\*\bkmkstart idx_specifying_a_type}{\*\bkmkend idx_specifying_a_type}#{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_specifying_a_type}} {\cs39\fs16\up6 ${\footnote \pard\plain 
\s40 \f5\fs20 {\cs39\fs16\up6 $} Specifying a Type}} {\cs39\fs16\up6 +{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 +} brws3:0015}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 K} Editing the Text Object}} {\cs39\fs16\up6 !
{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 !}  EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_editing_the_text_object')')}} Specifying a Type
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s25\ri432\sb40\sa40 \b\f5\fs20 Windows
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 The Type box specifies whether a Text object allows multiline, single line, or static displays at design time or run time. A multiline display allows the entry of carriage returns and a single 
line display does not. A static display is used for text in an uneditable field that you want to display at run time. 
\par The contents of the Options box are affected by your choice of multiline, single line, or static. Each of the three radio buttons has a separate list of style options associated with it. If you click Multiline or Static, you can also set
 how you want the text to be justified in the Align box. To set the text type, select the appropriate radio button.
\par \pard\plain \s25\ri432\sb40\sa40 \b\f5\fs20 Macintosh
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 The Macintosh does not have a Type box. However, the Multiline checkbox allows you to specify a multiline display for the Text object at design time or run time.
\par \pard\plain \s44\sb20\sa40\keepn \b\f5 \page {\cs39\fs16\up6 {\*\bkmkstart idx_setting_style_options__windows}{\*\bkmkend idx_setting_style_options__windows}#{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_setting_style_options__windows}} {
\cs39\fs16\up6 ${\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 $} Setting Style Options (Windows)}} {\cs39\fs16\up6 +{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 +} brws3:0020}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {
\cs39\fs16\up6 K} Editing the Text Object}} {\cs39\fs16\up6 !{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 !}  EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_editing_the_text_object')')}} Setting Style Options (Windows)
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 The style options displayed in the Style box depend on which option you select in the Type box. The following style options are available for Multiline text:
\par \pard\plain \s21\fi-360\li720\sa60\nowidctlpar\tx360 \f5\fs20\cf1 {\cf0 Border
\par {\pntext\tab}}\pard\plain \s20\fi-360\li720\sa60\nowidctlpar{\*\pn \pnlvlcont\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\f5\fs20\cf1 Editable and noneditable texts can both have a frame.
\par \pard\plain \s21\fi-360\li720\sa60\nowidctlpar\tx360 \f5\fs20\cf1 {\cf0 Editable
\par {\pntext\tab}}\pard\plain \s20\fi-360\li720\sa60\nowidctlpar{\*\pn \pnlvlcont\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\f5\fs20\cf1 
Text is a field object, so you can set it as editable or noneditable. Only the application can change noneditable text at run time. 
\par \pard\plain \s21\fi-360\li720\sa60\nowidctlpar\tx360 \f5\fs20\cf1 {\cf0 Horizontal and Vertical Scrollbars
\par {\pntext\tab}}\pard\plain \s20\fi-360\li720\sa60\nowidctlpar{\*\pn \pnlvlcont\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\f5\fs20\cf1 
Editable and noneditable text fields can both have scroll bars. Use the arrow keys to navigate through editable, nonscrolling fields. 
\par \pard\plain \s21\fi-360\li720\sa60\nowidctlpar\tx360 \f5\fs20\cf1 {\cf0 Select All When Activated
\par {\pntext\tab}}\pard\plain \s20\fi-360\li720\sa60\nowidctlpar{\*\pn \pnlvlcont\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\f5\fs20\cf1 This checkbox controls whether an item's entire contents are selected if the item is activated. 
\par \pard\plain \s21\fi-360\li720\sa60\nowidctlpar\tx360 \f5\fs20\cf1 {\cf0 Always Show Selection
\par {\pntext\tab}}\pard\plain \s20\fi-360\li720\sa60\nowidctlpar{\*\pn \pnlvlcont\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\f5\fs20\cf1 This checkbox controls whether the selection in the text field will be visible even if the field is not active.

\par \pard\plain \s21\fi-360\li720\sa60\nowidctlpar\tx360 \f5\fs20\cf1 {\cf0 Uses Enter at Runtime
\par {\pntext\tab}}\pard\plain \s20\fi-360\li720\sa60\nowidctlpar{\*\pn \pnlvlcont\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\f5\fs20\cf1 
If this option is selected, a user can create carriage returns in the text field by using the Enter key instead of pressing the default button with the Enter key. If this option is deselected, a user can simulate the Enter key by pressing Ctrl-Enter.

\par \pard\plain \s21\fi-360\li720\sa60\nowidctlpar\tx360 \f5\fs20\cf1 {\cf0 Uses Tab at Runtime
\par {\pntext\tab}}\pard\plain \s20\fi-360\li720\sa60\nowidctlpar{\*\pn \pnlvlcont\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\f5\fs20\cf1 If this checkbox is selected, a user can enter Tab characters in the text field. However, the user will {\i not }
be able to use the Tab key to move from field to field. 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 If you select the Single Line option in the Type box, the style options are:
\par \pard\plain \s18\fi-360\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cf0 Border
\par Editable
\par Select All When Activated
\par Always Show Selection
\par Password
\par }\pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 
The only new option in this list is the Password checkbox. Select the Password checkbox to replace on-screen text with asterisks. If the checkbox is selected and a user enters text in the password field, the text is displayed as a series of asterisks, not
 characters. 
\par If you select the Static option in the Type box, the only style option is Border and Background. Border and Background places a frame around the static text and allows you to set the background color within the frame. (T
he background color is set in the Font dialog.) 
\par If you do not set this option, the static text will not be framed and will have the default background color. For example, if the font color was black and the default background color was gray, the unframed black text would be placed on a gray background.

\par \pard\plain \s44\sb20\sa40\keepn \b\f5 \page {\cs39\fs16\up6 {\*\bkmkstart idx_specifying_justification}{\*\bkmkend idx_specifying_justification}#{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_specifying_justification}} {\cs39\fs16\up6 $
{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 $} Specifying Justification}} {\cs39\fs16\up6 +{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 +} brws3:0030}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 K}
 Editing the Text Object}} {\cs39\fs16\up6 !{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 !}  EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_editing_the_text_object')')}} Specifying Justification
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s25\ri432\sb40\sa40 \b\f5\fs20 Windows
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 A choice in justification is available if you select the Multiline or the Static radio button. The Align
 box allows you to decide whether text will be justified to the left, right, or center. To make a selection, click the appropriate radio button.
\par \pard\plain \s25\ri432\sb40\sa40 \b\f5\fs20 Macintosh
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 For Macintosh, the choices are static or multiline and the default is static. Either choice can have justified text.
\par \pard\plain \s44\sb20\sa40\keepn \b\f5 \page {\cs39\fs16\up6 {\*\bkmkstart idx_setting_attributes}{\*\bkmkend idx_setting_attributes}#{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_setting_attributes}} {\cs39\fs16\up6 ${\footnote \pard\plain 
\s40 \f5\fs20 {\cs39\fs16\up6 $} Setting Attributes}} {\cs39\fs16\up6 +{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 +} brws3:0035}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 K} Editing the Text Object}} {\cs39\fs16\up6 
!{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 !}  EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_editing_the_text_object')')}} Setting Attributes
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s25\ri432\sb40\sa40 \b\f5\fs20 Windows
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 To set the textual attributes of the Text object, click the Font button. The Font dialog allows you to select attributes such as font, style, size, and color.
\par \pard\plain \s25\ri432\sb40\sa40 \b\f5\fs20 Macintosh
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 For Macintosh, the equivalent to the Font
 dialog is the Appearance box. It allows you to specify the font, style, and size; the justification, and whether the text will be framed. It also has a button named Color that opens a standard color wheel. The color wheel allows you to change the color o
f the text. These work essentially the same as their equivalents for the Windows interface. 
\par \pard\plain \s44\sb20\sa40\keepn \b\f5 \page {\cs39\fs16\up6 {\*\bkmkstart idx_text_object_signals}{\*\bkmkend idx_text_object_signals}#{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_text_object_signals}} {\cs39\fs16\up6 +{\footnote 
\pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 +} top1:0015}} {\cs39\fs16\up6 ${\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 $} Text Object Signals}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 K} Text Object Signals}} {
\cs39\fs16\up6 !{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 !}  EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_contents')')}} Text Object Signals
\par \pard\plain \s17\li360\sb120\sa40\nowidctlpar \f5\fs20\cf1 Changed
\par \pard\plain \s19\li720\sa60\nowidctlpar \f5\fs20\cf1 Issued when the text or its appearance is altered by an application or a user.
\par \pard\plain \s17\li360\sb120\sa40\nowidctlpar \f5\fs20\cf1 Edited
\par \pard\plain \s19\li720\sa60\nowidctlpar \f5\fs20\cf1 Issued when a user types in the text field. It is only issued for editable text.
\par \pard\plain \s17\li360\sb120\sa40\nowidctlpar \f5\fs20\cf1 Activated
\par \pard\plain \s19\li720\sa60\nowidctlpar \f5\fs20\cf1 Issued when a user tabs into or clicks in the text field, or when the field is activated by the {\uldb\cf11 Activate Item}{\v\cf0 idx_activate_item@awuswnd.hlp}{\field{\*\fldinst {\cf0 
 macrobutton NextField }}{\fldrslt }}{\field{\*\fldinst  {\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field{\*\fldinst  ADDIN {{\*\datafield 6964785f61637469766174655f6974656d5f616c6d5f77696e6f5f686c70}}}{\fldrslt }}{\field{\*\fldinst 
 macrobutton NextField }{\fldrslt }}{\cf0  }function. It is only issued for editable text.
\par \pard\plain \s17\li360\sb120\sa40\nowidctlpar \f5\fs20\cf1 Deactivated
\par \pard\plain \s19\li720\sa60\nowidctlpar \f5\fs20\cf1 Issued when a user tabs out of the text field or clicks in another field, or when another field is activated by the {\uldb\cf11 Activate Item}{\v\cf0 idx_activate_item@awuswnd.hlp}{\field{\*\fldinst {
\cf0  macrobutton NextField }}{\fldrslt }}{\field{\*\fldinst  {\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field{\*\fldinst  ADDIN {{\*\datafield 6964785f61637469766174655f6974656d5f616c6d5f77696e6f5f686c70}}}{\fldrslt }}{\field{\*\fldinst 
 macrobutton NextField }{\fldrslt }}{\cf0  }function. It is only issued for editable text.
\par \pard\plain \s17\li360\sb120\sa40\nowidctlpar \f5\fs20\cf1 Too Long
\par \pard\plain \s19\li720\sa60\nowidctlpar \f5\fs20\cf1 Issued when the number of characters that a user tries to type or pass is more than the number specified in the {\uldb\cf11 Limit}{\v\cf0 idx_specifying_size_options}{\field{\*\fldinst {\cf0 
 macrobutton NextField }}{\fldrslt }}{\field{\*\fldinst  {\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field{\*\fldinst  ADDIN {{\*\datafield 6964785f73706563696679696e675f73697a655f6f7074696f6e73}}}{\fldrslt }}{\field{\*\fldinst  macrobutton NextField 
}{\fldrslt }}{\cf0  }field.
\par \pard\plain \s17\li360\sb120\sa40\nowidctlpar \f5\fs20\cf1 Enter Key
\par \pard\plain \s19\li720\sa60\nowidctlpar \f5\fs20\cf1 Issued when a user presses the Enter key. It is only issued for editable text. This signal is called Return/Enter key on the Macintosh.
\par \pard\plain \s44\sb20\sa40\keepn \b\f5 \page {\cs39\fs16\up6 {\*\bkmkstart idx_text_alm_functions}{\*\bkmkend idx_text_alm_functions}#{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_text_alm_functions}} {\cs39\fs16\up6 +{\footnote \pard\plain 
\s40 \f5\fs20 {\cs39\fs16\up6 +} top1:0020}} {\cs39\fs16\up6 ${\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 $} List of,}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 K} Text Functions}} {\cs39\fs16\up6 !{\footnote 
\pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 !}  EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_contents')')}} Text Functions
\par \pard\plain \s45\li360\sa100 \b\f5\fs20 
\par \trowd \trqc\trkeep \cellx2592\cellx5184 \pard\plain \s54\li360\intbl \b\f5\fs20\uldb\cf11 \{bmc graphics\\i_txar.bmp\}{\v idx_append_return}{\field\flddirty{\*\fldinst {\b0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\b0\cf1  }{
\b0\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\b0\ulnone\cf1   }Append Return{\v idx_append_return}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f617070656e645f72657475726e}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \cell \{bmc graphics\\i_txxt.bmp\}{\v idx_intersect_text}{\field\flddirty{\*\fldinst {\b0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\b0\cf1  }{\b0\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\b0\ulnone\cf1   }Intersect Text{\v 
idx_intersect_text}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 
6964785f696e746572736563745f74657874}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \cell \pard\plain \intbl \f5\fs20 \row \trowd \trqc\trkeep \cellx2592\cellx5184 \pard\plain \s54\li360\intbl \b\f5\fs20\uldb\cf11 \{bmc graphics\\i_txat.bmp\}{\v idx_append_tab}{\field\flddirty{\*\fldinst {\b0  macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\b0\cf1  }{\b0\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\b0\ulnone\cf1   }Append Tab{\v idx_append_tab}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 
macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f617070656e645f746162}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \cell \{bmc graphics\\i_txls.bmp\}{\v idx_left_text}{\field\flddirty{\*\fldinst {\b0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\b0\cf1  }{\b0\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\b0\ulnone\cf1   }Left Text{\v idx_left_text}
{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f6c6566745f74657874}}}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \cell \pard\plain \intbl \f5\fs20 \row \pard\plain \s54\li360\intbl \b\f5\fs20\uldb\cf11 \{bmc graphics\\i_txcl.bmp\}{\v idx_clear_text}{\field\flddirty{\*\fldinst {\b0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\b0\cf1  }{\b0\cf6 
macrobutton DoJump2 <+>}}{\fldrslt }}{\b0\ulnone\cf1   }Clear Text{\v idx_clear_text}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f636c6561725f74657874}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \cell \{bmc graphics\\i_txlt.bmp\}{\v idx_load_text_file}{\field\flddirty{\*\fldinst {\b0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\b0\cf1  }{\b0\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\b0\ulnone\cf1   }Load Text File{\v 
idx_load_text_file}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 
6964785f6c6f61645f746578745f66696c65}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \cell \pard\plain \intbl \f5\fs20 \row \pard\plain \s54\li360\intbl \b\f5\fs20\uldb\cf11 \{bmc graphics\\i_txcm.bmp\}{\v idx_compare_text}{\field\flddirty{\*\fldinst {\b0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\b0\cf1  }{
\b0\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\b0\ulnone\cf1   }Compare Text{\v idx_compare_text}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f636f6d706172655f74657874}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \cell \{bmc graphics\\i_txun.bmp\}{\v idx_merge_text}{\field\flddirty{\*\fldinst {\b0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\b0\cf1  }{\b0\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\b0\ulnone\cf1   }Merge Text{\v idx_merge_text
}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f6d657267655f74657874}}}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \cell \pard\plain \intbl \f5\fs20 \row \pard\plain \s54\li360\intbl \b\f5\fs20\uldb\cf11 \{bmc graphics\\i_txcn.bmp\}{\v idx_concatenate}{\field\flddirty{\*\fldinst {\b0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\b0\cf1  }{\b0\cf6 
macrobutton DoJump2 <+>}}{\fldrslt }}{\b0\ulnone\cf1   }Concatenate{\v idx_concatenate}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f636f6e636174656e617465}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \cell \{bmc graphics\\i_txms.bmp\}{\v idx_mid_text}{\field\flddirty{\*\fldinst {\b0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\b0\cf1  }{\b0\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\b0\ulnone\cf1   }Mid Text{\v idx_mid_text}
{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f6d69645f74657874}}}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \cell \pard\plain \intbl \f5\fs20 \row \pard\plain \s54\li360\intbl \b\f5\fs20\uldb\cf11 \{bmc graphics\\i_txfr.bmp\}{\v idx_find_replace}{\field\flddirty{\*\fldinst {\b0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\b0\cf1  }{
\b0\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\b0\ulnone\cf1   }Find-Replace{\v idx_find_replace}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f66696e645f7265706c616365}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \cell \{bmc graphics\\i_txom.bmp\}{\v idx_omit_text}{\field\flddirty{\*\fldinst {\b0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\b0\cf1  }{\b0\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\b0\ulnone\cf1   }Omit Text{\v idx_omit_text}
{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f6f6d69745f74657874}}}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \cell \pard\plain \intbl \f5\fs20 \row \pard\plain \s54\li360\intbl \b\f5\fs20\uldb\cf11 \{bmc graphics\\i_txgf.bmp\}{\v idx_get_field}{\field\flddirty{\*\fldinst {\b0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\b0\cf1  }{\b0\cf6 
macrobutton DoJump2 <+>}}{\fldrslt }}{\b0\ulnone\cf1   }Get Field{\v idx_get_field}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {
\cf1  ADDIN }{\cf1 {\*\datafield 6964785f6765745f6669656c64}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \cell \{bmc graphics\\i_txrs.bmp\}{\v idx_right_text}{\field\flddirty{\*\fldinst {\b0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\b0\cf1  }{\b0\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\b0\ulnone\cf1   }Right Text{\v idx_right_text
}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f72696768745f74657874}}}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \cell \pard\plain \intbl \f5\fs20 \row \pard\plain \s54\li360\intbl \b\f5\fs20\uldb\cf11 \{bmc graphics\\i_txgl.bmp\}{\v idx_get_line}{\field\flddirty{\*\fldinst {\b0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\b0\cf1  }{\b0\cf6 
macrobutton DoJump2 <+>}}{\fldrslt }}{\b0\ulnone\cf1   }Get Line{\v idx_get_line}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {
\cf1  ADDIN }{\cf1 {\*\datafield 6964785f6765745f6c696e65}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \cell \{bmc graphics\\i_txst.bmp\}{\v idx_save_text_file}{\field\flddirty{\*\fldinst {\b0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\b0\cf1  }{\b0\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\b0\ulnone\cf1   }Save Text File{\v 
idx_save_text_file}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 
6964785f736176655f746578745f66696c65}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \cell \pard\plain \intbl \f5\fs20 {\b \row }\pard\plain \s54\li360\intbl \b\f5\fs20\uldb\cf11 \{bmc graphics\\i_txgn.bmp\}{\v idx_get_number}{\field\flddirty{\*\fldinst {\b0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\b0\cf1  }{
\b0\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\b0\ulnone\cf1   }Get Number{\v idx_get_number}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f6765745f6e756d626572}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \cell \{bmc graphics\\i_txfs.bmp\}{\v idx_text_font_size}{\field\flddirty{\*\fldinst {\b0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\b0\cf1  }{\b0\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\b0\ulnone\cf1   }Text Font Size{\v 
idx_text_font_size}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 
6964785f746578745f666f6e745f73697a65}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \cell \pard\plain \intbl \f5\fs20 \row \pard\plain \s54\li360\intbl \b\f5\fs20\uldb\cf11 \{bmc graphics\\i_txgw.bmp\}{\v idx_get_word}{\field\flddirty{\*\fldinst {\b0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\b0\cf1  }{\b0\cf6 
macrobutton DoJump2 <+>}}{\fldrslt }}{\b0\ulnone\cf1   }Get Word{\v idx_get_word}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {
\cf1  ADDIN }{\cf1 {\*\datafield 6964785f6765745f776f7264}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \cell \{bmc graphics\\i_txln.bmp\}{\v idx_text_length}{\field\flddirty{\*\fldinst {\b0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\b0\cf1  }{\b0\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\b0\ulnone\cf1   }Text Length{\v 
idx_text_length}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f746578745f6c656e677468}}
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \cell \pard\plain \intbl \f5\fs20 {\b \row }\trowd \trqc\trkeep \cellx2592\cellx5184 \pard\plain \s54\li360\intbl \b\f5\fs20\uldb\cf11 \{bmc graphics\\i_txit.bmp\}{\v idx_insert_text}{\field\flddirty{\*\fldinst {\b0  macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\b0\cf1  }{\b0\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\b0\ulnone\cf1   }Insert Text{\v idx_insert_text}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 
macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f696e736572745f74657874}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \cell \{bmc graphics\\i_txuc.bmp\}{\v idx_uppercase}{\field\flddirty{\*\fldinst {\b0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\b0\cf1  }{\b0\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\b0\ulnone\cf1   }Uppercase{\v idx_uppercase}
{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f757070657263617365}}}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \cell \pard\plain \intbl \f5\fs20 \row \pard\plain \s44\sb20\sa40\keepn \b\f5 \page {\cs39\fs16\up6 {\*\bkmkstart idx_append_return}{\*\bkmkend idx_append_return}#{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_append_return}} {\cs39\fs16\up6 
${\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 $} Parameters & Flows}} {\cs39\fs16\up6 +{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 +} brws4:0000}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 K} Append Return}} {
\cs39\fs16\up6 !{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 !}  EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_text_alm_functions')')}} Append Return
\par \pard\plain \s45\li360\sa100\keepn \b\f5\fs20 Text ALM
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Adds a return character to the end of a specified Text object.
\par }
\par \pard\plain \s45\li360\sa100 \b\f5\fs20 {\cf5 \{bmc graphics\\f_txar.bmp\}}{\cf1  }
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 
\par }\pard\plain \s47\sb40\sa40 \b\f5\fs20 {\cchs256 Input Parameters
\par }\pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Text}\tab (Text/Required){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Identifies the Text object} whose contents are to be modified{\cchs256 .
\par }\pard\plain \s38\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Flows
\par }\pard\plain \s29\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Done
\par }\pard\plain \s30\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed after the return }has been{\cchs256  appended.}
\par \pard\plain \s44\sb20\sa40\keepn \b\f5 \page {\cs39\fs16\up6 {\*\bkmkstart idx_append_tab}{\*\bkmkend idx_append_tab}#{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_append_tab}} {\cs39\fs16\up6 ${\footnote \pard\plain \s40 \f5\fs20 {
\cs39\fs16\up6 $} Parameters & Flows}} {\cs39\fs16\up6 +{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 +} brws4:0005}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 K} Append Tab}} {\cs39\fs16\up6 !{\footnote \pard\plain 
\s40 \f5\fs20 {\cs39\fs16\up6 !}  EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_text_alm_functions')')}} Append Tab
\par \pard\plain \s45\li360\sa100\keepn \b\f5\fs20 Text ALM{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f616374696f6e5f617070656e645f746162}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Adds a tab character to the end of a specified Text object.
\par }
\par \pard\plain \s45\li360\sa100 \b\f5\fs20 {\cf5 \{bmc graphics\\f_txat.bmp\}}{\cf1  }
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 
\par }\pard\plain \s47\sb40\sa40 \b\f5\fs20 {\cchs256 Input Parameters
\par }\pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Text}\tab (Text/Required){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Identifies the Text object} whose contents are to be modified{\cchs256 . Type: Text (Required).
\par }\pard\plain \s38\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Flows
\par }\pard\plain \s29\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Done
\par }\pard\plain \s30\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed after the tab }has been{\cchs256  appended.}
\par \pard\plain \s44\sb20\sa40\keepn \b\f5 \page {\cs39\fs16\up6 {\*\bkmkstart idx_clear_text}{\*\bkmkend idx_clear_text}#{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_clear_text}} {\cs39\fs16\up6 ${\footnote \pard\plain \s40 \f5\fs20 {
\cs39\fs16\up6 $} Parameters & Flows}} {\cs39\fs16\up6 +{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 +} brws4:0010}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 K} Clear Text}} {\cs39\fs16\up6 !{\footnote \pard\plain 
\s40 \f5\fs20 {\cs39\fs16\up6 !}  EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_text_alm_functions')')}} Clear Text
\par \pard\plain \s45\li360\sa100\keepn \b\f5\fs20 Text ALM{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f616374696f6e5f636c6561725f74657874}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}\tab \tab {
\uldb\cf11 Usage}{\v  idx_usage_clear_text}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 
6964785f75736167655f636c6561725f74657874}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Clears }all or {\cchs256 part of a specified Text object.}
\par 
\par \pard\plain \s45\li360\sa100 \b\f5\fs20 {\cf5 \{bmc graphics\\f_txcl.bmp\}}{\cf1  }
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 
\par }\pard\plain \s47\sb40\sa40 \b\f5\fs20 {\cchs256 Input Parameters}
\par \pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Text}\tab (Text/Required){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Identifies the Text object }whose contents are {\cchs256 to }be {\cchs256 clear}ed{\cchs256 .
\par }\pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Start Position}\tab (Number/Optional){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies the first character of the text to }be {\cchs256 clear}ed{\cchs256 .
\par }\pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Count}\tab (Number/Optional){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies the number of characters to }be {\cchs256 clear}ed{\cchs256 , beginning at }the starting position{\cchs256 .}
\par \pard\plain \s38\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Flows
\par }\pard\plain \s29\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Done
\par }\pard\plain \s30\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed after the specified portion of the text }has been{\cchs256  cleared.}
\par \pard\plain \s44\sb20\sa40\keepn \b\f5 \page {\cs39\fs16\up6 {\*\bkmkstart idx_usage_clear_text}{\*\bkmkend idx_usage_clear_text}#{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_usage_clear_text}} {\cs39\fs16\up6 +{\footnote \pard\plain \s40 
\f5\fs20 {\cs39\fs16\up6 +} func3:0010}} {\cs39\fs16\up6 ${\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 $} Usage}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 K} Clear Text}} {\cs39\fs16\up6 !{\footnote \pard\plain \s40 
\f5\fs20 {\cs39\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_clear_text')')}} Usage
\par \pard\plain \s45\li360\sa100\keepn \b\f5\fs20 Clear Text
\par \pard\plain \s55 \f5\fs10 {\cchs256 
\par }\pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 Suppose a text string is 12345. {\cchs256 
\par }\pard\plain \s21\fi-360\li720\sa60\nowidctlpar \f5\fs20\cf1 1.\tab If {\cchs256 Start Position and Count are }both {\cchs256 3, the function clears 345} and leaves {\cchs256 12.} 
\par 2.\tab {\cchs256 If Start Position }is 5 {\cchs256 and Count }is{\cchs256  -1, the function clears 5} and leaves {\cchs256 1234.
\par }\pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 If }you don't enter a starting {\cchs256 position, the function starts with the first character. }The function doesn't do anything if {\cchs256 the value }you enter in {\cchs256 
Start Position is greater than the }total {\cchs256 number of characters.}
\par {\cchs256 If }you don't specify the number of characters you want to clear, the function clears every character from the starting position to the end. The function doesn't do anything if {\cchs256 Count is 0. If Count is negative, }
the function deletes the {\cchs256 characters from the end} of the string instead of from the beginning of the string{\cchs256 .}
\par NOTE: {\cchs256 You can also clear a Text }object {\cchs256 by assigning an empty Text object} to it{\cchs256 .}
\par \pard\plain \s44\sb20\sa40\keepn \b\f5 \page {\cs39\fs16\up6 {\*\bkmkstart idx_compare_text}{\*\bkmkend idx_compare_text}#{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_compare_text}} {\cs39\fs16\up6 ${\footnote \pard\plain \s40 \f5\fs20 {
\cs39\fs16\up6 $} Parameters & Flows}} {\cs39\fs16\up6 +{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 +} brws4:0015}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 K} Compare Text}} {\cs39\fs16\up6 !{\footnote \pard\plain 
\s40 \f5\fs20 {\cs39\fs16\up6 !}  EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_text_alm_functions')')}} Compare Text
\par \pard\plain \s45\li360\sa100\keepn \b\f5\fs20 Text ALM{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f616374696f6e5f636f6d706172655f74657874}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}\tab 
\tab {\uldb\cf11 Usage}{\v  idx_usage_compare_text}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 
{\*\datafield 6964785f75736167655f636f6d706172655f74657874}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Compares }the contents of {\cchs256 two Text} object{\cchs256 s.
\par }
\par \pard\plain \s45\li360\sa100 \b\f5\fs20 {\cf5 \{bmc graphics\\f_txcm.bmp\}}{\cf1  }
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 
\par }\pard\plain \s47\sb40\sa40 \b\f5\fs20 {\cchs256 Input Parameters
\par }\pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 First Text}\tab (Text/Required){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies the first Text }object whose contents are {\cchs256 to }be {\cchs256 compare}d{\cchs256 .
\par }\pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Second Text}\tab (Text/Required){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies the second Text }object whose contents are {\cchs256 to }be {\cchs256 compare}d{\cchs256 .
\par }\pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Instructions}\tab \tab (Text/Optional){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies }whether the comparison is to be case sensitive or insensitive. The choices are {\cchs256 Case }and{\cchs256 
 NoCase. If you don't enter a choice, the parameter defaults to case insensitive.
\par }\pard\plain \s38\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Flows
\par }\pard\plain \s29\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Less
\par }\pard\plain \s30\li720\sa60\nowidctlpar \f5\fs20\cf1 Followed if the function has alphabetically sorted the contents of the two Text objects and numbered First Text as 1. {\cchs256 
\par }\pard\plain \s29\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Equal
\par }\pard\plain \s30\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed if the }contents of the two Text objects {\cchs256 are identical.
\par }\pard\plain \s29\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Greater
\par }\pard\plain \s30\li720\sa60\nowidctlpar \f5\fs20\cf1 Followed if the function has alphabetically sorted the contents of the two Text objects and numbered First Text as 2.
\par \pard\plain \s44\sb20\sa40\keepn \b\f5 \page {\cs39\fs16\up6 {\*\bkmkstart idx_usage_compare_text}{\*\bkmkend idx_usage_compare_text}#{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_usage_compare_text}} {\cs39\fs16\up6 +{\footnote \pard\plain 
\s40 \f5\fs20 {\cs39\fs16\up6 +} func4:0010}} {\cs39\fs16\up6 ${\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 $} Usage}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 K} Compare Text}} {\cs39\fs16\up6 !{\footnote \pard\plain 
\s40 \f5\fs20 {\cs39\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_compare_text')')}} Usage
\par \pard\plain \s45\li360\sa100\keepn \b\f5\fs20 Compare Text
\par \pard\plain \s55 \f5\fs10 {\cchs256 
\par }\pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 
The results depend on which text object is in First Text and which text object is in Second Text. Suppose the word in First Text is apple and the word in Second Text is boy. If you alphabetized and numbered them, apple would be 1 and boy would be 2. Since
 1 is less than 2, {\cchs256 the function }would {\cchs256 issue the Less }flow{\cchs256 .
\par }You can make case-sensitive comparisons. If you do, uppercase words are listed before lowercase words. If you were to make a case-insensitive comparison of the words apple and Apple, {\cchs256 the function }would {\cchs256 issue the Equal signal. }
If you were to make a case-sensitive comparison instead, Apple would be listed before apple and the function would issue the Greater flow.{\cchs256 
\par }\pard\plain \s44\sb20\sa40\keepn \b\f5 \page {\cs39\fs16\up6 {\*\bkmkstart idx_concatenate}{\*\bkmkend idx_concatenate}#{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_concatenate}} {\cs39\fs16\up6 ${\footnote \pard\plain \s40 \f5\fs20 {
\cs39\fs16\up6 $} Parameters & Flows}} {\cs39\fs16\up6 +{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 +} brws4:0020}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 K} Concatenate}} {\cs39\fs16\up6 !{\footnote \pard\plain 
\s40 \f5\fs20 {\cs39\fs16\up6 !}  EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_text_alm_functions')')}} Concatenate
\par \pard\plain \s45\li360\sa100\keepn \b\f5\fs20 Text ALM{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f616374696f6e5f636f6e636174656e617465}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}\tab 
\tab {\uldb\cf11 Usage}{\v  idx_usage_concatenate}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 
6964785f75736167655f636f6e636174656e617465}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Combines }the contents of {\cchs256 two Text} object{\cchs256 s and }places{\cchs256  the result }in{\cchs256  a}nother{\cchs256  text} object{\cchs256 .
\par }
\par \pard\plain \s45\li360\sa100 \b\f5\fs20 {\cf5 \{bmc graphics\\f_txcn.bmp\}}{\cf1  }
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 
\par }\pard\plain \s47\sb40\sa40 \b\f5\fs20 {\cchs256 Input Parameters
\par }\pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 First Text}\tab (Text/Required){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies the first Text} object whose contents are to be concatenated{\cchs256 .
\par }\pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Second Text}\tab (Text/Required){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies the second Text} object whose contents are to be concatenated{\cchs256 .
\par }\pard\plain \s49\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Output Parameters
\par }\pard\plain \s33\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Result Text
\par }\pard\plain \s34\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Returns the concatenated result. Type: Text (Required).
\par }\pard\plain \s38\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Flows
\par }\pard\plain \s29\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Done
\par }\pard\plain \s30\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed after the contents of the Text} objects have been {\cchs256 concatenated.}
\par \pard\plain \s44\sb20\sa40\keepn \b\f5 \page {\cs39\fs16\up6 {\*\bkmkstart idx_usage_concatenate}{\*\bkmkend idx_usage_concatenate}#{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_usage_concatenate}} {\cs39\fs16\up6 +{\footnote \pard\plain 
\s40 \f5\fs20 {\cs39\fs16\up6 +} func5:0010}} {\cs39\fs16\up6 ${\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 $} Usage}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 K} Concatenate}} {\cs39\fs16\up6 !{\footnote \pard\plain 
\s40 \f5\fs20 {\cs39\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_concatenate')')}} Usage
\par \pard\plain \s45\li360\sa100\keepn \b\f5\fs20 Concatenate
\par \pard\plain \s55 \f5\fs10 {\cchs256 
\par }\pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Use }the Concatenate{\cchs256  function when you need to string together separate pieces of text}. Don't {\cchs256 forget to separate }the {\cchs256 words} by including spaces where necessary
{\cchs256 . For example, }if {\cchs256 First Text is "George " (note the final space) and Second Text is "Washington", Result Text returns "George Washington". }
\par Use the {\uldb\cf11 Text Builder}{\v\cf0 idx_contents@awustfct.hlp}{\field{\*\fldinst {\cf0  macrobutton NextField }}{\fldrslt }}{\field{\*\fldinst  {\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field{\*\fldinst  ADDIN {{\*\datafield 
6964785f636f6e74656e74735f61777573746663745f686c70}}}{\fldrslt }}{\field{\*\fldinst  macrobutton NextField }{\fldrslt }}{\cf0  }object instead of the Concatenate function {\cchs256 if you} want to concatenate many pieces of text. This is especially true {
\cchs256 if }the text has {\cchs256 fixed keyboard characters.
\par NOTE: If you're concatenating large }pieces of {\cchs256 text, be aware that }the {\cchs256 Result Text }output parameter has{\cchs256  a temporary memory allocation }that {\cchs256 equal}s{\cchs256 
 the combined sizes of the First and Second Texts. Your application allocates }the required {\cchs256 memory until the }output parameter{\cchs256  has been assigned to an object or passed to another function} as an input{\cchs256 . }
\par For example, suppose {\cchs256 you're concatenating two }pieces of {\cchs256 text that }each {\cchs256 require 700 KB of RAM and you decide to pass the Result Text back into First Text.} Before concatenation,{\cchs256  }
the memory requirement is 1,400 KB (700 KB for First Text and 700 KB for Second Text). After concatenation, the memory requirement is 2,100 KB (1,400 KB for First Text and 700 KB for Second Text). During concatenation, however, the memory requirement is 2
,800 KB (700 KB for First Text, 700 KB for Second Text, and a temporary allotment of 1,400 KB for Result Text). {\cchs256 If you're a Macintosh user, don't forget to }increase{\cchs256  }the {\cchs256 application's partition} if it isn't big enough{
\cchs256 . }A partition that is too small can cause system crashes.{\cchs256 
\par }\pard\plain \s44\sb20\sa40\keepn \b\f5 \page {\cs39\fs16\up6 {\*\bkmkstart idx_find_replace}{\*\bkmkend idx_find_replace}#{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_find_replace}} {\cs39\fs16\up6 ${\footnote \pard\plain \s40 \f5\fs20 {
\cs39\fs16\up6 $} Parameters & Flows}} {\cs39\fs16\up6 +{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 +} brws4:0025}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 K} Find-Replace}} {\cs39\fs16\up6 !{\footnote \pard\plain 
\s40 \f5\fs20 {\cs39\fs16\up6 !}  EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_text_alm_functions')')}} Find-Replace
\par \pard\plain \s45\li360\sa100\keepn \b\f5\fs20 Text ALM{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f616374696f6e5f66696e645f7265706c616365}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}\tab 
\tab {\uldb\cf11 Usage}{\v  idx_usage_find_replace}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 
{\*\datafield 6964785f75736167655f66696e645f7265706c616365}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Searches }the {\cchs256 Text }object {\cchs256 for the first occurrence of the string }stored {\cchs256 in Find Text}. It begins the search at {\cchs256 Start Position}.{\cchs256  If }
it finds {\cchs256 a match, }it marks the beginning and end of the string. It uses {\cchs256 Found Position }to return the position of the string's first character and Next Position to return the position of the first character after the string.{\cchs256 

\par }If Replace Text has a string stored in it,{\cchs256  }the function {\cchs256 replaces }the contents of Find Text with the contents of Replace Text.{\cchs256 
\par }
\par \pard\plain \s45\li360\sa100 \b\f5\fs20 {\cf5 \{bmc graphics\\f_txfr.bmp\}}{\cf1  }
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 
\par }\pard\plain \s47\sb40\sa40 \b\f5\fs20 {\cchs256 Input Parameters
\par }\pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Text}\tab (Text/Required){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies the Text }object whose contents are {\cchs256 to }be {\cchs256 search}ed{\cchs256 .
\par }\pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Find Text}\tab (Text/Required){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies the string to search for. If }you don't specify Find Text, the function doesn't make any replacements.{\cchs256 
\par }\pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Replace Text}\tab (Text/Optional){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies the replacement for the }Find Text {\cchs256 string. If }you don't specify {\cchs256 Replace Text}, the function doesn't make any replacements. If you specify {\cchs256 
Replace Text }by entering an empty field, the function deletes the text it finds. {\cchs256 
\par }\pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Start Position}\tab (Number/Optional){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies the character number }where the function is to begin its search. {\cchs256 If }you don't enter a{\cchs256  }starting{\cchs256  position, the search begins at the first characte
r. This input is required on }Windows{\cchs256 . 
\par }\pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Instructions}\tab \tab (Text/Optional){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies }whether the comparison is to be case sensitive or insensitive. The choices are {\cchs256 Case }and{\cchs256 
 NoCase. If you don't enter a choice, the parameter defaults to case insensitive.}
\par \pard\plain \s49\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Output Parameters
\par }\pard\plain \s33\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Found Position
\par }\pard\plain \s34\li720\sa60\nowidctlpar \f5\fs20\cf1 If the function finds a match for the text in Find Text, this output reports{\cchs256  the location of the first character. Type: Number (Optional).
\par }\pard\plain \s33\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Next Position
\par }\pard\plain \s34\li720\sa60\nowidctlpar \f5\fs20\cf1 If the function finds a match for the text in Find Text, this output reports{\cchs256  the location of the first character} after the matching text{\cchs256 . Type: Number (Optional).
\par }\pard\plain \s38\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Flows
\par }\pard\plain \s29\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Found
\par }\pard\plain \s30\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed if }the function finds {\cchs256 a match for Find Text.
\par }\pard\plain \s29\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Not found
\par }\pard\plain \s30\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed if }the function doesn't find a match for {\cchs256 Find Text.}
\par \pard\plain \s44\sb20\sa40\keepn \b\f5 \page {\cs39\fs16\up6 {\*\bkmkstart idx_usage_find_replace}{\*\bkmkend idx_usage_find_replace}#{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_usage_find_replace}} {\cs39\fs16\up6 +{\footnote \pard\plain 
\s40 \f5\fs20 {\cs39\fs16\up6 +} func6:0010}} {\cs39\fs16\up6 ${\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 $} Usage}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 K} Find-Replace}} {\cs39\fs16\up6 !{\footnote \pard\plain 
\s40 \f5\fs20 {\cs39\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_find_replace')')}} Usage
\par \pard\plain \s45\li360\sa100\keepn \b\f5\fs20 Find-Replace
\par \pard\plain \s55 \f5\fs10 {\cchs256 
\par }\pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 The Find-Replace function is }often used {\cchs256 to clean up a Text object before }the object{\cchs256  is passed to }a function or {\cchs256 
another object. The simplest way to implement a routine of this sort is to loop the function back on itself. The function calls itself until }it has found and replaced {\cchs256 all matches. The function then }stops the loop by {\cchs256 issu}ing{
\cchs256  }the{\cchs256  Not Found }flow.{\cchs256 
\par }NOTE: {\cchs256 When }you {\cchs256 replac}e{\cchs256  text, don't forget to }separate the words by {\cchs256 includ}ing{\cchs256  spaces where necessary.
\par }\pard\plain \s44\sb20\sa40\keepn \b\f5 \page {\cs39\fs16\up6 {\*\bkmkstart idx_get_field}{\*\bkmkend idx_get_field}#{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_get_field}} {\cs39\fs16\up6 ${\footnote \pard\plain \s40 \f5\fs20 {
\cs39\fs16\up6 $} Parameters & Flows}} {\cs39\fs16\up6 +{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 +} brws4:0030}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 K} Get Field}} {\cs39\fs16\up6 !{\footnote \pard\plain \s40 
\f5\fs20 {\cs39\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_text_alm_functions')')}} Get Field
\par \pard\plain \s45\li360\sa100\keepn \b\f5\fs20 Text ALM{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f616374696f6e5f6765745f6669656c64}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}\tab \tab {
\uldb\cf11 Usage}{\v  idx_usage_get_field}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 
6964785f75736167655f6765745f6669656c64}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Returns a specified field from a block of text.} {\cchs256 A field comprises all }the {\cchs256 characters }({\cchs256 1) from the beginning of the text to the first delimiter; }({\cchs256 
2) between two delimiters; }({\cchs256 3) between a delimiter and a return, or }({\cchs256 4) between the final delimiter and the end of the text. Typical delimiters are tab and return characters.
\par }
\par \pard\plain \s45\li360\sa100 \b\f5\fs20 {\cf5 \{bmc graphics\\f_txgf.bmp\}}{\cf1  }
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 
\par }\pard\plain \s47\sb40\sa40 \b\f5\fs20 {\cchs256 Input Parameters}
\par \pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Text}\tab (Text/Required){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Identifies the }location of the {\cchs256 text}. The text can be stored in one or more fields{\cchs256 . 
\par }\pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Start Position}\tab (Number/Optional){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies }a{\cchs256  position }in a field. The field that contains the start position has index 1. {\cchs256 
\par }\pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Field Index}\tab \tab (Number/Optional){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies the }field {\cchs256 index number. }If a Text object contains three fields and Start Position is in the first field, then {\cchs256 the first field has index 1, the second }
field has {\cchs256 index 2, and the third }field has {\cchs256 index 3. 
\par }\pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Delimiters}\tab \tab (Text/Optional){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies the characters that delimit the field. }You can use any {\cchs256 ASCII value. The }following list shows {\cchs256 ASCII values for several common delimiters: }
\par \tab {\ul Delimiter}\tab {\ul ASCII Value}
\par \tab tab\tab \tab 9
\par \tab return\tab \tab 13
\par \tab s{\cchs256 pace}\tab \tab {\cchs256 32
\par }\tab {\cchs256 backslash} (\\{\cchs256 )}\tab {\cchs256 92
\par }\tab {\cchs256 asterisk} (*{\cchs256 )}\tab {\cchs256 42
\par }\tab {\cchs256 comma} (,{\cchs256 )}\tab {\cchs256 44
\par }\tab {\cchs256 period} (.{\cchs256 )}\tab {\cchs256 46
\par }\tab {\cchs256 frontslash} (/{\cchs256 )}\tab {\cchs256 47
\par To specify two values, }separate them by a comma. For example, if you use a space and a comma you would enter {\cchs256 32,44}. {\cchs256 If }you don't specify a {\cchs256 delimiter, the }functions uses tabs and returns as the {\cchs256 
default delimiters.}
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 NOTE: Although both the Start Position and the Field Index parameters are optional, you must specify at least one of them. Refer to the {\uldb\cf11 Usage}{\v\cf0 idx_usage_get_field}{\field{\*\fldinst {
\cf0  macrobutton NextField }}{\fldrslt }}{\field{\*\fldinst  {\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field{\*\fldinst  ADDIN {{\*\datafield 6964785f75736167655f6765745f6669656c64}}}{\fldrslt }}{\field{\*\fldinst  macrobutton NextField }{\fldrslt }}{
\cf0  }section for more information on using these parameters together.{\cchs256 
\par }\pard\plain \s49\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Output Parameters
\par }\pard\plain \s33\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Field Text}\tab (Text/Optional){\cchs256 
\par }\pard\plain \s34\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Returns the field specified by Start Position and Field Index. The field delimiter is not included.
\par }\pard\plain \s33\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Start Position}\tab (Number/Optional){\cchs256 
\par }\pard\plain \s34\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Returns the position of the first character in Field Text. 
\par }\pard\plain \s33\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Next Position}\tab (Number/Optional){\cchs256 
\par }\pard\plain \s34\li720\sa60\nowidctlpar \f5\fs20\cf1 Takes the position of the last character in the returned field and adds two. If Field Text isn't the last field, the resulting value is the position of the first character in the next field.{\cchs256 

\par }\pard\plain \s38\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Flows
\par }\pard\plain \s29\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Retrieved
\par }\pard\plain \s30\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed after the field }has been{\cchs256  returned.
\par }\pard\plain \s29\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Not found
\par }\pard\plain \s30\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed if }there isn't a field at the specified location.
\par \pard\plain \s44\sb20\sa40\keepn \b\f5 \page {\cs39\fs16\up6 {\*\bkmkstart idx_usage_get_field}{\*\bkmkend idx_usage_get_field}#{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_usage_get_field}} {\cs39\fs16\up6 +{\footnote \pard\plain \s40 
\f5\fs20 {\cs39\fs16\up6 +} func7:0010}} {\cs39\fs16\up6 ${\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 $} Usage}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 K} Get Field}} {\cs39\fs16\up6 !{\footnote \pard\plain \s40 
\f5\fs20 {\cs39\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_get_field')')}} Usage
\par \pard\plain \s45\li360\sa100\keepn \b\f5\fs20 Get Field
\par \pard\plain \s55 \f5\fs10 {\cchs256 
\par }\pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 Suppose a{\cchs256  Text }object {\cchs256 contains the string }"dark{\cchs256  }green"{\cchs256 , where }"dark"{\cchs256  and }"green"{\cchs256  are separate fields }with a tab between them{\cchs256 
. }
\par \pard\plain \s21\fi-360\li720\sa60\nowidctlpar \f5\fs20\cf1 1.\tab {\cchs256 If Start Position is in the word "}dark{\cchs256 " or on the }tab and Field Index is 1, the function returns "dark".{\cchs256  }
\par \pard \s21\fi-360\li720\sa60\nowidctlpar 2.\tab If {\cchs256 Start Position is in the word "}dark{\cchs256 " or on the }tab and Field Index is 2, the function returns "green". 
\par \pard \s21\fi-360\li720\sa60\nowidctlpar 3.\tab {\cchs256 If Start Position is }in{\cchs256  the word "}green{\cchs256 "} and Field Index is 1, the function returns "green".{\cchs256 
\par }\pard\plain \s44\sb20\sa40\keepn \b\f5 \page {\cs39\fs16\up6 {\*\bkmkstart idx_get_line}{\*\bkmkend idx_get_line}#{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_get_line}} {\cs39\fs16\up6 ${\footnote \pard\plain \s40 \f5\fs20 {
\cs39\fs16\up6 $} Parameters & Flows}} {\cs39\fs16\up6 +{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 +} brws4:0035}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 K} Get Line}} {\cs39\fs16\up6 !{\footnote \pard\plain \s40 
\f5\fs20 {\cs39\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_text_alm_functions')')}} Get Line
\par \pard\plain \s45\li360\sa100\keepn \b\f5\fs20 Text ALM{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f616374696f6e5f6765745f6c696e65}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}\tab \tab {
\uldb\cf11 Usage}{\v  idx_usage_get_line}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 
6964785f75736167655f6765745f6c696e65}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Returns a specified line from a block of text.} {\cchs256 A line comprises all }the {\cchs256 characters }({\cchs256 1) from the beginning of the text up to the first carriage return, }({
\cchs256 2) between two carriage returns, or }({\cchs256 3) between the final carriage return and the end of the text.
\par }
\par \pard\plain \s45\li360\sa100 \b\f5\fs20 {\cf5 \{bmc graphics\\f_txgl.bmp\}}{\cf1  }
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 
\par }\pard\plain \s47\sb40\sa40 \b\f5\fs20 {\cchs256 Input Parameters}
\par \pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Text}\tab (Text/Required){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Identifies the }location of the {\cchs256 text that contains the line to }be {\cchs256 retrieve}d{\cchs256 .
\par }\pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Start Position}\tab (Number/Optional){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies }a{\cchs256  position }in a line. The line that contains the start position has index 1.{\cchs256 
\par }\pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Line Index}\tab \tab (Number/Optional){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies the }line {\cchs256 index number}. If a Text object contains three lines{\cchs256  }and Start Position is in the first line, then {\cchs256 the first line has index 1, the second }
line has {\cchs256 index 2, and the third }line has {\cchs256 index 3.}
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 NOTE: Although both the Start Position and the Line Index parameters are optional, you must specify at least one of them. Refer to the {\uldb\cf11 Usage}{\v\cf0 idx_usage_get_line}{\field{\*\fldinst {
\cf0  macrobutton NextField }}{\fldrslt }}{\field{\*\fldinst  {\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field{\*\fldinst  ADDIN {{\*\datafield 6964785f75736167655f6765745f6c696e65}}}{\fldrslt }}{\field{\*\fldinst  macrobutton NextField }{\fldrslt }}{
\cf0  }section for more information on using these parameters together.{\cchs256 
\par }\pard\plain \s49\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Output Parameters
\par }\pard\plain \s33\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Line Text}\tab (Text/Optional){\cchs256 
\par }\pard\plain \s34\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Returns the specified line},{\cchs256  minus }the{\cchs256  carriage return. 
\par }\pard\plain \s33\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Start Position}\tab (Number/Optional){\cchs256 
\par }\pard\plain \s34\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Returns the position of the first character in Line Text. 
\par }\pard\plain \s33\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Next Position}\tab (Number/Optional){\cchs256 
\par }\pard\plain \s34\li720\sa60\nowidctlpar \f5\fs20\cf1 Takes the position of the last character in the returned field and adds two. If Line Text isn't the last line, the resulting value is the position of the first character in the next line.{\cchs256 

\par }\pard\plain \s38\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Flows
\par }\pard\plain \s29\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Retrieved
\par }\pard\plain \s30\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed after the line }has been{\cchs256  returned.
\par }\pard\plain \s29\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Not found
\par }\pard\plain \s30\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed if }there isn't a {\cchs256 line at the specified location.}
\par \pard\plain \s44\sb20\sa40\keepn \b\f5 \page {\cs39\fs16\up6 {\*\bkmkstart idx_usage_get_line}{\*\bkmkend idx_usage_get_line}#{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_usage_get_line}} {\cs39\fs16\up6 +{\footnote \pard\plain \s40 
\f5\fs20 {\cs39\fs16\up6 +} func8:0010}} {\cs39\fs16\up6 ${\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 $} Usage}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 K} Get Line}} {\cs39\fs16\up6 !{\footnote \pard\plain \s40 
\f5\fs20 {\cs39\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_get_line')')}} Usage
\par \pard\plain \s45\li360\sa100\keepn \b\f5\fs20 Get Line
\par \pard\plain \s55 \f5\fs10 {\cchs256 
\par }\pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 If Start Position and Line Index are }both {\cchs256 0, the function returns the first line. If }the specified index doesn't have a line, {\cchs256 the function returns empty text.
\par }\pard\plain \s44\sb20\sa40\keepn \b\f5 \page {\cs39\fs16\up6 {\*\bkmkstart idx_get_number}{\*\bkmkend idx_get_number}#{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_get_number}} {\cs39\fs16\up6 ${\footnote \pard\plain \s40 \f5\fs20 {
\cs39\fs16\up6 $} Parameters & Flows}} {\cs39\fs16\up6 +{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 +} brws4:0040}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 K} Get Number}} {\cs39\fs16\up6 !{\footnote \pard\plain 
\s40 \f5\fs20 {\cs39\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_text_alm_functions')')}} Get Number
\par \pard\plain \s45\li360\sa100\keepn \b\f5\fs20 Text ALM{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f616374696f6e5f6765745f6e756d626572}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}\tab \tab {
\uldb\cf11 Usage}{\v  idx_usage_get_number}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 
6964785f75736167655f6765745f6e756d626572}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Returns a specified number string from a block of text.} {\cchs256 A number comprises all }of the {\cchs256 numer}ic character{\cchs256 s between any two }nonnumeric {\cchs256 characters. }
If two or more strings of numeric characters are {\cchs256 separated by a comma or }a {\cchs256 period}, the function combines them into a single number string.{\cchs256 
\par }\pard \s15\li360\sa60\nowidctlpar 
\par \pard\plain \s45\li360\sa100 \b\f5\fs20 {\cf5 \{bmc graphics\\f_txgn.bmp\}}{\cf1  }
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 
\par }\pard\plain \s47\sb40\sa40 \b\f5\fs20 {\cchs256 Input Parameters}
\par \pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Text}\tab (Text/Required){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Identifies the }location of the text.{\cchs256 
\par }\pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Start Position}\tab (Number/Optional){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies }a position in a string of text. The first number that contains or follows the start position has index 1.{\cchs256 
\par }\pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Number Index}\tab (Number/Optional){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies the }number {\cchs256 index. }If{\cchs256  a Text }object {\cchs256 contain}s{\cchs256  three numbers} and Start Position is in the first one{\cchs256 , }then {\cchs256 
the first number has index 1, the second }number has {\cchs256 index 2, and the third }number has {\cchs256 index 3.}
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 NOTE: Although both the Start Position and the Number Index parameters are optional, you must specify at least one of them. Refer to the {\uldb\cf11 Usage}{\v\cf0 idx_usage_get_number}
{\field{\*\fldinst {\cf0  macrobutton NextField }}{\fldrslt }}{\field{\*\fldinst  {\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field{\*\fldinst  ADDIN {{\*\datafield 6964785f75736167655f6765745f6e756d626572}}}{\fldrslt }}{\field{\*\fldinst 
 macrobutton NextField }{\fldrslt }}{\cf0  }section for more information on using these parameters together.{\cchs256 
\par }\pard\plain \s49\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Output Parameters
\par }\pard\plain \s33\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Number}\tab (Number/Optional){\cchs256 
\par }\pard\plain \s34\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Returns the specified number.
\par }\pard\plain \s33\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Start Position}\tab (Number/Optional){\cchs256 
\par }\pard\plain \s34\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Returns the position of the first character in Number.
\par }\pard\plain \s33\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Next Position}\tab (Number/Optional){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 Takes the position of the last numeric character in the returned number and adds one. If the numeric character isn't th
e last one, the resulting value is the position of the first character after the number. {\cchs256 
\par }\pard\plain \s38\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Flows
\par }\pard\plain \s29\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Retrieved
\par }\pard\plain \s30\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed after the number }has been{\cchs256  returned.
\par }\pard\plain \s29\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Not found
\par }\pard\plain \s30\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed if }there isn't a {\cchs256 number at the specified location.}
\par \pard\plain \s44\sb20\sa40\keepn \b\f5 \page {\cs39\fs16\up6 {\*\bkmkstart idx_usage_get_number}{\*\bkmkend idx_usage_get_number}#{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_usage_get_number}} {\cs39\fs16\up6 +{\footnote \pard\plain \s40 
\f5\fs20 {\cs39\fs16\up6 +} func9:0010}} {\cs39\fs16\up6 ${\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 $} Usage}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 K} Get Number}} {\cs39\fs16\up6 !{\footnote \pard\plain \s40 
\f5\fs20 {\cs39\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_get_number')')}} Usage
\par \pard\plain \s45\li360\sa100\keepn \b\f5\fs20 Get Number
\par \pard\plain \s55 \f5\fs10 {\cchs256 
\par }\pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 Suppose a Text object contains the string "cos 0 + sin 90 = 2": 
\par \pard\plain \s21\fi-360\li720\sa60\nowidctlpar \f5\fs20\cf1 1.\tab If Number Index is 1 and Start Position is less than or equal to 5, which is the position of the zero, the function returns "0".
\par \pard \s21\fi-360\li720\sa60\nowidctlpar 2.\tab If Number Index is 1 and Start Position is 6, the function returns "90".
\par 3.\tab If Number Index is 2 and Start Position is less than or equal to 5, the function returns "90". 
\par 4.\tab If Number Index is 2, and Start Position is 6, the function returns "2".
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 If Start Position and Number Index are both 0, the function returns the first number. If the specified index} doesn't have a number{\cchs256 , the function returns a null value.
\par }\pard\plain \s44\sb20\sa40\keepn \b\f5 \page {\cs39\fs16\up6 {\*\bkmkstart idx_get_word}{\*\bkmkend idx_get_word}#{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_get_word}} {\cs39\fs16\up6 ${\footnote \pard\plain \s40 \f5\fs20 {
\cs39\fs16\up6 $} Parameters & Flows}} {\cs39\fs16\up6 +{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 +} brws4:0045}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 K} Get Word}} {\cs39\fs16\up6 !{\footnote \pard\plain \s40 
\f5\fs20 {\cs39\fs16\up6 !}  EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_text_alm_functions')')}} Get Word
\par \pard\plain \s45\li360\sa100\keepn \b\f5\fs20 Text ALM\tab \tab {\uldb\cf11 Usage}{\v  idx_usage_get_word}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f75736167655f6765745f776f7264}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Returns a specified word from a block of text.} {\cchs256 A word comprises all }of the {\cchs256 characters between two spaces or between two characters }that aren't numbers or {\cchs256 
letters of the alphabet}; this includes punctuation characters, symbols such as @, #, or $, carriage returns, and tabs.
\par \pard \s15\li360\sa60\nowidctlpar 
\par \pard\plain \s45\li360\sa100 \b\f5\fs20 {\cf5 \{bmc graphics\\f_txgw.bmp\}}{\cf1  }
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 
\par }\pard\plain \s47\sb40\sa40 \b\f5\fs20 {\cchs256 Input Parameters}
\par \pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Text}\tab (Text/Required){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Identifies the }location of the{\cchs256  text.
\par }\pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Start Position}\tab (Number/Optional){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 Specifies a position in a string of text. The word that contains the start position has index 1.{\cchs256 
\par }\pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Word Index}\tab \tab (Number/Optional){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies the }word {\cchs256 index. }If a Text object contains three words, {\cchs256 the first word has index 1, the second }word has {\cchs256 index 2, and the third }word has {\cchs256 
index 3. If Start Position and Word Index are both 0, the function returns the first word. If }the specified index doesn't have a word, {\cchs256 the function returns an empty text.}
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 NOTE: Although both the Start Position and the Word Index parameters are optional, you must specify at least one of them. Refer to the {\uldb\cf11 Usage}{\v\cf0 idx_usage_get_word}{\field{\*\fldinst {
\cf0  macrobutton NextField }}{\fldrslt }}{\field{\*\fldinst  {\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field{\*\fldinst  ADDIN {{\*\datafield 6964785f75736167655f6765745f776f7264}}}{\fldrslt }}{\field{\*\fldinst  macrobutton NextField }{\fldrslt }}{
\cf0  }section for more information on using these parameters together.{\cchs256 
\par }\pard\plain \s49\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Output Parameters
\par }\pard\plain \s33\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Word Text}\tab \tab (Text/Optional){\cchs256 
\par }\pard\plain \s34\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Returns the specified word. 
\par }\pard\plain \s33\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Start Position}\tab (Number/Optional){\cchs256 
\par }\pard\plain \s34\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Returns the position of the first character in Word Text. 
\par }\pard\plain \s33\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Next Position}\tab (Number/Optional){\cchs256 
\par }\pard\plain \s34\li720\sa60\nowidctlpar \f5\fs20\cf1 Takes the position of the last character in the word and adds one. If Word Text isn't the last word, the resulting value is the position of the first character after the word.{\cchs256 
\par }\pard\plain \s38\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Flows
\par }\pard\plain \s29\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Retrieved
\par }\pard\plain \s30\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed after the word }has been{\cchs256  returned.
\par }\pard\plain \s29\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Not found
\par }\pard\plain \s30\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed if }there isn't a word {\cchs256 at the specified location.}
\par \pard\plain \s44\sb20\sa40\keepn \b\f5 \page {\cs39\fs16\up6 {\*\bkmkstart idx_usage_get_word}{\*\bkmkend idx_usage_get_word}#{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_usage_get_word}} {\cs39\fs16\up6 +{\footnote \pard\plain \s40 
\f5\fs20 {\cs39\fs16\up6 +} func10:0010}} {\cs39\fs16\up6 ${\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 $} Usage}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 K} Get Word}} {\cs39\fs16\up6 !{\footnote \pard\plain \s40 
\f5\fs20 {\cs39\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_get_word')')}} Usage
\par \pard\plain \s45\li360\sa100\keepn \b\f5\fs20 Get Word
\par \pard\plain \s55 \f5\fs10 {\cchs256 
\par }\pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 Suppose a{\cchs256  Text }object {\cchs256 contains }a two-word{\cchs256  string. }
\par \pard\plain \s21\fi-360\li720\sa60\nowidctlpar \f5\fs20\cf1 1.\tab {\cchs256 If Start Position is in the first word }and {\cchs256 Word Index }is{\cchs256  1}, the function{\cchs256  returns }the first word.
\par \pard \s21\fi-360\li720\sa60\nowidctlpar 2.\tab If Start Position is in the first word and Word Index is 2, the function returns the second word. 
\par 3.\tab {\cchs256 If Start Position is }in{\cchs256  the second word} and Word Index is 1{\cchs256 ,} the function returns the second word.
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 If }Word Index is 1 
and the start position is on a delimiter such as a space, comma, or period, the function returns the first word after the delimiter. If Word Index is 2 and the start position is on {\cchs256 a }
delimiter, the function returns the second word after the delimiter.{\cchs256 
\par }\pard\plain \s44\sb20\sa40\keepn \b\f5 \page {\cs39\fs16\up6 {\*\bkmkstart idx_insert_text}{\*\bkmkend idx_insert_text}#{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_insert_text}} {\cs39\fs16\up6 ${\footnote \pard\plain \s40 \f5\fs20 {
\cs39\fs16\up6 $} Parameters & Flows}} {\cs39\fs16\up6 +{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 +} brws4:0050}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 K} Insert Text}} {\cs39\fs16\up6 !{\footnote \pard\plain 
\s40 \f5\fs20 {\cs39\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_text_alm_functions')')}} Insert Text
\par \pard\plain \s45\li360\sa100\keepn \b\f5\fs20 Text ALM
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Inserts a string at a specified }text {\cchs256 location.
\par }\pard \s15\li360\sa60\nowidctlpar 
\par \pard\plain \s45\li360\sa100 \b\f5\fs20 {\cf5 \{bmc graphics\\f_txit.bmp\}}{\cf1  }
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 
\par }\pard\plain \s47\sb40\sa40 \b\f5\fs20 {\cchs256 Input Parameters
\par }\pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Destination Text}\tab (Text/Required){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Identifies the Text object }where the string is to be inserted. {\cchs256 
\par }\pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Insert Text}\tab \tab (Text/Required){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies the text of the string to }be {\cchs256 insert}ed{\cchs256 .
\par }\pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Position}\tab (Number/Required){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies the position in }the {\cchs256 Text }object where the {\cchs256 string is }to be {\cchs256 inserted. }For example, if Position is equal to 3, {\cchs256 the }function inserts the {
\cchs256 text between the second and third characters. 
\par }\pard\plain \s38\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Flows
\par }\pard\plain \s29\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Done
\par }\pard\plain \s30\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed after the string }has been{\cchs256  inserted.}
\par \pard\plain \s44\sb20\sa40\keepn \b\f5 \page {\cs39\fs16\up6 {\*\bkmkstart idx_intersect_text}{\*\bkmkend idx_intersect_text}#{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_intersect_text}} {\cs39\fs16\up6 ${\footnote \pard\plain \s40 
\f5\fs20 {\cs39\fs16\up6 $} Parameters & Flows}} {\cs39\fs16\up6 +{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 +} brws4:0055}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 K} Intersect Text}} {\cs39\fs16\up6 !{\footnote 
\pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_text_alm_functions')')}} Intersect Text
\par \pard\plain \s45\li360\sa100\keepn \b\f5\fs20 Text ALM{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f616374696f6e5f696e746572736563745f74657874}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\tab \tab {\uldb\cf11 Usage}{\v  idx_usage_intersect_text}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 
{\*\datafield 6964785f75736167655f696e746572736563745f74657874}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Returns the }shared elements of two Text objects that contain return-delimited lines of data. The shared elements are called the {\cchs256 text intersection.
\par }\pard \s15\li360\sa60\nowidctlpar 
\par \pard\plain \s45\li360\sa100 \b\f5\fs20 {\cf5 \{bmc graphics\\f_txxt.bmp\}}{\cf1  }
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 
\par }\pard\plain \s47\sb40\sa40 \b\f5\fs20 {\cchs256 Input Parameters
\par }\pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 First Text}\tab (Text/Required){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies the first }object{\cchs256 . 
\par }\pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Second Text}\tab (Text/Required){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies the second }object{\cchs256 .
\par }\pard\plain \s49\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Output Parameters
\par }\pard\plain \s33\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Result Text}\tab \tab (Text/Optional){\cchs256 
\par }\pard\plain \s34\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Returns the }text {\cchs256 intersection }for{\cchs256  the two input} parameter{\cchs256 s.
\par }\pard\plain \s33\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Count}\tab (Number/Optional){\cchs256 
\par }\pard\plain \s34\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Reports the number of elements (}that is, {\cchs256 rows) in the }text {\cchs256 intersection.
\par }\pard\plain \s38\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Flows
\par }\pard\plain \s29\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Done
\par }\pard\plain \s30\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed after the }text {\cchs256 intersection }has been{\cchs256  returned.}
\par \pard\plain \s44\sb20\sa40\keepn \b\f5 \page {\cs39\fs16\up6 {\*\bkmkstart idx_usage_intersect_text}{\*\bkmkend idx_usage_intersect_text}#{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_usage_intersect_text}} {\cs39\fs16\up6 +{\footnote 
\pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 +} func12:0010}} {\cs39\fs16\up6 ${\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 $} Usage}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 K} Intersect Text}} {\cs39\fs16\up6 !
{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_intersect_text')')}} Usage
\par \pard\plain \s45\li360\sa100\keepn \b\f5\fs20 Intersect Text
\par \pard\plain \s55 \f5\fs10 {\cchs256 
\par }\pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 This function is equivalent }to{\cchs256  the Boolean operator AND. Input text} string{\cchs256 s }can{\cchs256  contain numerals or text and will typically be Text objects, }
but you can also use {\cchs256 Number, Date, and Time objects. When }you use {\cchs256 Number, Date, or Time objects}, the function converts their values to text before it scans the objects for text intersections.{\cchs256 
\par }\pard \s15\li360\sa60\nowidctlpar Suppose{\cchs256  }First Text{\cchs256  contains the numbers 1, 2, 3, and 4}, {\cchs256 and }Second Text{\cchs256  contains the numbers 2 and 3}
. Each number in both objects is followed by a return. The function returns the numbers 2 and 3, including the returns.{\cchs256 
\par }\pard\plain \s44\sb20\sa40\keepn \b\f5 \page {\cs39\fs16\up6 {\*\bkmkstart idx_left_text}{\*\bkmkend idx_left_text}#{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_left_text}} {\cs39\fs16\up6 ${\footnote \pard\plain \s40 \f5\fs20 {
\cs39\fs16\up6 $} Parameters & Flows}} {\cs39\fs16\up6 +{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 +} brws4:0060}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 K} Left Text}} {\cs39\fs16\up6 !{\footnote \pard\plain \s40 
\f5\fs20 {\cs39\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_text_alm_functions')')}} Left Text
\par \pard\plain \s45\li360\sa100\keepn \b\f5\fs20 Text ALM{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f616374696f6e5f6c6566745f74657874}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}\tab \tab {
\uldb\cf11 Usage}{\v  idx_usage_left_text}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 
6964785f75736167655f6c6566745f74657874}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Returns a character string }that is copied {\cchs256 from the left }side {\cchs256 of a text} string{\cchs256 .}
 For languages that are read from left to right, the left side is the beginning of the text string. {\cchs256 
\par }\pard \s15\li360\sa60\nowidctlpar 
\par \pard\plain \s45\li360\sa100 \b\f5\fs20 {\cf5 \{bmc graphics\\f_txls.bmp\}}{\cf1  }
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 
\par }\pard\plain \s47\sb40\sa40 \b\f5\fs20 {\cchs256 Input Parameters
\par }\pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Text}\tab (Text/Required){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 Identifies the source text.{\cchs256 
\par }\pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Count}\tab (Number/Required){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies the number of characters to copy. If }you enter a {\cchs256 number }that is {\cchs256 less than or equal to 0, this function }doesn't do{\cchs256  }anything{\cchs256 .
\par }\pard\plain \s49\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Output Parameters
\par }\pard\plain \s33\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Left-most Text}\tab (Text/Required){\cchs256 
\par }\pard\plain \s34\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Returns a copy of }the specified {\cchs256 characters}. The copy is made from left to right, starting on the left side of the text string.{\cchs256 
\par }\pard\plain \s38\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Flows
\par }\pard\plain \s29\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Done
\par }\pard\plain \s30\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed after the text }string has been{\cchs256  returned.}
\par \pard\plain \s44\sb20\sa40\keepn \b\f5 \page {\cs39\fs16\up6 {\*\bkmkstart idx_usage_left_text}{\*\bkmkend idx_usage_left_text}#{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_usage_left_text}} {\cs39\fs16\up6 +{\footnote \pard\plain \s40 
\f5\fs20 {\cs39\fs16\up6 +} func13:0010}} {\cs39\fs16\up6 ${\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 $} Usage}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 K} Left Text}} {\cs39\fs16\up6 !{\footnote \pard\plain \s40 
\f5\fs20 {\cs39\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_left_text')')}} Usage
\par \pard\plain \s45\li360\sa100\keepn \b\f5\fs20 Left Text
\par \pard\plain \s55 \f5\fs10 {\cchs256 
\par }\pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 Suppose the text string is the word "paradimethylaminobenzaldehyde" and the Count input parameter is 4. The function returns the first four text-string characters, which in this case would be "para".{
\cchs256 
\par }NOTE: The source of the text string isn't affected by this function. The function only copies the specified characters. {\cchs256 To remove a string from the source, use the }{\uldb\cf11 Clear Text}{\v\cf0 idx_clear_text}{\field{\*\fldinst {\cf0 
 macrobutton NextField }}{\fldrslt }}{\field{\*\fldinst  {\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field{\*\fldinst  ADDIN {{\*\datafield 6964785f636c6561725f74657874}}}{\fldrslt }}{\field{\*\fldinst  macrobutton NextField }{\fldrslt }}{\cf0  }{
\cchs256 function.
\par }\pard\plain \s44\sb20\sa40\keepn \b\f5 \page {\cs39\fs16\up6 {\*\bkmkstart idx_load_text_file}{\*\bkmkend idx_load_text_file}#{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_load_text_file}} {\cs39\fs16\up6 ${\footnote \pard\plain \s40 
\f5\fs20 {\cs39\fs16\up6 $} Parameters & Flows}} {\cs39\fs16\up6 +{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 +} brws4:0065}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 K} Load Text File}} {\cs39\fs16\up6 !{\footnote 
\pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 !}  EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_text_alm_functions')')}} Load Text File
\par \pard\plain \s45\li360\sa100\keepn \b\f5\fs20 Text ALM{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f616374696f6e5f6c6f61645f746578745f66696c65}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\tab \tab {\uldb\cf11 Usage}{\v  idx_usage_load_text_file}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 
{\*\datafield 6964785f75736167655f6c6f61645f746578745f66696c65}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Loads }a Text object with {\cchs256 the contents of }an{\cchs256  ASCII file} {\cchs256 or displays }an{\cchs256  open dialog that allows }an application's{\cchs256  user to choose the file} {
\cchs256 manually.
\par }\pard \s15\li360\sa60\nowidctlpar 
\par \pard\plain \s45\li360\sa100 \b\f5\fs20 {\cf5 \{bmc graphics\\f_txlt.bmp\}}{\cf1  }
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 
\par }\pard\plain \s47\sb40\sa40 \b\f5\fs20 {\cchs256 Input Parameters
\par }\pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Pathname}\tab \tab (Text/Optional){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies the pathname of the file to }be {\cchs256 load}ed{\cchs256 . If }you don't enter a pathname, {\cchs256 the function displays the open }file {\cchs256 dialog.
\par }\pard\plain \s49\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Output Parameters
\par }\pard\plain \s33\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Text}\tab (Text/Optional){\cchs256 
\par }\pard\plain \s34\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Returns the contents of the specified file.
\par }\pard\plain \s33\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Pathname}\tab \tab (Text/Optional){\cchs256 
\par }\pard\plain \s34\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Reports the pathname of the file}. {\cchs256 
\par }\pard\plain \s38\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Flows
\par }\pard\plain \s29\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Loaded
\par }\pard\plain \s30\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed after the file }has been{\cchs256  loaded.
\par }\pard\plain \s29\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Canceled
\par }\pard\plain \s30\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed if }a{\cchs256  user cancels the open }file {\cchs256 dialog.
\par }\pard\plain \s29\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Failed
\par }\pard\plain \s30\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed if an error occurs and the file can't be loaded.}
\par \pard\plain \s44\sb20\sa40\keepn \b\f5 \page {\cs39\fs16\up6 {\*\bkmkstart idx_usage_load_text_file}{\*\bkmkend idx_usage_load_text_file}#{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_usage_load_text_file}} {\cs39\fs16\up6 +{\footnote 
\pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 +} func14:0010}} {\cs39\fs16\up6 ${\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 $} Usage}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 K} Load Text File}} {\cs39\fs16\up6 !
{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_load_text_file')')}} Usage
\par \pard\plain \s45\li360\sa100\keepn \b\f5\fs20 Load Text File
\par \pard\plain \s55 \f5\fs10 {\cchs256 
\par }\pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 This function opens a file, copies its contents into }a{\cchs256  Text object, and closes the file.
\par }\pard\plain \s44\sb20\sa40\keepn \b\f5 \page {\cs39\fs16\up6 {\*\bkmkstart idx_merge_text}{\*\bkmkend idx_merge_text}#{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_merge_text}} {\cs39\fs16\up6 ${\footnote \pard\plain \s40 \f5\fs20 {
\cs39\fs16\up6 $} Parameters & Flows}} {\cs39\fs16\up6 +{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 +} brws4:0070}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 K} Merge Text}} {\cs39\fs16\up6 !{\footnote \pard\plain 
\s40 \f5\fs20 {\cs39\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_text_alm_functions')')}} Merge Text
\par \pard\plain \s45\li360\sa100\keepn \b\f5\fs20 Text ALM{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f616374696f6e5f6d657267655f74657874}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}\tab \tab {
\uldb\cf11 Usage}{\v  idx_usage_merge_text}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 
6964785f75736167655f6d657267655f74657874}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Returns the union of two }object{\cchs256 s }that {\cchs256 contain return-delimited lines of data. }It eliminates {\cchs256 duplicate items.
\par }\pard \s15\li360\sa60\nowidctlpar 
\par \pard\plain \s45\li360\sa100 \b\f5\fs20 {\cf5 \{bmc graphics\\f_txun.bmp\}}{\cf1  }
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 
\par }\pard\plain \s47\sb40\sa40 \b\f5\fs20 {\cchs256 Input Parameters
\par }\pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 First Text}\tab (Text/Required){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies the first }object{\cchs256 .
\par }\pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Second Text}\tab (Text/Required){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies the second }object{\cchs256 . 
\par }\pard\plain \s49\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Output Parameters
\par }\pard\plain \s33\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Merged Text}\tab (Text/Optional){\cchs256 
\par }\pard\plain \s34\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Returns the union of the two sets}. It doesn't include duplicates.{\cchs256 
\par }\pard\plain \s33\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Count}\tab (Number/Optional){\cchs256 
\par }\pard\plain \s34\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Reports the number of elements (}that is, {\cchs256 rows) in the merged text.
\par }\pard\plain \s38\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Flows
\par }\pard\plain \s29\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Done
\par }\pard\plain \s30\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed after the merged text }has been{\cchs256  returned.}
\par \pard\plain \s44\sb20\sa40\keepn \b\f5 \page {\cs39\fs16\up6 {\*\bkmkstart idx_usage_merge_text}{\*\bkmkend idx_usage_merge_text}#{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_usage_merge_text}} {\cs39\fs16\up6 +{\footnote \pard\plain \s40 
\f5\fs20 {\cs39\fs16\up6 +} func15:0010}} {\cs39\fs16\up6 ${\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 $} Usage}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 K} Merge Text}} {\cs39\fs16\up6 !{\footnote \pard\plain \s40 
\f5\fs20 {\cs39\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_merge_text')')}} Usage
\par \pard\plain \s45\li360\sa100\keepn \b\f5\fs20 Merge Text
\par \pard\plain \s55 \f5\fs10 {\cchs256 
\par }\pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 This function is equivalent }to{\cchs256  the Boolean operator OR. Input} text string{\cchs256 s }
can contain numerals or text and will typically be Text objects, but you can also use Number, Date, and Time objects. When you use Number, Date, or Time objects, the function converts their values to text before it combines the contents of the two objects
{\cchs256 .
\par }\pard \s15\li360\sa60\nowidctlpar Suppose {\cchs256 First Text contains the numbers 1, 2, 3, and 4},{\cchs256  and Second Text contains 4 and 5. }
Each number in both objects is followed by a return. The function adds 5 to the contents of First Text and returns {\cchs256 1, 2, 3, 4, }and {\cchs256 5}, including the returns{\cchs256 . }
Note that it doesn't duplicate 4, which was the only shared number.{\cchs256 
\par }\pard\plain \s44\sb20\sa40\keepn \b\f5 \page {\cs39\fs16\up6 {\*\bkmkstart idx_mid_text}{\*\bkmkend idx_mid_text}#{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_mid_text}} {\cs39\fs16\up6 ${\footnote \pard\plain \s40 \f5\fs20 {
\cs39\fs16\up6 $} Parameters & Flows}} {\cs39\fs16\up6 +{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 +} brws4:0075}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 K} Mid Text}} {\cs39\fs16\up6 !{\footnote \pard\plain \s40 
\f5\fs20 {\cs39\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_text_alm_functions')')}} Mid Text
\par \pard\plain \s45\li360\sa100\keepn \b\f5\fs20 Text ALM{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f616374696f6e5f6d69645f74657874}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}\tab \tab {
\uldb\cf11 Usage}{\v  idx_usage_mid_text}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 
6964785f75736167655f6d69645f74657874}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Returns a character string }that it copies from inside a text string.{\cchs256 
\par }\pard \s15\li360\sa60\nowidctlpar 
\par \pard\plain \s45\li360\sa100 \b\f5\fs20 {\cf5 \{bmc graphics\\f_txms.bmp\}}{\cf1  }
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 
\par }\pard\plain \s47\sb40\sa40 \b\f5\fs20 {\cchs256 Input Parameters
\par }\pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Text}\tab (Text/Required){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Identifies the }object where the {\cchs256 text} string is stored{\cchs256 .
\par }\pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Start}\tab (Number/Required){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies the position }in the text string where the function is to begin counting.{\cchs256 
\par }\pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Count}\tab (Number/Required){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies the number of characters to }be {\cchs256 copied. }
If Count is positive, the function counts from left to right. If Count is negative, it counts from right to left. In either case, the starting point is the first character to be counted.{\cchs256 
\par }\pard\plain \s49\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Output Parameters
\par }\pard\plain \s33\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Mid Text}\tab (Text/Required){\cchs256 
\par }\pard\plain \s34\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Returns a copy of the }specified text-string {\cchs256 characters.
\par }\pard\plain \s38\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Flows
\par }\pard\plain \s29\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Done
\par }\pard\plain \s30\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed after the text }has been{\cchs256  returned.}
\par \pard\plain \s44\sb20\sa40\keepn \b\f5 \page {\cs39\fs16\up6 {\*\bkmkstart idx_usage_mid_text}{\*\bkmkend idx_usage_mid_text}#{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_usage_mid_text}} {\cs39\fs16\up6 +{\footnote \pard\plain \s40 
\f5\fs20 {\cs39\fs16\up6 +} func16:0010}} {\cs39\fs16\up6 ${\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 $} Usage}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 K} Mid Text}} {\cs39\fs16\up6 !{\footnote \pard\plain \s40 
\f5\fs20 {\cs39\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_mid_text')')}} Usage
\par \pard\plain \s45\li360\sa100\keepn \b\f5\fs20 Mid Text
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 Suppose a text string is "paradimethylaminobenzaldehyde". 
\par \pard\plain \s21\fi-360\li720\sa60\nowidctlpar \f5\fs20\cf1 1.\tab If Start is 5 and Count is 8, the function returns "dimethyl".
\par \pard \s21\fi-360\li720\sa60\nowidctlpar 2.\tab If Start is 18 and Count is {\cchs256 -6, the }function returns {\cchs256 "}amino{\cchs256 ".}
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 NOTE: {\cchs256 The }source of the text string isn't affected by this function. The function only copies the specified characters. To remove a string from the source, use the {\uldb\cf11 Clear Text}{
\v\cf0 idx_clear_text}{\field{\*\fldinst {\cf0  macrobutton NextField }}{\fldrslt }}{\field{\*\fldinst  {\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field{\*\fldinst  ADDIN {{\*\datafield 6964785f636c6561725f74657874}}}{\fldrslt }}{\field{\*\fldinst 
 macrobutton NextField }{\fldrslt }}{\cf0  }{\cchs256 function.}
\par \pard\plain \s44\sb20\sa40\keepn \b\f5 \page {\cs39\fs16\up6 {\*\bkmkstart idx_omit_text}{\*\bkmkend idx_omit_text}#{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_omit_text}} {\cs39\fs16\up6 ${\footnote \pard\plain \s40 \f5\fs20 {
\cs39\fs16\up6 $} Parameters & Flows}} {\cs39\fs16\up6 +{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 +} brws4:0080}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 K} Omit Text}} {\cs39\fs16\up6 !{\footnote \pard\plain \s40 
\f5\fs20 {\cs39\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_text_alm_functions')')}} Omit Text
\par \pard\plain \s45\li360\sa100\keepn \b\f5\fs20 Text ALM\tab \tab {\uldb\cf11 Usage}{\v  idx_usage_omit_text}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f75736167655f6f6d69745f74657874}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 
Deletes a text string from an object. The function compares the contents of two objects. If both objects share the same text string, the function deletes it from the second object. The inputs have to be delimited by returns. {\cchs256 
\par }\pard \s15\li360\sa60\nowidctlpar 
\par \pard\plain \s45\li360\sa100 \b\f5\fs20 {\cf5 \{bmc graphics\\f_txom.bmp\}}{\cf1  }
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 
\par }\pard\plain \s47\sb40\sa40 \b\f5\fs20 {\cchs256 Input Parameters
\par }\pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Omissions Text}\tab (Text/Required){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies one or more text strings to be delete}d{\cchs256 .
\par }\pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Text}\tab (Text/Required){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies the }object{\cchs256  }where the text strings are to be deleted{\cchs256 
\par }\pard\plain \s49\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Output Parameters
\par }\pard\plain \s33\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Result Text}\tab \tab (Text/Optional){\cchs256 
\par }\pard\plain \s34\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Returns the }modified{\cchs256  text}.{\cchs256 
\par }\pard\plain \s33\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Count}\tab (Number/Optional){\cchs256 
\par }\pard\plain \s34\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Reports the number of elements (}that is, {\cchs256 rows) in the }modified{\cchs256  text.
\par }\pard\plain \s38\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Flows
\par }\pard\plain \s29\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Done
\par }\pard\plain \s30\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed after the result text }has been{\cchs256  returned.}
\par \pard\plain \s44\sb20\sa40\keepn \b\f5 \page {\cs39\fs16\up6 {\*\bkmkstart idx_usage_omit_text}{\*\bkmkend idx_usage_omit_text}#{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_usage_omit_text}} {\cs39\fs16\up6 +{\footnote \pard\plain \s40 
\f5\fs20 {\cs39\fs16\up6 +} func17:0010}} {\cs39\fs16\up6 ${\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 $} Usage}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 K} Omit Text}} {\cs39\fs16\up6 !{\footnote \pard\plain \s40 
\f5\fs20 {\cs39\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_omit_text')')}} Usage
\par \pard\plain \s45\li360\sa100\keepn \b\f5\fs20 Omit Text
\par \pard\plain \s55 \f5\fs10 {\cchs256 
\par }\pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Input} text string{\cchs256 s }can contain numerals or text and will typicall
y be Text objects, but you can also use Number, Date, and Time objects. When you use Number, Date, or Time objects, the function converts their values to text before it combines the contents of the two objects{\cchs256 .}
\par Suppose Omissions Text contains the numbers 2, 3, and 4, and Text contains the numbers 3, 4, 5, and 6. Each number in both objects is followed by a return. The function deletes 3 and 4 from Text and returns 5 and 6. {\cchs256 
\par }\pard\plain \s44\sb20\sa40\keepn \b\f5 \page {\cs39\fs16\up6 {\*\bkmkstart idx_right_text}{\*\bkmkend idx_right_text}#{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_right_text}} {\cs39\fs16\up6 ${\footnote \pard\plain \s40 \f5\fs20 {
\cs39\fs16\up6 $} Parameters & Flows}} {\cs39\fs16\up6 +{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 +} brws4:0085}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 K} Right Text}} {\cs39\fs16\up6 !{\footnote \pard\plain 
\s40 \f5\fs20 {\cs39\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_text_alm_functions')')}} Right Text
\par \pard\plain \s45\li360\sa100\keepn \b\f5\fs20 Text ALM{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f616374696f6e5f72696768745f74657874}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}\tab \tab {
\uldb\cf11 Usage}{\v  idx_usage_right_text}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 
6964785f75736167655f72696768745f74657874}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Returns a character string }that is copied from the right side of a text string.{\cchs256 
\par }\pard \s15\li360\sa60\nowidctlpar 
\par \pard\plain \s45\li360\sa100 \b\f5\fs20 {\cf5 \{bmc graphics\\f_txrs.bmp\}}{\cf1  }
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 
\par }\pard\plain \s47\sb40\sa40 \b\f5\fs20 {\cchs256 Input Parameters
\par }\pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Text}\tab (Text/Required){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 Identifies the object that contains the text string.{\cchs256 
\par }\pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Count}\tab (Number/Required){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies the number of characters to }be {\cchs256 copied. If the number is less than or equal to 0, }the function doesn't do anything.{\cchs256 
\par }\pard\plain \s49\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Output Parameters
\par }\pard\plain \s33\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Right-most Text}\tab (Text/Required){\cchs256 
\par }\pard\plain \s34\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Returns a copy of }the specified {\cchs256 characters}. The copy is made from left to right, starting on the right side of the text string.{\cchs256 
\par }\pard\plain \s38\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Flows
\par }\pard\plain \s29\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Done
\par }\pard\plain \s30\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed after the text }has been {\cchs256 returned.}
\par \pard\plain \s44\sb20\sa40\keepn \b\f5 \page {\cs39\fs16\up6 {\*\bkmkstart idx_usage_right_text}{\*\bkmkend idx_usage_right_text}#{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_usage_right_text}} {\cs39\fs16\up6 +{\footnote \pard\plain \s40 
\f5\fs20 {\cs39\fs16\up6 +} func18:0010}} {\cs39\fs16\up6 ${\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 $} Usage}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 K} Right Text}} {\cs39\fs16\up6 !{\footnote \pard\plain \s40 
\f5\fs20 {\cs39\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_right_text')')}} Usage
\par \pard\plain \s45\li360\sa100\keepn \b\f5\fs20 Right Text
\par \pard\plain \s55 \f5\fs10 {\cchs256 
\par }\pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 
Suppose the text string is the word "paradimethylaminobenzaldehyde" and the Count input parameter is 12. The function returns the last 12 text-string characters, which in this case would be "benzaldehyde".{\cchs256 
\par }NOTE: The source of the text string isn't affected by this function. The function only copies the specified characters. {\cchs256 To remove a string from the source, use the }{\uldb\cf11 Clear Text}{\v\cf0 idx_clear_text}{\field{\*\fldinst {\cf0 
 macrobutton NextField }}{\fldrslt }}{\field{\*\fldinst  {\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field{\*\fldinst  ADDIN {{\*\datafield 6964785f636c6561725f74657874}}}{\fldrslt }}{\field{\*\fldinst  macrobutton NextField }{\fldrslt }}{\cf0  }{
\cchs256 function.
\par }\pard\plain \s44\sb20\sa40\keepn \b\f5 \page {\cs39\fs16\up6 {\*\bkmkstart idx_save_text_file}{\*\bkmkend idx_save_text_file}#{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_save_text_file}} {\cs39\fs16\up6 ${\footnote \pard\plain \s40 
\f5\fs20 {\cs39\fs16\up6 $} Parameters & Flows}} {\cs39\fs16\up6 +{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 +} brws4:0090}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 K} Save Text File}} {\cs39\fs16\up6 !{\footnote 
\pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_text_alm_functions')')}} Save Text File
\par \pard\plain \s45\li360\sa100\keepn \b\f5\fs20 Text ALM
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Displays the save file dialog }so that{\cchs256  }an application's{\cchs256  user}s{\cchs256  }can{\cchs256  save the contents of a Text object to a standard ASCII file.
\par }\pard \s15\li360\sa60\nowidctlpar 
\par \pard\plain \s45\li360\sa100 \b\f5\fs20 {\cf5 \{bmc graphics\\f_txst.bmp\}}{\cf1  }
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 
\par }\pard\plain \s47\sb40\sa40 \b\f5\fs20 {\cchs256 Input Parameters
\par }\pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Text}\tab (Text/Required){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Identifies the Text }object whose contents are {\cchs256 to }be {\cchs256 save}d{\cchs256 .
\par }\pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Creator Type}\tab (Text/Optional){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 Specifies{\cchs256  the Macintosh creator type}, which is{\cchs256  also known as the application signature. The creator type is a unique},{\cchs256  four-character string}.{\cchs256  It identif}ies{
\cchs256  the application that created }a{\cchs256  file. }When you double-click a file, {\cchs256 Macintosh Finder }uses the creator type to identify and launch the application{\cchs256 . Creator }T{\cchs256 ype is }only {\cchs256 used }by {\cchs256 
Macintosh applications, but }it {\cchs256 is }also {\cchs256 available }for{\cchs256  the Windows environment to facilitate }Windows{\cchs256 -Macintosh portability.}
\par \pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Pathname}\tab (Text/Optional){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies the full pathname of the file to }be {\cchs256 save}d{\cchs256 . If }you don't enter a pathname, {\cchs256 the function displays the }save file{\cchs256  dialog }so that{\cchs256  }
an application's{\cchs256  user}s{\cchs256  }can{\cchs256  name }the new file and choose a location for it{\cchs256 . 
\par }\pard\plain \s49\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Output Parameters
\par }\pard\plain \s33\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Pathname}\tab (Text/Optional){\cchs256 
\par }\pard\plain \s34\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Reports the pathname of the file}.{\cchs256 
\par }\pard\plain \s38\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Flows
\par }\pard\plain \s29\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Saved
\par }\pard\plain \s30\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed after the file }has been{\cchs256  saved.
\par }\pard\plain \s29\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Canceled
\par }\pard\plain \s30\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed if the user cancels the save }file {\cchs256 dialog.
\par }\pard\plain \s29\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Failed
\par }\pard\plain \s30\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed if an error occurs and the text cannot be saved.}
\par \pard\plain \s44\sb20\sa40\keepn \b\f5 \page {\cs39\fs16\up6 {\*\bkmkstart idx_text_font_size}{\*\bkmkend idx_text_font_size}#{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_text_font_size}} {\cs39\fs16\up6 ${\footnote \pard\plain \s40 
\f5\fs20 {\cs39\fs16\up6 $} Parameters & Flows}} {\cs39\fs16\up6 +{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 +} brws4:0095}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 K} Text Font Size}} {\cs39\fs16\up6 !{\footnote 
\pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_text_alm_functions')')}} Text Font Size
\par \pard\plain \s45\li360\sa100\keepn \b\f5\fs20 Text ALM
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Changes }the {\cchs256 font or size of a text} string{\cchs256 .
\par }\pard \s15\li360\sa60\nowidctlpar 
\par \pard\plain \s45\li360\sa100 \b\f5\fs20 {\cf5 \{bmc graphics\\f_txfs.bmp\}}{\cf1  }
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 
\par }\pard\plain \s47\sb40\sa40 \b\f5\fs20 {\cchs256 Input Parameters
\par }\pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Text}\tab (Text/Required){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Identifies the Text }object {\cchs256 wh}ere the {\cchs256 font or size is to be changed.
\par }\pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Font}\tab (Text/Optional){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies the name of the new font. If }you don't specify a {\cchs256 font, the }function doesn't change anything{\cchs256 . 
\par }\pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Size}\tab (Number/Optional){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies the new }font {\cchs256 size. If }you don't specify a new font {\cchs256 size},{\cchs256  the }function doesn't change anything{\cchs256 . 
\par }\pard\plain \s38\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Flows
\par }\pard\plain \s29\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Done
\par }\pard\plain \s30\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed after the font or size }has been{\cchs256  changed.}
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Changes }the {\cchs256 font or size of a text} string{\cchs256 .
\par }\pard\plain \s44\sb20\sa40\keepn \b\f5 \page {\cs39\fs16\up6 {\*\bkmkstart idx_text_length}{\*\bkmkend idx_text_length}#{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_text_length}} {\cs39\fs16\up6 ${\footnote \pard\plain \s40 \f5\fs20 {
\cs39\fs16\up6 $} Parameters & Flows}} {\cs39\fs16\up6 +{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 +} brws4:0100}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 K} Text Length}} {\cs39\fs16\up6 !{\footnote \pard\plain 
\s40 \f5\fs20 {\cs39\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_text_alm_functions')')}} Text Length
\par \pard\plain \s45\li360\sa100\keepn \b\f5\fs20 Text ALM
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Reports the number of characters in }a Text object{\cchs256 .
\par }\pard \s15\li360\sa60\nowidctlpar 
\par \pard\plain \s45\li360\sa100 \b\f5\fs20 {\cf5 \{bmc graphics\\f_txln.bmp\}}{\cf1  }
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 
\par }\pard\plain \s47\sb40\sa40 \b\f5\fs20 {\cchs256 Input Parameters
\par }\pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Text}\tab (Text/Required){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Identifies the Text} object whose contents are to be measured{\cchs256 .
\par }\pard\plain \s49\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Output Parameters
\par }\pard\plain \s33\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Length}\tab (Number/Required){\cchs256 
\par }\pard\plain \s34\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Reports the number of characters in the text.
\par }\pard\plain \s38\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Flows
\par }\pard\plain \s29\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Done
\par }\pard\plain \s30\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed after the length }has been{\cchs256  returned.}
\par \pard\plain \s44\sb20\sa40\keepn \b\f5 \page {\cs39\fs16\up6 {\*\bkmkstart idx_uppercase}{\*\bkmkend idx_uppercase}#{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 #} idx_uppercase}} {\cs39\fs16\up6 ${\footnote \pard\plain \s40 \f5\fs20 {
\cs39\fs16\up6 $} Parameters & Flows}} {\cs39\fs16\up6 +{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 +} brws4:0105}} {\cs39\fs16\up6 K{\footnote \pard\plain \s40 \f5\fs20 {\cs39\fs16\up6 K} Uppercase}} {\cs39\fs16\up6 !{\footnote \pard\plain \s40 
\f5\fs20 {\cs39\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_text_alm_functions')')}} Uppercase
\par \pard\plain \s45\li360\sa100\keepn \b\f5\fs20 Text ALM
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s15\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 Copies{\cchs256  text and converts }the copied {\cchs256 characters to their uppercase equivalents.
\par }\pard \s15\li360\sa60\nowidctlpar 
\par \pard\plain \s45\li360\sa100 \b\f5\fs20 {\cf5 \{bmc graphics\\f_txuc.bmp\}}{\cf1  }
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 
\par }\pard\plain \s47\sb40\sa40 \b\f5\fs20 {\cchs256 Input Parameters
\par }\pard\plain \s31\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Text}\tab (Text/Required){\cchs256 
\par }\pard\plain \s32\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Identifies the Text} object whose contents are to be modified{\cchs256 .
\par }\pard\plain \s49\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Output Parameters
\par }\pard\plain \s33\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Upper Text}\tab \tab (Text/Required){\cchs256 
\par }\pard\plain \s34\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Returns a copy of the text }that has been {\cchs256 converted to upper case. 
\par }\pard\plain \s38\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Flows
\par }\pard\plain \s29\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Done
\par }\pard\plain \s30\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed after an uppercase }version{\cchs256  of the text }has been{\cchs256  returned.}
\par }