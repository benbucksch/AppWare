{\rtf1\ansi \deff5\deflang1033{\fonttbl{\f0\froman\fcharset0\fprq2 Tms Rmn;}{\f1\froman\fcharset2\fprq2 Symbol;}{\f2\fswiss\fcharset0\fprq2 Helv;}{\f3\fmodern\fcharset0\fprq1 Courier;}
{\f4\froman\fcharset0\fprq2 Times New Roman;}{\f5\fswiss\fcharset0\fprq2 Arial;}{\f6\froman\fcharset0\fprq2 MS Serif;}{\f7\fswiss\fcharset0\fprq2 MS Sans Serif;}{\f8\froman\fcharset0\fprq2 Times;}{\f9\fswiss\fcharset0\fprq2 Helvetica;}
{\f10\fswiss\fcharset0\fprq2 System;}{\f11\fmodern\fcharset0\fprq1 Courier New;}{\f12\fnil\fcharset2\fprq2 Wingdings;}{\f13\fnil\fcharset0\fprq2 WP OverflowSet;}{\f14\fscript\fcharset0\fprq2 Brush738 BT;}{\f15\fscript\fcharset0\fprq2 Blackletter686 BT;}
{\f16\froman\fcharset0\fprq2 Arrus Blk BT;}{\f17\froman\fcharset2\fprq2 MT Extra;}{\f18\fmodern\fcharset2\fprq1 MS LineDraw;}{\f19\fdecor\fcharset0\fprq2 Algerian;}{\f20\fswiss\fcharset0\fprq2 Arial Rounded MT Bold;}
{\f21\froman\fcharset0\fprq2 Bookman Old Style;}{\f22\fdecor\fcharset0\fprq2 Braggadocio;}{\f23\fswiss\fcharset0\fprq2 Britannic Bold;}{\f24\fscript\fcharset0\fprq2 Brush Script MT;}{\f25\fswiss\fcharset0\fprq2 Century Gothic;}
{\f26\fdecor\fcharset0\fprq2 Colonna MT;}{\f27\fdecor\fcharset0\fprq2 Desdemona;}{\f28\froman\fcharset0\fprq2 Footlight MT Light;}{\f29\fswiss\fcharset0\fprq2 Impact;}{\f30\fdecor\fcharset0\fprq2 Kino MT;}{\f31\froman\fcharset0\fprq2 Wide Latin;}
{\f32\fscript\fcharset0\fprq2 Matura MT Script Capitals;}{\f33\fdecor\fcharset0\fprq2 Playbill;}{\f34\fswiss\fcharset2\fprq2 WP Phonetic;}{\f35\fnil\fcharset2\fprq2 WP MathExtendedB;}{\f36\fmodern\fcharset0\fprq1 WP BoxDrawing;}
{\f37\fnil\fcharset2\fprq2 WP IconicSymbolsB;}{\f38\fnil\fcharset2\fprq2 WP Greek Helve;}{\f39\fnil\fcharset2\fprq2 WP MathExtendedA;}{\f40\froman\fcharset2\fprq2 WP CyrillicA;}{\f41\fnil\fcharset2\fprq2 WP Japanese;}{\f42\fnil\fcharset2\fprq2 WP MathB;}
{\f43\fnil\fcharset2\fprq2 WP IconicSymbolsA;}{\f44\fnil\fcharset2\fprq2 WP Arabic Sihafa;}{\f45\froman\fcharset2\fprq2 WP MultinationalA Roman;}{\f46\fnil\fcharset0\fprq2 WP CyrillicB;}{\f47\fnil\fcharset2\fprq2 WP MultinationalB Roman;}
{\f48\fmodern\fcharset2\fprq1 WP Greek Courier;}{\f49\fnil\fcharset2\fprq2 WP MathA;}{\f50\fnil\fcharset2\fprq2 WP ArabicScript Sihafa;}{\f51\fnil\fcharset2\fprq2 WP Greek Century;}{\f52\fnil\fcharset2\fprq2 WP TypographicSymbols;}
{\f53\fnil\fcharset2\fprq2 WP Hebrew David;}{\f54\fnil\fcharset2\fprq2 WP MultinationalA Helve;}{\f55\fnil\fcharset2\fprq2 WP MultinationalB Helve;}{\f56\fmodern\fcharset2\fprq1 WP MultinationalA Courier;}
{\f57\fmodern\fcharset2\fprq1 WP MultinationalB Courier;}{\f58\fscript\fcharset0\fprq2 Ribbon131 Bd BT;}{\f59\froman\fcharset0\fprq2 Humanst521 Lt BT;}{\f60\froman\fcharset0\fprq2 GeoSlab703 Lt BT;}{\f61\fswiss\fcharset0\fprq2 Swis721 BlkEx BT;}
{\f62\fswiss\fcharset0\fprq2 Humanst521 Cn BT;}{\f63\fdecor\fcharset0\fprq2 Onyx BT;}{\f64\fdecor\fcharset0\fprq2 CaslonOpnface BT;}{\f65\fswiss\fcharset0\fprq2 EngraversGothic BT;}{\f66\fscript\fcharset0\fprq2 ShelleyVolante BT;}
{\f67\froman\fcharset0\fprq2 BernhardMod BT;}{\f68\froman\fcharset0\fprq2 Arrus BT;}{\f69\fscript\fcharset0\fprq2 OzHandicraft BT;}{\f70\fswiss\fcharset0\fprq2 AvantGarde;}{\f71\froman\fcharset0\fprq2 Bookman;}
{\f72\fswiss\fcharset0\fprq2 Helvetica-Narrow;}{\f73\froman\fcharset0\fprq2 NewCenturySchlbk;}{\f74\froman\fcharset0\fprq2 Palatino;}{\f75\fscript\fcharset0\fprq2 ZapfChancery;}{\f76\fdecor\fcharset2\fprq2 ZapfDingbats;}
{\f77\froman\fcharset255\fprq2 Roman;}{\f78\fscript\fcharset255\fprq2 Script;}{\f79\fmodern\fcharset255\fprq2 Modern;}{\f80\fswiss\fcharset0\fprq1 MS Dialog;}{\f81\fnil\fcharset0\fprq1 Small Fonts;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;
\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;
\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\f5\fs20 \snext0 Normal;}{\s1\sb240\sa60\keepn \b\f5\fs28\kerning28 \sbasedon0\snext15 heading 1;}{\s2\sb240\sa60\keepn \b\f5 \sbasedon0\snext15 heading 2;}{
\s3\sb240\sa60\keepn \b\f5 \sbasedon0\snext15 heading 3;}{\s4\sb240\sa60\keepn \b\f5 \sbasedon0\snext15 heading 4;}{\*\cs10 \additive Default Paragraph Font;}{\s15\li360\sa60\nowidctlpar \f5\fs20\cf1 \snext15 Body;}{\s16\fi-360\li720\sa60\nowidctlpar 
\f5\fs20\cf1 \sbasedon15\snext16 Body - Bullet;}{\s17\li360\sb120\sa40\nowidctlpar \f5\fs20\cf1 \sbasedon40\snext0 Signal Name;}{\s18\li1400\tqr\tldot\tx8640 \f5\fs20 \sbasedon0\snext0 toc 8;}{\s19\li720\sa60\nowidctlpar \f5\fs20\cf1 \sbasedon41\snext17 
Signal Text;}{\s20\fi-360\li720\sa60\nowidctlpar{\*\pn \pnlvl12\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\f5\fs20\cf1 \sbasedon15\snext20 Body - Indent;}{\s21\fi-360\li720\sa60\nowidctlpar{\*\pn \pnlvl10\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}
\f5\fs20\cf1 \sbasedon20\snext21 Instructions;}{\s22\tqc\tx4320\tqr\tx8640 \f5\fs20 \sbasedon0\snext22 header;}{\s23\tqc\tx4320\tqr\tx8640 \f5\fs20 \sbasedon0\snext23 footer;}{\*\cs24 \additive\f5 \sbasedon10 page number;}{
\s25\fi-360\li720\sa60\nowidctlpar\tx360\tx1224\tx1440 \f5\fs20\cf1 \sbasedon16\snext25 Body - Left;}{\s26\ri432\sb40\sa40 \b\f5\fs20 \sbasedon43\snext26 Platform;}{\s27\li720\ri720\tldot\tx8280\tqr\tx8640 \f5\fs20\cf8 \sbasedon0\snext0 toc 2;}{\*\cs28 
\additive\f5\fs16\up6 \sbasedon10 footnote reference;}{\s29 \f5\fs20 \sbasedon0\snext29 footnote text;}{\s30\sb20\sa40 \b\f5 \sbasedon0\snext0 Help Topic Heading;}{\s31 \b\f5 \sbasedon0\snext31 Help See Also;}{\*\cs32 \additive\f5\super \sbasedon10 
endnote reference;}{\s33 \b\f5 \sbasedon0\snext0 Help Popup Heading;}{\s34\sa60\tx720\tx1260 \b\f5\fs20 \sbasedon0\snext0 Topic Section;}{\s35\sb80 \f11 \sbasedon0\snext0 Function Syntax;}{\s36\sa120\tx2880 \f5\fs16 \sbasedon0\snext36 
Topic Wizard Line 2;}{\s37\sb20\sa40\tx720\tx1260 \b\f5\fs32 \sbasedon30\snext37 new 2;}{\s38\li360\ri20 \f5\fs20 \sbasedon0\snext0 hlpbrz_toc;}{\s39\li360\sa100 \b\f5\fs20 \sbasedon0\snext39 HelpBreeze TOC;}{\s40\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 
\sbasedon15\snext0 Flow Name;}{\s41\li720\sa60\nowidctlpar \f5\fs20\cf1 \sbasedon15\snext40 Flow Text;}{\s43\ri432\sb40\sa40 \b\f5\fs20 \sbasedon0\snext15 Action;}{\s44\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 \sbasedon40\snext0 Input Name;}{
\s45\li720\sa60\nowidctlpar \f5\fs20\cf1 \sbasedon41\snext44 Input Text;}{\s46\ri432\sb40\sa40 \b\f5\fs20 \sbasedon43\snext46 Flows;}{\s47\sb40\sa40 \b\f5\fs20 \sbasedon43\snext47 Input Parameters;}{\s48\sb40\sa40 \b\f5\fs20 \sbasedon43\snext48 Usage;}{
\s49\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 \sbasedon40\snext0 Output Name;}{\s50\li720\sa60\nowidctlpar \f5\fs20\cf1 \sbasedon41\snext49 Output Text;}{\s52\ri432\sb40\sa40 \b\f5\fs20 \sbasedon43\snext52 Output Parameters;}{\s53\li360 
\b\f5\fs20\uldb\cf11 \sbasedon39\snext53 Function Table;}{\s55 \f5\fs10 \sbasedon0\snext55 Space After;}}{\info{\title Introduction to the Application Object}{\author Kathy Schofield}{\doccomm <project = o:\\help\\applicat\\awussysm.hpj>}
{\operator Kathy Schofield}{\creatim\yr1995\mo8\dy10\hr16\min46}{\revtim\yr1995\mo8\dy10\hr16\min46}{\version3}{\edmins9}{\nofpages28}{\nofwords3814}{\nofchars21744}{\vern49203}}\widowctrl\ftnbj\aenddoc\linkstyles\formshade \fet0{\*\template 
C:\\WINWORD\\TEMPLATE\\hlpbrz6.dot}\sectd \linex0\endnhere {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4
\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang
{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \s30\sb20\sa40\keepn \b\f5 {\cs28\fs16\up6 #{\footnote \pard\plain \s29 
\f5\fs20 {\cs28\fs16\up6 #} idx_contents}}{\*\bkmkstart idx_contents}{\*\bkmkend idx_contents} {\cs28\fs16\up6 ${\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 $} Application ALM Contents}} {\cs28\fs16\up6 K{\footnote \pard\plain \s29 \f5\fs20 {
\cs28\fs16\up6 K} Contents}} {\cs28\fs16\up6 !{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 !}  DB(`btn_up')}} Contents
\par \pard\plain \s39\li360\sa100 \b\f5\fs20 
\par {\uldb\cf11 Introduction to the Application ALM}{\v idx_introduction_to_the_application_alm}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f696e74726f64756374696f6e5f746f5f7468655f6170706c69636174696f6e5f616c6d}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par {\uldb\cf11 Editing the Application Object }{\v idx_editing_the_application_object}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {
\cf1  ADDIN }{\cf1 {\*\datafield 6964785f65646974696e675f7468655f6170706c69636174696f6e5f6f626a656374}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par {\uldb\cf11 Application Object Signals}{\v idx_application_object_signals}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1 
 ADDIN }{\cf1 {\*\datafield 6964785f6170706c69636174696f6e5f6f626a6563745f7369676e616c73}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par {\uldb\cf11 Application Functions}{\v idx_application_alm_functions}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{
\cf1 {\*\datafield 6964785f6170706c69636174696f6e5f616c6d5f66756e6374696f6e73}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \pard\plain \s30\sb20\sa40\keepn \b\f5 \page {\cs28\fs16\up6 {\*\bkmkstart idx_introduction_to_the_application_alm}{\*\bkmkend idx_introduction_to_the_application_alm}#{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 #}
 idx_introduction_to_the_application_alm}} {\cs28\fs16\up6 ${\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 $} Introduction to the Application ALM}} {\cs28\fs16\up6 +{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 +} top1:0005}} {\cs28\fs16\up6 
K{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 K} Introduction to the Application ALM}} {\cs28\fs16\up6 !{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 !}  EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_contents')')}} Introduction
\par \pard\plain \s39\li360\sa100\keepn \b\f5\fs20 {\uldb\cf11 Object Editing}{\v  idx_editing_the_application_object}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f65646974696e675f7468655f6170706c69636174696f6e5f6f626a656374}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}\tab \tab {\uldb\cf11 
Signals}{\v  idx_application_object_signals}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 
6964785f6170706c69636174696f6e5f6f626a6563745f7369676e616c73}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}\tab \tab {\uldb\cf11 Functions}{\v  idx_application_alm_functions}{\field\flddirty{\*\fldinst 
 macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f6170706c69636174696f6e5f616c6d5f66756e6374696f6e73}}}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 
The Application object issues all generic application-related and system-related signals. Unlike signals issued by other objects, these signals reflect events occurring in the application or affecting it as a whole. They do not reflect events within speci
fic objects. 
\par As an example of how you can use the Application object, consider the Startup signal. The Startup signal is issued when an application starts up. If you have files to be loaded before a user takes control of the application, you could construct function c
hains that would load the files, and you could then use the Startup signal to call the chain. 
\par The Application object also has functions that can cause your application to idle temporarily. For example, if you want to stop an animated cursor within half a second after the termination of a function chain and the end of processor activity, use the {
\uldb\cf11 Idle}{\v\cf0 idx_idle}{\field\flddirty{\*\fldinst {\cf0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst  {\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst  ADDIN {{\*\datafield 6964785f69646c65}}
}{\fldrslt }}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\cf0  function }to call the {\uldb\cf11 Stop Cursor}{\v\cf0 idx_stop_cursor@awusacur.hlp}{\field\flddirty{\*\fldinst {\cf0  macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst  {\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst  ADDIN {{\*\datafield 6964785f73746f705f637572736f725f616c6d5f616375725f686c70}}}{\fldrslt }}{\field\flddirty{\*\fldinst  macrobutton NextField 
}{\fldrslt }}{\cf0  }function. The Idle and Stop Cursor functions make it unnecessary to call Stop Cursor for every Start Cursor you might use in your application.
\par \pard\plain \s30\sb20\sa40\keepn \b\f5 \page {\cs28\fs16\up6 {\*\bkmkstart idx_editing_the_application_object}{\*\bkmkend idx_editing_the_application_object}#{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 #} idx_editing_the_application_object}} {
\cs28\fs16\up6 ${\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 $} Editing the Application Object}} {\cs28\fs16\up6 +{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 +} top1:0010}} {\cs28\fs16\up6 K{\footnote \pard\plain \s29 \f5\fs20 {
\cs28\fs16\up6 K} Editing the Application Object}} {\cs28\fs16\up6 !{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 !}  EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_contents')')}} Editing the Application Object
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s26\ri432\sb40\sa40 \b\f5\fs20 Windows
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 The Application object does not have an editing dialog.
\par \pard\plain \s26\ri432\sb40\sa40 \b\f5\fs20 Macintosh
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 
The Application object editing dialog lets you specify a minimum low-memory limit for an application. The limit is expressed in bytes. If an application's free-memory size is less than the limit, the Application sends a {\uldb\cf11 Low Memory signal}{
\v\cf0 idx_application_object_signals}{\field\flddirty{\*\fldinst {\cf0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst  {\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst  ADDIN {{\*\datafield 
6964785f6170706c69636174696f6e5f6f626a6563745f7369676e616c73}}}{\fldrslt }}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}. To set the low-memory limit, enter a number in the field.
\par \pard\plain \s30\sb20\sa40\keepn \b\f5 \page {\cs28\fs16\up6 {\*\bkmkstart idx_application_object_signals}{\*\bkmkend idx_application_object_signals}#{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 #} idx_application_object_signals}} {\cs28\fs16\up6 
${\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 $} Application Object Signals}} {\cs28\fs16\up6 +{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 +} top1:0015}} {\cs28\fs16\up6 K{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 K} Applicati
on Object Signals}} {\cs28\fs16\up6 !{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 !}  EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_contents')')}} Application Object Signals
\par \pard\plain \s17\li360\sb120\sa40\nowidctlpar \f5\fs20\cf1 Startup
\par \pard\plain \s19\li720\sa60\nowidctlpar \f5\fs20\cf1 Issued when an application starts up.
\par \pard\plain \s17\li360\sb120\sa40\nowidctlpar \f5\fs20\cf1 Background
\par \pard\plain \s19\li720\sa60\nowidctlpar \f5\fs20\cf1 Issued when a user switches out of your application and into another one.
\par \pard\plain \s17\li360\sb120\sa40\nowidctlpar \f5\fs20\cf1 Foreground
\par \pard\plain \s19\li720\sa60\nowidctlpar \f5\fs20\cf1 Issued when a user switches into your application from another application.
\par \pard\plain \s17\li360\sb120\sa40\nowidctlpar \f5\fs20\cf1 Mouse Double
\par \pard\plain \s19\li720\sa60\nowidctlpar \f5\fs20\cf1 Issued when a user double-clicks the mouse button. (Windows only)
\par \pard\plain \s17\li360\sb120\sa40\nowidctlpar \f5\fs20\cf1 Mouse Down
\par \pard\plain \s19\li720\sa60\nowidctlpar \f5\fs20\cf1 Issued when the mouse button is pressed down, regardless of where the click occurred.
\par \pard\plain \s17\li360\sb120\sa40\nowidctlpar \f5\fs20\cf1 Mouse Up
\par \pard\plain \s19\li720\sa60\nowidctlpar \f5\fs20\cf1 Issued when the mouse button is released, regardless of where the click occurred.
\par \pard\plain \s17\li360\sb120\sa40\nowidctlpar \f5\fs20\cf1 Key Down
\par \pard\plain \s19\li720\sa60\nowidctlpar \f5\fs20\cf1 Issued when a key is pressed, regardless of whether there is an active field to receive the character.
\par \pard\plain \s17\li360\sb120\sa40\nowidctlpar \f5\fs20\cf1 Key Up
\par \pard\plain \s19\li720\sa60\nowidctlpar \f5\fs20\cf1 Issued when a key is released, regardless of whether there is an active field to receive the character.
\par \pard\plain \s17\li360\sb120\sa40\nowidctlpar \f5\fs20\cf1 Disk Inserted
\par \pard\plain \s19\li720\sa60\nowidctlpar \f5\fs20\cf1 Issued when a disk is inserted into the disk drive. This signal is included for users who want to develop Macintosh applications. It is not functional for Windows.
\par \pard\plain \s17\li360\sb120\sa40\nowidctlpar \f5\fs20\cf1 Low Memory
\par \pard\plain \s19\li720\sa60\nowidctlpar \f5\fs20\cf1 Issued whenever the application falls below the memory limit that was specified in the editing dialog. (Mac only)
\par \pard\plain \s30\sb20\sa40\keepn \b\f5 \page {\cs28\fs16\up6 {\*\bkmkstart idx_application_alm_functions}{\*\bkmkend idx_application_alm_functions}#{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 #} idx_application_alm_functions}} {\cs28\fs16\up6 $
{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 $} List of,}} {\cs28\fs16\up6 +{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 +} top1:0020}} {\cs28\fs16\up6 K{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 K} Application Functions}} {
\cs28\fs16\up6 !{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 !}    EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_contents')')}} Application Functions
\par \pard\plain \s39\li360\sa100 \b\f5\fs20 
\par \trowd \trqc\trkeep \cellx2880\cellx5760 \pard\plain \s53\ri16\intbl \b\f5\fs20\uldb\cf11 \{bmc graphics\\i_ejectv.bmp\}{\v idx_eject_volume}{\field\flddirty{\*\fldinst {\b0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\b0\cf1  }{
\b0\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\b0\ulnone\cf1   }Eject Volume{\v  idx_eject_volume}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f656a6563745f766f6c756d65}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \pard \s53\li-180\ri16\intbl \cell \pard \s53\ri180\intbl \{bmc graphics\\i_mouseu.bmp\}{\v idx_mouse_up}{\field\flddirty{\*\fldinst {\b0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\b0\cf1  }{\b0\cf6 macrobutton DoJump2 <+>}
}{\fldrslt }}{\b0\ulnone\cf1   }Mouse Up{\v  idx_mouse_up}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 
{\*\datafield 6964785f6d6f7573655f7570}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \pard \s53\li-180\ri16\intbl \cell \pard\plain \intbl \f5\fs20 \row \trowd \trqc\trkeep \cellx2880\cellx5760 \pard\plain \s53\ri16\intbl \b\f5\fs20\uldb\cf11 \{bmc graphics\\i_fpty.bmp\}{\v  idx_function_priority}{\field\flddirty{\*\fldinst 
 macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\b0\ulnone\cf1   }Function Priority{\v idx_function_priority}{\field\flddirty{\*\fldinst {\b0  macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst {\b0\cf1  }{\b0\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\b0\cf1  ADDIN }{\b0\cf1 {\*\datafield 6964785f66756e6374696f6e5f7072696f72697479}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\b0\cf1 
 macrobutton NextField }}{\fldrslt }}
\par \cell \{bmc graphics\\i_rename.bmp\}{\v idx_rename_volume}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\b0\ulnone\cf1   }Rename Volume{\v idx_rename_volume}
{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f72656e616d655f766f6c756d65}}}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \cell \pard\plain \intbl \f5\fs20 {\b \row }\pard\plain \s53\ri16\intbl \b\f5\fs20\uldb\cf11 \{bmc graphics\\i_gcmd.bmp\}{\v  idx_get_command_line}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 
macrobutton DoJump2 <+>}}{\fldrslt }}{\b0\ulnone\cf1   }Get Command Line{\v  idx_get_command_line}{\field\flddirty{\*\fldinst {\b0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\b0\cf1  }{\b0\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}
{\field\flddirty{\*\fldinst {\b0\cf1  ADDIN }{\b0\cf1 {\*\datafield 6964785f6765745f636f6d6d616e645f6c696e65}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\b0\cf1  macrobutton NextField }}{\fldrslt }}
\par \cell \{bmc graphics\\i_sprs.bmp\}{\v idx_save_persistents}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\b0\ulnone\cf1   }Save Persistents{\v 
 idx_save_persistents}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 
6964785f736176655f70657273697374656e7473}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \cell \pard\plain \intbl \f5\fs20 \row \pard\plain \s53\ri16\intbl \b\f5\fs20\uldb\cf11 \{bmc graphics\\i_getsta.bmp\}{\v idx_get_startup_volume}{\field\flddirty{\*\fldinst {\b0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\b0\cf1  }{
\b0\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\b0\ulnone\cf1   }Get Startup Volume{\v  idx_get_startup_volume}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f6765745f737461727475705f766f6c756d65}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \cell \{bmc graphics\\i_tidl.bmp\}{\v  idx_stop_idle}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\b0\ulnone\cf1   }Stop Idle{\v  idx_stop_idle}
{\field\flddirty{\*\fldinst {\b0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\b0\cf1  }{\b0\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\b0\cf1  ADDIN }{\b0\cf1 {\*\datafield 6964785f73746f705f69646c65}}
}{\fldrslt }}{\field\flddirty{\*\fldinst {\b0\cf1  macrobutton NextField }}{\fldrslt }} 
\par \cell \pard\plain \intbl \f5\fs20 \row \pard\plain \s53\ri16\intbl \b\f5\fs20\uldb\cf11 \{bmc graphics\\i_getvin.bmp\}{\v idx_get_volume_info}{\field\flddirty{\*\fldinst {\b0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\b0\cf1  }{
\b0\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\b0\ulnone\cf1   }Get Volume Info{\v  idx_get_volume_info}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f6765745f766f6c756d655f696e666f}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \cell \{bmc graphics\\i_unmoun.bmp\}{\v idx_unmount_volume}{\field\flddirty{\*\fldinst {\b0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\b0\cf1  }{\b0\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\b0\ulnone\cf1   }Unmount Volume{\v 
 idx_unmount_volume}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 
6964785f756e6d6f756e745f766f6c756d65}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \cell \pard\plain \intbl \f5\fs20 \row \pard\plain \s53\ri16\intbl \b\f5\fs20\uldb\cf11 \{bmc graphics\\i_getvol.bmp\}{\v idx_get_volume_rights}{\field\flddirty{\*\fldinst {\b0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\b0\cf1  }{
\b0\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\b0\ulnone\cf1   }Get Volume Rights{\v  idx_get_volume_rights}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f6765745f766f6c756d655f726967687473}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \cell \{bmc graphics\\i_updw.bmp\}{\v  idx_update_windows}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\b0\ulnone\cf1   }Update Windows{\v 
 idx_update_windows}{\field\flddirty{\*\fldinst {\b0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\b0\cf1  }{\b0\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\b0\cf1  ADDIN }{\b0\cf1 {\*\datafield 
6964785f7570646174655f77696e646f7773}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\b0\cf1  macrobutton NextField }}{\fldrslt }} 
\par \cell \pard\plain \intbl \f5\fs20 {\b \row }\pard\plain \s53\ri16\intbl \b\f5\fs20\uldb\cf11 \{bmc graphics\\i_sidl.bmp\}{\v  idx_idle}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 
macrobutton DoJump2 <+>}}{\fldrslt }}{\b0\ulnone\cf1   }Idle{\v  idx_idle}{\field\flddirty{\*\fldinst {\b0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\b0\cf1  }{\b0\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}
{\field\flddirty{\*\fldinst {\b0\cf1  ADDIN }{\b0\cf1 {\*\datafield 6964785f69646c65}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\b0\cf1  macrobutton NextField }}{\fldrslt }}\cell \{bmc graphics\\i_vpty.bmp\}{\v idx_visual_priority}
{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\b0\ulnone\cf1   }Visual Priority{\v  idx_visual_priority}{\field\flddirty{\*\fldinst  macrobutton NextField 
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f76697375616c5f7072696f72697479}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macr
obutton NextField }}{\fldrslt }}
\par \cell \pard\plain \intbl \f5\fs20 {\b \row }\pard\plain \s53\ri16\intbl \b\f5\fs20\uldb\cf11 \{bmc graphics\\i_initia.bmp\}{\v idx_initialize_floppy}{\field\flddirty{\*\fldinst {\b0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {
\b0\cf1  }{\b0\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\b0\ulnone\cf1   }Initialize Floppy{\v  idx_initialize_floppy}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f696e697469616c697a655f666c6f707079}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \cell \{bmc graphics\\i_volume.bmp\}{\v idx_volume_cd}{\field\flddirty{\*\fldinst {\b0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\b0\cf1  }{\b0\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\b0\ulnone\cf1   }Volume CD?{\v 
 idx_volume_cd}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f766f6c756d655f6364}}
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \cell \pard\plain \intbl \f5\fs20 {\b \row }\trowd \trqc\trkeep \cellx2880\cellx5760 \pard\plain \s53\ri16\intbl \b\f5\fs20\uldb\cf11 \{bmc graphics\\i_mdwn.bmp\}{\v  idx_mouse_button}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\b0\ulnone\cf1   }Mouse Button{\v  idx_mouse_button}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 
macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f6d6f7573655f627574746f6e}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }} 
\par \cell \cell \pard\plain \intbl \f5\fs20 \row \pard\plain \s30\sb20\sa40\keepn \b\f5 \page {\cs28\fs16\up6 {\*\bkmkstart idx_eject_volume}{\*\bkmkend idx_eject_volume}#{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 #} idx_eject_volume}} {
\cs28\fs16\up6 ${\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 $} Parameters & Flows}} {\cs28\fs16\up6 +{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 +} brws3:0005}} {\cs28\fs16\up6 K{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 K}
 Eject Volume}} {\cs28\fs16\up6 !{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 !}    EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_application_alm_functions')')}} Eject Volume - Macintosh
\par \pard\plain \s39\li360\sa100\keepn \b\f5\fs20 {\cchs256 Application} ALM{\field\flddirty{\*\fldinst  ADDIN {{\*\datafield 6964785f616374696f6e5f656a6563745f766f6c756d65}}}{\fldrslt }}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Ejects the specified volume (disk).
\par NOTE: This function does not }remove the volume icon from the desktop. If you want to remove the volume icon, {\cchs256 use the }{\uldb\cf11 Unmount Volume}{\v\cf0 idx_unmount_volume}{\field\flddirty{\*\fldinst {\cf0  macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst  {\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst  ADDIN {{\*\datafield 6964785f756e6d6f756e745f766f6c756d65}}}{\fldrslt }}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\cf0  }{\cchs256 
function.
\par }
\par \pard\plain \s39\li360\sa100 \b\f5\fs20 {\cf5 \{bmc graphics\\f_ejectv.bmp\}}{\cf1  }
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 
\par }\pard\plain \s47\sb40\sa40 \b\f5\fs20 {\cchs256 Input Parameters 
\par }\pard\plain \s44\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Vol Name}\tab (Text/Optional) {\cchs256 
\par }\pard\plain \s45\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies }the volume's name.{\cchs256  The Vol Name parameter is case sensitive.
\par }\pard\plain \s44\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Vol Index}\tab (Number/Optional){\cchs256 
\par }\pard\plain \s45\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies the} volume's{\cchs256  index number.}
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 NOTE: Although you can use either the Vol Name parameter or the Vol Index parameter, you have to use one or the other. The volume name appears under the volume icon on the desktop. {\cchs256 
The index refers to the list of mounted volumes in the operating system. The startup volume has index 1, and volumes are added to the list }as they're mounted{\cchs256 . }
\par \pard\plain \s46\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Flows
\par }\pard\plain \s40\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Ejected
\par }\pard\plain \s41\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed after the volume }has been{\cchs256  ejected.
\par }\pard\plain \s40\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Failed
\par }\pard\plain \s41\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed if the volume cannot be ejected. For example, }you can't eject {\cchs256 a shared volume or the startup volume.
\par }\pard\plain \s40\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 No such volume
\par }\pard\plain \s41\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed if the Vol Index parameter is out of range or the Vol Name parameter is invalid.}
\par \pard\plain \s30\sb20\sa40\keepn \b\f5 \page {\cs28\fs16\up6 {\*\bkmkstart idx_function_priority}{\*\bkmkend idx_function_priority}#{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 #} idx_function_priority}} {\cs28\fs16\up6 ${\footnote \pard\plain 
\s29 \f5\fs20 {\cs28\fs16\up6 $} Parameters & Flows}} {\cs28\fs16\up6 +{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 +} brws3:0010}} {\cs28\fs16\up6 K{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 K} Function Priority}} {\cs28\fs16\up6 !
{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 !}    EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_application_alm_functions')')}} Function Priority
\par \pard\plain \s39\li360\sa100\keepn \b\f5\fs20 Application ALM\tab \tab {\uldb\cf11 Usage}{\v  idx_usage_function_priority}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f75736167655f66756e6374696f6e5f7072696f72697479}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Returns }an{\cchs256  application to }the {\cchs256 function priority mode }after {\cchs256 the }{\uldb\cf11 Visual Priority}{\v\cf0 idx_visual_priority}{\field\flddirty{\*\fldinst {\cf0 
 macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst  {\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst  ADDIN {{\*\datafield 6964785f76697375616c5f7072696f72697479}}}{\fldrslt }}{\field\flddirty{\*\fldinst 
 macrobutton NextField }{\fldrslt }}{\cf0  }{\cchs256 function} has been used{\cchs256 .
\par }
\par \pard\plain \s39\li360\sa100 \b\f5\fs20 {\cf5 \{bmc graphics\\f_fpty.bmp\}}{\cf1  }
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 
\par \pard\plain \s47\sb40\sa40 \b\f5\fs20 Parameters{\cchs256 
\par }\pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 The Function Priority function }doesn't have any{\cchs256  parameters.
\par }\pard\plain \s46\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Flows
\par }\pard\plain \s40\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Done
\par }\pard\plain \s41\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed after the application }has{\cchs256  returned to function priority mode.}
\par \pard\plain \s30\sb20\sa40\keepn \b\f5 \page {\cs28\fs16\up6 {\*\bkmkstart idx_usage_function_priority}{\*\bkmkend idx_usage_function_priority}#{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 #} idx_usage_function_priority}} {\cs28\fs16\up6 $
{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 $} Usage}} {\cs28\fs16\up6 +{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 +} func2:0010}} {\cs28\fs16\up6 K{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 K} Function Priority}} {
\cs28\fs16\up6 !{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 !}   EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_function_priority')')}} Usage
\par \pard\plain \s39\li360\sa100\keepn \b\f5\fs20 Function Priority
\par \pard\plain \s55 \f5\fs10 {\cchs256 
\par }\pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 If you want to use Function Priority, you have to place {\cchs256 an Application object in }your{\cchs256  project}.{\cchs256 
\par The function priority mode }delays{\cchs256  screen refreshes until }a{\cchs256  chain has }been processed{\cchs256  or the }{\uldb\cf11 Visual Priority}{\v\cf0 idx_visual_priority}{\field\flddirty{\*\fldinst {\cf0  macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst  {\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst  ADDIN {{\*\datafield 6964785f76697375616c5f7072696f72697479}}}{\fldrslt }}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\cf0  }{
\cchs256 and the }{\uldb\cf11 Update Windows}{\v\cf0 idx_update_windows}{\field\flddirty{\*\fldinst {\cf0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst  {\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst  ADDIN {
{\*\datafield 6964785f7570646174655f77696e646f7773}}}{\fldrslt }}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\cf0  }{\cchs256 functions }have been{\cchs256  called.}
 Delaying the screen refreshes allows an application to process a function chain more quickly even though it doesn't affect the performance of individual functions within a function chain. {\cchs256 
\par For }an example of how the function priority mode works, suppose you decided to use the{\cchs256  function priority mode} for{\cchs256  a }function chain that increments a {\cchs256 number 100 times}
. The application would process the function chain and then update the screen once. 
\par If you wanted to display {\cchs256 incremental }number {\cchs256 changes, }you could set up a loop. The application would call Visual Priority, the {\uldb\cf11 Start Loop}{\v\cf0 idx_start_loop@awusloop.hlp}{\field{\*\fldinst {\cf0  macrobutton NextField 
}}{\fldrslt }}{\field{\*\fldinst  {\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field{\*\fldinst  ADDIN {{\*\datafield 6964785f73746172745f6c6f6f705f617775736c6f6f705f686c70}}}{\fldrslt }}{\field{\*\fldinst  macrobutton NextField }{\fldrslt }}{\cf0  }
function, and then Function Priority. The Loop object would consist of an increment function and the Update Windows function. The application's processing would return to Function Priority after the loop was finished, and Function Priority would{\cchs256 
 return the application to the default drawing mode.
\par NOTE: Applications default to }the {\cchs256 function priority mode. }To switch modes, you have to use Visual Priority before you use Function Priority. You can nest these functions, so switch 
back to visual priority mode by placing Function Priority after Visual Priority each time you use Visual Priority.
\par \pard\plain \s30\sb20\sa40\keepn \b\f5 \page {\cs28\fs16\up6 {\*\bkmkstart idx_get_command_line}{\*\bkmkend idx_get_command_line}#{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 #} idx_get_command_line}} {\cs28\fs16\up6 ${\footnote \pard\plain \s29 
\f5\fs20 {\cs28\fs16\up6 $} Parameters & Flows}} {\cs28\fs16\up6 +{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 +} brws3:0015}} {\cs28\fs16\up6 K{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 K} Get Command Line}} {\cs28\fs16\up6 !{\footnote 
\pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 !}    EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_application_alm_functions')')}} Get Command Line - Windows
\par \pard\plain \s39\li360\sa100\keepn \b\f5\fs20 {\cchs256 Application} ALM{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f616374696f6e5f6765745f636f6d6d616e645f6c696e65}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1 
 macrobutton NextField }}{\fldrslt }}
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 If an application is being used, this function reports the command line's parameters{\cchs256 .
\par NOTE: This function only works with compiled applications}. It doesn't work {\cchs256 from within the environment.
\par }
\par \pard\plain \s39\li360\sa100 \b\f5\fs20 {\cf5 \{bml graphics\\f_gcmd.bmp\}}{\cf1  }
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 
\par }\pard\plain \s52\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Output Parameters
\par }\pard\plain \s49\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Command Line}\tab (Text/Optional)
\par \pard\plain \s50\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Returns }one or more {\cchs256 parameters. If }you enter {\cchs256 MYAPP.EXE MYFILE YOURFILE }at the command line, {\cchs256 MYFILE YOURFILE} is returned{\cchs256 .
\par }\pard\plain \s46\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Flows
\par }\pard\plain \s40\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Done
\par }\pard\plain \s41\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed after the }function has returned the {\cchs256 command-line values.}
\par \pard\plain \s30\sb20\sa40\keepn \b\f5 \page {\cs28\fs16\up6 {\*\bkmkstart idx_get_startup_volume}{\*\bkmkend idx_get_startup_volume}#{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 #} idx_get_startup_volume}} {\cs28\fs16\up6 ${\footnote \pard\plain 
\s29 \f5\fs20 {\cs28\fs16\up6 $} Parameters & Flows}} {\cs28\fs16\up6 +{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 +} brws3:0020}} {\cs28\fs16\up6 K{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 K} Get Startup Volume}} {\cs28\fs16\up6 !
{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 !}    EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_application_alm_functions')')}} Get Startup Volume - Macintosh
\par \pard\plain \s39\li360\sa100\keepn \b\f5\fs20 {\cchs256 Application} ALM
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Returns the name of the volume} or disk {\cchs256 that contains the current system and }system {\cchs256 pathname.
\par }
\par \pard\plain \s39\li360\sa100 \b\f5\fs20 {\cf5 \{bmc graphics\\f_getsta.bmp\}}{\cf1  }
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 
\par \pard\plain \s52\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Output Parameters
\par }\pard\plain \s49\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Vol Name}\tab {\cchs256 (}Text/{\cchs256 Optional)
\par }\pard\plain \s50\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Returns the name of the volume containing the startup system. This is the disk or partition }that {\cchs256 contains the active System Folder.
\par }\pard\plain \s49\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 System Path}\tab {\cchs256 (}Text/{\cchs256 Optional)
\par }\pard\plain \s50\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Returns the pathname of the active System Folder}. The syntax matches the following example: "{\cchs256 Macintosh HD:System Folder:}".{\cchs256 
\par }\pard\plain \s46\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Flows
\par }\pard\plain \s40\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Done
\par }\pard\plain \s45\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed after the }name of the {\cchs256 system volume and }the {\cchs256 pathname }have been{\cchs256  returned.}
\par \pard\plain \s30\sb20\sa40\keepn \b\f5 \page {\cs28\fs16\up6 {\*\bkmkstart idx_get_volume_info}{\*\bkmkend idx_get_volume_info}#{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 #} idx_get_volume_info}} {\cs28\fs16\up6 ${\footnote \pard\plain \s29 
\f5\fs20 {\cs28\fs16\up6 $} Parameters & Flows}} {\cs28\fs16\up6 +{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 +} brws3:0025}} {\cs28\fs16\up6 K{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 K} Get Volume Info}} {\cs28\fs16\up6 !{\footnote 
\pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 !}     EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_application_alm_functions')')}} Get Volume Info - Macintosh
\par \pard\plain \s39\li360\sa100\keepn \b\f5\fs20 Application ALM
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Returns the }volume's {\cchs256 name, total capacity, and available space}.{\cchs256 
\par }
\par \pard\plain \s39\li360\sa100 \b\f5\fs20 {\cf5 \{bmc graphics\\f_getvin.bmp\}}{\cf1  }
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 
\par \pard\plain \s47\sb40\sa40 \b\f5\fs20 {\cchs256 Input Parameters
\par }\pard\plain \s44\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Vol Name}\tab (Text/Optional){\cchs256 
\par }\pard\plain \s45\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies the }volume's {\cchs256 name. The Vol Name parameter is case sensitive. If }you use Vol Name, the function returns {\cchs256 the }volume's {\cchs256 
total capacity and available space.
\par }\pard\plain \s44\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Vol Index}\tab (Number/Optional){\cchs256 
\par }\pard\plain \s50\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies the }volume's {\cchs256 index number. If }you use {\cchs256 Vol Index, the }function returns the {\cchs256 volume}'s{\cchs256  name, total capacity, and available space.}
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 NOTE: Although you can use either the Vol Name parameter or the Vol Index parameter, you have to use one or the other. The volume name appears under the volume icon on the desktop. {\cchs256 
The index refers to the list of mounted volumes in the operating system. The startup volume has index 1, and volumes are added to the list }as they're mounted{\cchs256 . }
\par \pard\plain \s52\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Output Parameters
\par }\pard\plain \s49\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Vol Name}\tab (Text/Optional){\cchs256 
\par }\pard\plain \s50\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Reports the }volume's {\cchs256 name }if {\cchs256 the volume }was {\cchs256 identified in the Vol Index input parameter.
\par }\pard\plain \s49\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Total}\tab (Text/Optional){\cchs256 
\par }\pard\plain \s50\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Reports the }volume's {\cchs256 total capacity.
\par }\pard\plain \s49\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Available}\tab (Text/Optional){\cchs256 
\par }\pard\plain \s50\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Reports the }volume's {\cchs256 available space.
\par }\pard\plain \s46\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Flows
\par }\pard\plain \s40\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Retrieved
\par }\pard\plain \s41\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed after the volume information }has been{\cchs256  returned.
\par }\pard\plain \s40\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 No such volume
\par }\pard\plain \s41\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed if the volume index is out of range or the volume name is invalid.}
\par \pard\plain \s30\sb20\sa40\keepn \b\f5 \page {\cs28\fs16\up6 {\*\bkmkstart idx_get_volume_rights}{\*\bkmkend idx_get_volume_rights}#{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 #} idx_get_volume_rights}} {\cs28\fs16\up6 ${\footnote \pard\plain 
\s29 \f5\fs20 {\cs28\fs16\up6 $} Parameters & Flows}} {\cs28\fs16\up6 +{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 +} brws3:0030}} {\cs28\fs16\up6 K{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 K} Get Volume Rights}} {\cs28\fs16\up6 !
{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 !}    EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_application_alm_functions')')}} Get Volume Rights - Macintosh
\par \pard\plain \s39\li360\sa100\keepn \b\f5\fs20 Application ALM{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f616374696f6e5f6765745f766f6c756d655f726967687473}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }
}{\fldrslt }}
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Determines the access rights for a specified mounted volume and issues }flows to{\cchs256  indicate the }results{\cchs256 .}
\par 
\par \pard\plain \s39\li360\sa100 \b\f5\fs20 {\cf5 \{bmc graphics\\f_getvol.bmp\}}{\cf1  }
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 
\par \pard\plain \s47\sb40\sa40 \b\f5\fs20 {\cchs256 Input Parameters
\par }\pard\plain \s44\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Vol Name}\tab (Text/Optional){\cchs256 
\par }\pard\plain \s45\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies }the volume's name.{\cchs256  The Vol Name parameter is case sensitive.
\par }\pard\plain \s44\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Vol Index}\tab (Number/Optional){\cchs256 
\par }\pard\plain \s45\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies the} volume's{\cchs256  index number.}
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 NOTE: Although you can use either the Vol Name parameter or the Vol Index parameter, you have to use one or the other. The volume name appears under the volume icon on the desktop. {\cchs256 
The index refers to the list of mounted volumes in the operating system. The startup volume has index 1, and volumes are added to the list }as they're mounted{\cchs256 . }
\par \pard\plain \s46\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Flows
\par }\pard\plain \s40\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Read/write
\par }\pard\plain \s41\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed if the volume allows read and write access.
\par }\pard\plain \s40\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Read only
\par }\pard\plain \s41\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed if the volume allows read-only access.
\par }\pard\plain \s40\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Write only
\par }\pard\plain \s41\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed if the volume allows write-only access.
\par }\pard\plain \s40\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 No access
\par }\pard\plain \s41\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed if the volume }doesn't {\cchs256 allow }any{\cchs256  access.
\par }\pard\plain \s40\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 No such volume
\par }\pard\plain \s41\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed if the volume }hasn't been{\cchs256  mounted.}
\par \pard\plain \s30\sb20\sa40\keepn \b\f5 \page {\cs28\fs16\up6 {\*\bkmkstart idx_idle}{\*\bkmkend idx_idle}#{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 #} idx_idle}} {\cs28\fs16\up6 ${\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 $}
 Parameters & Flows}} {\cs28\fs16\up6 +{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 +} brws3:0035}} {\cs28\fs16\up6 K{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 K} Idle}} {\cs28\fs16\up6 !{\footnote \pard\plain \s29 \f5\fs20 {
\cs28\fs16\up6 !}    EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_application_alm_functions')')}} Idle
\par \pard\plain \s39\li360\sa100\keepn \b\f5\fs20 Application ALM{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f616374696f6e5f69646c65}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}\tab \tab {
\uldb\cf11 Usage}{\v  idx_usage_idle}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f63617574696f6e5f69646c65}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Starts the idling process} by issuing the flow named Started{\field\flddirty{\*\fldinst  ADDIN {{\*\datafield 6964785f6170706c69636174696f6e5f6f626a6563745f7369676e616c73}}}{\fldrslt }}
{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}. As long as the application isn't processing anything, the function{\cchs256  }does the following: 
\par \pard\plain \s21\fi-360\li720\sa60\nowidctlpar \f5\fs20\cf1 1.\tab The function waits until the amount of time specified by the Idle Period input parameter has gone by.
\par 2.\tab The function {\cchs256 issues the }flow named Each idle{\field\flddirty{\*\fldinst  ADDIN {{\*\datafield 6964785f6170706c69636174696f6e5f6f626a6563745f7369676e616c73}}}{\fldrslt }}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}
, and then it processes the part of the function chain that follows the Each idle flow.
\par 3.\tab The process is repeated until the application starts processing again{\cchs256 .
\par }\pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 If the application isn't processing any other function chains, {\cchs256 the }function waits the specified idle period, plus or minus 1/60 of a second, and issues the {\cchs256 Each idle flow }again{
\cchs256 . If the processor is}n't{\cchs256  available, }however, {\cchs256 the Each idle flow }won't {\cchs256 be issued for that idle period until the processor is idle.
\par }
\par \pard\plain \s39\li360\sa100 \b\f5\fs20 \{bmc graphics\\f_sidl.bmp\}{\cf1  }
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 
\par \pard\plain \s47\sb40\sa40 \b\f5\fs20 {\cchs256 Input Parameters
\par }\pard\plain \s44\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Idle Period}\tab (Number/Required){\cchs256 
\par }\pard\plain \s45\li720\sa60\nowidctlpar \f5\fs20\cf1 If the application is not processing anything, this parameter specifies {\cchs256 the number of ticks (1/60 of a second) between }two Each idle{\field\flddirty{\*\fldinst  ADDIN {{\*\datafield 
6964785f6170706c69636174696f6e5f6f626a6563745f7369676e616c73}}}{\fldrslt }}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\cf0  }flows.{\cchs256 
\par }\pard\plain \s46\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Flows
\par }\pard\plain \s40\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Started
\par }\pard\plain \s41\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed immediately after the }application starts {\cchs256 idling.
\par }\pard\plain \s40\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Each idle
\par }\pard\plain \s41\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed each time the processor }has been idle for the amount of time specified by the {\cchs256 Idle Period input parameter.}
\par \pard\plain \s30\sb20\sa40\keepn \b\f5 \page {\cs28\fs16\up6 {\*\bkmkstart idx_usage_idle}{\*\bkmkend idx_usage_idle}#{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 #} idx_usage_idle}} {\cs28\fs16\up6 ${\footnote \pard\plain \s29 \f5\fs20 {
\cs28\fs16\up6 $} Usage}} {\cs28\fs16\up6 +{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 +} func7:0010}} {\cs28\fs16\up6 K{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 K} Idle}} {\cs28\fs16\up6 !{\footnote \pard\plain \s29 \f5\fs20 {
\cs28\fs16\up6 !}   EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_idle')')}} Usage
\par \pard\plain \s39\li360\sa100\keepn \b\f5\fs20 Idle
\par \pard\plain \s55 \f5\fs10 {\cchs256 
\par }\pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 You can use more than one {\cchs256 Idle function }at a time, and you can use the same idle period or different idle periods{\cchs256 . The }{\uldb\cf11 Stop Idle}{\v\cf0 idx_stop_idle}
{\field\flddirty{\*\fldinst {\cf0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst  {\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst  ADDIN {{\*\datafield 6964785f73746f705f69646c65}}}{\fldrslt }}
{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\cf0  }{\cchs256 function will }stop{\cchs256  all of the Idle function}s{\cchs256  }that have{\cchs256  the same }idle period{\cchs256  as }the{\cchs256  }
Stop Idle function's Idle Period input parameter{\cchs256 .}
\par Processing{\cchs256  a function chain more often than a few times per second }slows an application down because of the processing time required by the function chain. {\cchs256 If the value specified in the Idle Period input parameter is }
less than 10 to 15 ticks{\cchs256 , or if the function chain }requires a large amount of processing time{\cchs256 , }you might notice that {\cchs256 keyboard and mouse operations become sluggish.
\par }\pard\plain \s30\sb20\sa40\keepn \b\f5 \page {\cs28\fs16\up6 {\*\bkmkstart idx_initialize_floppy}{\*\bkmkend idx_initialize_floppy}#{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 #} idx_initialize_floppy}} {\cs28\fs16\up6 ${\footnote \pard\plain 
\s29 \f5\fs20 {\cs28\fs16\up6 $} Parameters & Flows}} {\cs28\fs16\up6 +{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 +} brws3:0040}} {\cs28\fs16\up6 K{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 K} Initialize Floppy}} {\cs28\fs16\up6 !
{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 !}    EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_application_alm_functions')')}} Initialize Floppy - Macintosh
\par \pard\plain \s39\li360\sa100\keepn \b\f5\fs20 Application ALM\tab \tab {\uldb\cf11 Caution}{\v  idx_caution_initialize_floppy}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>
}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f63617574696f6e5f696e697469616c697a655f666c6f707079}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Formats }a{\cchs256  floppy disk.
\par }
\par \pard\plain \s39\li360\sa100 \b\f5\fs20 {\cf5 \{bmc graphics\\f_initia.bmp\}}{\cf1  }
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 
\par \pard\plain \s47\sb40\sa40 \b\f5\fs20 {\cchs256 Input Parameters
\par }\pard\plain \s44\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Vol Name}\tab (Text/Optional){\cchs256 
\par }\pard\plain \s45\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies }the volume's name.{\cchs256  The Vol Name parameter is case sensitive.
\par }\pard\plain \s44\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Vol Index}\tab (Number/Optional){\cchs256 
\par }\pard\plain \s45\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies the} volume's{\cchs256  index number.
\par }\pard\plain \s44\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 New Vol Name}\tab (Text/Optional){\cchs256 
\par }\pard\plain \s45\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies the new name of the volume. If the New Vol Name parameter is not provided, the current name is replaced with three question marks (???).}
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 NOTE: Although you can use either the Vol Name parameter or the Vol Index parameter, you have to use one or the other. The volume name appears under the volume icon on the desktop. {\cchs256 
The index refers to the list of mounted volumes in the operating system. The startup volume has index 1, and volumes are added to the list }as they're mounted{\cchs256 . }
\par \pard\plain \s46\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Flows
\par }\pard\plain \s40\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Initialized
\par }\pard\plain \s41\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed after the floppy }disk {\cchs256 has been initialized.
\par }\pard\plain \s40\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Not a floppy
\par }\pard\plain \s41\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed if the volume is}n't{\cchs256  a floppy} disk{\cchs256 .
\par }\pard\plain \s40\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 No such volume
\par }\pard\plain \s41\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed if the Vol Name input parameter or the Vol Index input parameter is invalid.}
\par \pard\plain \s30\sb20\sa40\keepn \b\f5 \page {\cs28\fs16\up6 {\*\bkmkstart idx_caution_initialize_floppy}{\*\bkmkend idx_caution_initialize_floppy}#{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 #} idx_caution_initialize_floppy}} {\cs28\fs16\up6 $
{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 $} Caution}} {\cs28\fs16\up6 +{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 +} func8:0010}} {\cs28\fs16\up6 K{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 K} Initialize Floppy}} {
\cs28\fs16\up6 !{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 !}   EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_initialize_floppy')')}} Caution
\par \pard\plain \s39\li360\sa100\keepn \b\f5\fs20 Initialize Floppy
\par \pard\plain \s55 \f5\fs10 {\cchs256 
\par }\pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 This function erases all of the information on a disk before it formats the disk, but it doesn't display any advance warning. {\cchs256 You might want to display a notification dialog }that lets the us
er know what will happen if the disk is initialized.{\cchs256 
\par }\pard\plain \s30\sb20\sa40\keepn \b\f5 \page {\cs28\fs16\up6 {\*\bkmkstart idx_mouse_button}{\*\bkmkend idx_mouse_button}#{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 #} idx_mouse_button}} {\cs28\fs16\up6 ${\footnote \pard\plain \s29 \f5\fs20 {
\cs28\fs16\up6 $} Parameters & Flows}} {\cs28\fs16\up6 +{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 +} brws3:0045}} {\cs28\fs16\up6 K{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 K} Mouse Button}} {\cs28\fs16\up6 !{\footnote \pard\plain 
\s29 \f5\fs20 {\cs28\fs16\up6 !}    EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_application_alm_functions')')}} Mouse Button - Windows
\par \pard\plain \s39\li360\sa100\keepn \b\f5\fs20 Application ALM{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f616374696f6e5f6d6f7573655f627574746f6e}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}

\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 Indicates whether a user is pressing any of the mouse buttons. If a mouse button is being pressed, the function also indicates which one.{\cchs256 
\par }
\par \pard\plain \s39\li360\sa100 \b\f5\fs20 {\cf5 \{bmc graphics\\f_mdwn.bmp\}}{\cf1  }
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 
\par \pard\plain \s47\sb40\sa40 \b\f5\fs20 Parameters
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 The Mouse Button function }doesn't have any{\cchs256  parameters.
\par }\pard\plain \s46\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Flows
\par }\pard\plain \s40\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Primary
\par }\pard\plain \s41\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed if }a user presses {\cchs256 the primary button.} The primary button is usually the left button.{\cchs256 
\par }\pard\plain \s40\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Secondary
\par }\pard\plain \s41\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed if }a user presses {\cchs256 the secondary button.} The secondary button is usually the right button.{\cchs256 
\par }\pard\plain \s40\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Middle
\par }\pard\plain \s41\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed if }a user presses {\cchs256 the middle button.
\par }\pard\plain \s40\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 None
\par }\pard\plain \s41\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed if }the user isn't pressing any of the buttons.
\par \pard\plain \s30\sb20\sa40\keepn \b\f5 \page {\cs28\fs16\up6 {\*\bkmkstart idx_mouse_up}{\*\bkmkend idx_mouse_up}#{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 #} idx_mouse_up}} {\cs28\fs16\up6 ${\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 
$} Parameters & Flows}} {\cs28\fs16\up6 +{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 +} brws3:0050}} {\cs28\fs16\up6 K{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 K} Mouse Up}} {\cs28\fs16\up6 !{\footnote \pard\plain \s29 \f5\fs20 {
\cs28\fs16\up6 !}    EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_application_alm_functions')')}} Mouse Up - Macintosh
\par \pard\plain \s39\li360\sa100\keepn \b\f5\fs20 Application ALM{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f616374696f6e5f6d6f7573655f7570}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Generates a mouse-up event}. Mouse-up events are usually generated when a user releases the mouse button, but you can use this function to simulate user input{\cchs256 .}
\par 
\par \pard\plain \s39\li360\sa100 \b\f5\fs20 {\cf5 \{bmc graphics\\f_mouseu.bmp\}}{\cf1  }
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 
\par \pard\plain \s47\sb40\sa40 \b\f5\fs20 Parameters{\cchs256 
\par }\pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 The Mouse Up function }doesn't have any{\cchs256  parameters.
\par }\pard\plain \s46\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Flows
\par }\pard\plain \s40\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Done
\par }\pard\plain \s41\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed after the }function has issued the {\cchs256 mouse-up event.}
\par \pard\plain \s30\sb20\sa40\keepn \b\f5 \page {\cs28\fs16\up6 {\*\bkmkstart idx_rename_volume}{\*\bkmkend idx_rename_volume}#{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 #} idx_rename_volume}} {\cs28\fs16\up6 ${\footnote \pard\plain \s29 \f5\fs20 {
\cs28\fs16\up6 $} Parameters & Flows}} {\cs28\fs16\up6 +{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 +} brws3:0055}} {\cs28\fs16\up6 K{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 K} Rename Volume}} {\cs28\fs16\up6 !{\footnote \pard\plain 
\s29 \f5\fs20 {\cs28\fs16\up6 !}    EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_application_alm_functions')')}} Rename Volume - Macintosh
\par \pard\plain \s39\li360\sa100\keepn \b\f5\fs20 Application ALM{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f616374696f6e5f72656e616d655f766f6c756d65}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }
}{\fldrslt }}
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Renames the volume} without affecting any of the information on it{\cchs256 .
\par }
\par \pard\plain \s39\li360\sa100 \b\f5\fs20 {\cf5 \{bmc graphics\\f_rename.bmp\}}{\cf1  }
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 
\par \pard\plain \s47\sb40\sa40 \b\f5\fs20 {\cchs256 Input Parameters
\par }\pard\plain \s44\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Vol Name}\tab (Text/Optional){\cchs256 
\par }\pard\plain \s45\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies }the volume's name.{\cchs256  The Vol Name parameter is case sensitive.
\par }\pard\plain \s44\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Vol Index}\tab (Number/Optional){\cchs256 
\par }\pard\plain \s45\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies the} volume's{\cchs256  index number.
\par }\pard\plain \s44\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 New Vol Name}\tab (Text/Required){\cchs256 
\par }\pard\plain \s45\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies the }volume's {\cchs256 new name. If }you don't use {\cchs256 this parameter, the }function doesn't rename the volume.
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 NOTE: Although you can use either the Vol Name parameter or the Vol Index parameter, you have to use one or the other. The volume name appears under the volume icon on the desktop. {\cchs256 
The index refers to the list of mounted volumes in the operating system. The startup volume has index 1, and volumes are added to the list }as they're mounted{\cchs256 . }
\par \pard\plain \s46\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Flows
\par }\pard\plain \s40\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Renamed
\par }\pard\plain \s41\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed after the volume has been renamed.
\par }\pard\plain \s40\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Failed
\par }\pard\plain \s41\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed if }the volume can't be renamed because it's {\cchs256 locked or shared.
\par }\pard\plain \s40\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 No such volume
\par }\pard\plain \s41\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed if the Vol Name input parameter or the Vol Index input parameter is invalid.}
\par \pard\plain \s30\sb20\sa40\keepn \b\f5 \page {\cs28\fs16\up6 {\*\bkmkstart idx_save_persistents}{\*\bkmkend idx_save_persistents}#{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 #} idx_save_persistents}} {\cs28\fs16\up6 ${\footnote \pard\plain \s29 
\f5\fs20 {\cs28\fs16\up6 $} Parameters & Flows}} {\cs28\fs16\up6 +{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 +} brws3:0060}} {\cs28\fs16\up6 K{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 K} Save Persistents}} {\cs28\fs16\up6 !{\footnote 
\pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 !}    EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_application_alm_functions')')}} Save Persistents - Windows
\par \pard\plain \s39\li360\sa100\keepn \b\f5\fs20 Application ALM{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f616374696f6e5f736176655f70657273697374656e7473}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }
}{\fldrslt }}\tab \tab {\uldb\cf11 Usage}{\v  idx_usage_save_persistents}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1 
 ADDIN }{\cf1 {\*\datafield 6964785f75736167655f736176655f70657273697374656e7473}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Saves the current values }for{\cchs256  all }of the {\cchs256 persistent objects to the current working directory.
\par }
\par \pard\plain \s39\li360\sa100 \b\f5\fs20 {\cf5 \{bmc graphics\\f_sprs.bmp\}}{\cf1  }
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 
\par \pard\plain \s47\sb40\sa40 \b\f5\fs20 Parameters{\cchs256 
\par }\pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 The Save Persistents function }doesn't have any{\cchs256  parameters.
\par }\pard\plain \s46\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Flows
\par }\pard\plain \s40\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Saved
\par }\pard\plain \s41\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed after the current values }for{\cchs256  all }of the {\cchs256 persistent objects }have been{\cchs256  saved to the current working directory.
\par }\pard\plain \s40\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Failed
\par }\pard\plain \s41\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed if an error occurs and the }function can't save the {\cchs256 persistent data.}
\par \pard\plain \s30\sb20\sa40\keepn \b\f5 \page {\cs28\fs16\up6 {\*\bkmkstart idx_usage_save_persistents}{\*\bkmkend idx_usage_save_persistents}#{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 #} idx_usage_save_persistents}} {\cs28\fs16\up6 ${\footnote 
\pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 $} Usage}} {\cs28\fs16\up6 +{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 +} func12:0010}} {\cs28\fs16\up6 K{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 K} Save Persistents}} {\cs28\fs16\up6 !
{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 !}   EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_save_persistents')')}} Usage
\par \pard\plain \s39\li360\sa100\keepn \b\f5\fs20 Save Persistents
\par \pard\plain \s55 \f5\fs10 {\cchs256 
\par }\pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 This function is used to update the <projectname>.pdt file that stores persistent data.}
\par \pard\plain \s30\sb20\sa40\keepn \b\f5 \page {\cs28\fs16\up6 {\*\bkmkstart idx_stop_idle}{\*\bkmkend idx_stop_idle}#{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 #} idx_stop_idle}} {\cs28\fs16\up6 ${\footnote \pard\plain \s29 \f5\fs20 {
\cs28\fs16\up6 $} Parameters & Flows}} {\cs28\fs16\up6 +{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 +} brws3:0065}} {\cs28\fs16\up6 K{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 K} Stop Idle}} {\cs28\fs16\up6 !{\footnote \pard\plain \s29 
\f5\fs20 {\cs28\fs16\up6 !}    EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_application_alm_functions')')}} Stop Idle
\par \pard\plain \s39\li360\sa100\keepn \b\f5\fs20 Application ALM
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Stops the }{\uldb\cf11 Idle}{\v\cf0 idx_idle}{\field\flddirty{\*\fldinst {\cf0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst  {\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}
{\field\flddirty{\*\fldinst  ADDIN {{\*\datafield 6964785f69646c65}}}{\fldrslt }}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\cf0  }function that has a matching Idle Period input parameter from issuing the {\cchs256 Each Idle flow.

\par NOTE:}{\b\f9\cchs256  }{\cchs256 This function }stops{\cchs256  the Idle function from starting }the processing for {\cchs256 the function chain attached to the Each Idle flow. }
If the application is already processing a function chain, it doesn't stop the processing.{\cchs256 
\par }
\par \pard\plain \s39\li360\sa100 \b\f5\fs20 {\cf5 \{bmc graphics\\f_tidl.bmp\}}{\cf1  }
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 
\par \pard\plain \s47\sb40\sa40 \b\f5\fs20 {\cchs256 Input Parameters
\par }\pard\plain \s44\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Idle Period}\tab (Number/Optional){\cchs256 
\par }\pard\plain \s45\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies the idle period }for the {\uldb\cf11 Idle}{\v\cf0 idx_idle}{\field\flddirty{\*\fldinst {\cf0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst  {\cf6 
macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst  ADDIN {{\*\datafield 6964785f69646c65}}}{\fldrslt }}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\cf0  }
function that will be stopped. The idle period is the number of ticks {\cchs256 (}1/{\cchs256 60 of a second) between }two Each {\cchs256 idle }flows{\cchs256 .
\par }\pard\plain \s46\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Flows
\par }\pard\plain \s40\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Done
\par }\pard\plain \s41\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed after }the function has stopped the Idle function from issuing the Each idle flow.
\par \pard\plain \s30\sb20\sa40\keepn \b\f5 \page {\cs28\fs16\up6 {\*\bkmkstart idx_unmount_volume}{\*\bkmkend idx_unmount_volume}#{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 #} idx_unmount_volume}} {\cs28\fs16\up6 ${\footnote \pard\plain \s29 
\f5\fs20 {\cs28\fs16\up6 $} Parameters & Flows}} {\cs28\fs16\up6 +{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 +} brws3:0070}} {\cs28\fs16\up6 K{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 K} Unmount Volume}} {\cs28\fs16\up6 !{\footnote 
\pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 !}    EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_application_alm_functions')')}} Unmount Volume - Macintosh
\par \pard\plain \s39\li360\sa100\keepn \b\f5\fs20 Application ALM{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f616374696f6e5f756e6d6f756e745f766f6c756d65}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }
}{\fldrslt }}
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Unmounts the specified volume.
\par NOTE: }The application should call the {\uldb\cf11 Eject Volume}{\v\cf0 idx_eject_volume}{\field\flddirty{\*\fldinst {\cf0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst  {\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}
{\field\flddirty{\*\fldinst  ADDIN {{\*\datafield 6964785f656a6563745f766f6c756d65}}}{\fldrslt }}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\cf0  }{\cchs256 function }before it calls this function.{\cchs256 
\par }
\par \pard\plain \s39\li360\sa100 \b\f5\fs20 {\cf5 \{bmc graphics\\f_unmoun.bmp\}}{\cf1  }
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 
\par \pard\plain \s47\sb40\sa40 \b\f5\fs20 {\cchs256 Input Parameters
\par }\pard\plain \s44\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Vol Name}\tab (Text/Optional){\cchs256 
\par }\pard\plain \s45\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies }the volume's name.{\cchs256  The Vol Name parameter is case sensitive.
\par }\pard\plain \s44\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Vol Index}\tab (Number/Optional){\cchs256 
\par }\pard\plain \s45\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies the} volume's{\cchs256  index number.}
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 NOTE: Although you can use either the Vol Name parameter or the Vol Index parameter, you have to use one or the other. The volume name appears under the volume icon on the desktop. {\cchs256 
The index refers to the list of mounted volumes in the operating system. The startup volume has index 1, and volumes are added to the list }as they're mounted{\cchs256 . }
\par \pard\plain \s46\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Flows
\par }\pard\plain \s40\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Unmounted
\par }\pard\plain \s41\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed after the volume }has been{\cchs256  unmounted.
\par }\pard\plain \s40\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Failed
\par }\pard\plain \s41\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed if the volume is the system disk or a shared volume.
\par }\pard\plain \s40\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 No such volume
\par }\pard\plain \s41\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed if the Vol Index input parameter is out of range or the Vol Name input parameter is invalid.}
\par \pard\plain \s30\sb20\sa40\keepn \b\f5 \page {\cs28\fs16\up6 {\*\bkmkstart idx_update_windows}{\*\bkmkend idx_update_windows}#{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 #} idx_update_windows}} {\cs28\fs16\up6 ${\footnote \pard\plain \s29 
\f5\fs20 {\cs28\fs16\up6 $} Parameters & Flows}} {\cs28\fs16\up6 +{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 +} brws3:0075}} {\cs28\fs16\up6 K{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 K} Update Windows}} {\cs28\fs16\up6 !{\footnote 
\pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 !}    EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_application_alm_functions')')}} Update Windows
\par \pard\plain \s39\li360\sa100\keepn \b\f5\fs20 Application ALM{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f616374696f6e5f7570646174655f77696e646f7773}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }
}{\fldrslt }}
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Immediately refreshes items }that{\cchs256  have changed in }the application's {\cchs256 open windows since the Visual Priority function was called. }
For more information about priorities, refer to {\cchs256 the }{\uldb\cf11 Function Priority}{\v\cf0 idx_function_priority}{\field\flddirty{\*\fldinst {\cf0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst  {\cf6 macrobutton DoJump2 <+>}
}{\fldrslt }}{\field\flddirty{\*\fldinst  ADDIN {{\*\datafield 6964785f66756e6374696f6e5f7072696f72697479}}}{\fldrslt }}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\cf0  }{\cchs256 and }{\uldb\cf11 Visual Priority}{\v\cf0 
idx_visual_priority}{\field\flddirty{\*\fldinst {\cf0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst  {\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst  ADDIN {{\*\datafield 6964785f76697375616c5f7072696f72697479}}
}{\fldrslt }}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\cf0  }{\cchs256 functions.
\par NOTE: }If the application doesn't call {\cchs256 the Visual Priority function }before it calls{\cchs256  the }{\uldb\cf11 Update Windows}{\v\cf0 idx_update_windows}{\field\flddirty{\*\fldinst {\cf0  macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst  {\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst  ADDIN {{\*\datafield 6964785f7570646174655f77696e646f7773}}}{\fldrslt }}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\cf0  }{\cchs256 
functio}n, the Update Windows function won't refresh changed items.
\par 
\par \pard\plain \s39\li360\sa100 \b\f5\fs20 {\cf5 \{bmc graphics\\f_updw.bmp\}}{\cf1  }
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 
\par \pard\plain \s47\sb40\sa40 \b\f5\fs20 Parameters{\cchs256 
\par }\pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 The Update Windows function }doesn't have any{\cchs256  parameters.
\par }\pard\plain \s46\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Flows
\par }\pard\plain \s40\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Done
\par }\pard\plain \s41\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed after all of the open windows have been updated.}
\par \pard\plain \s30\sb20\sa40\keepn \b\f5 \page {\cs28\fs16\up6 {\*\bkmkstart idx_visual_priority}{\*\bkmkend idx_visual_priority}#{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 #} idx_visual_priority}} {\cs28\fs16\up6 ${\footnote \pard\plain \s29 
\f5\fs20 {\cs28\fs16\up6 $} Parameters & Flows}} {\cs28\fs16\up6 +{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 +} brws3:0080}} {\cs28\fs16\up6 K{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 K} Visual Priority}} {\cs28\fs16\up6 !{\footnote 
\pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 !}    EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_application_alm_functions')')}} Visual Priority
\par \pard\plain \s39\li360\sa100\keepn \b\f5\fs20 Application ALM{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f616374696f6e5f76697375616c5f7072696f72697479}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }
}{\fldrslt }}\tab \tab {\uldb\cf11 Usage}{\v  idx_usage_visual_priority}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1 
 ADDIN }{\cf1 {\*\datafield 6964785f75736167655f76697375616c5f7072696f72697479}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 Places{\cchs256  }the{\cchs256  application in visual priority mode.
\par }
\par \pard\plain \s39\li360\sa100 \b\f5\fs20 {\cf5 \{bml graphics\\f_vpty.bmp\}}{\cf1  }
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 
\par \pard\plain \s47\sb40\sa40 \b\f5\fs20 Parameters{\cchs256 
\par }\pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 The Visual Priority function }doesn't have any{\cchs256  parameters.
\par }\pard\plain \s46\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Flows
\par }\pard\plain \s40\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Done
\par }\pard\plain \s41\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed after the application }has been{\cchs256  }placed in{\cchs256  visual priority mode.}
\par \pard\plain \s30\sb20\sa40\keepn \b\f5 \page {\cs28\fs16\up6 {\*\bkmkstart idx_usage_visual_priority}{\*\bkmkend idx_usage_visual_priority}#{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 #} idx_usage_visual_priority}} {\cs28\fs16\up6 ${\footnote 
\pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 $} Usage}} {\cs28\fs16\up6 +{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 +} func15:0010}} {\cs28\fs16\up6 K{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 K} Visual Priority}} {\cs28\fs16\up6 !
{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 !}  EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_visual_priority')')}} Usage
\par \pard\plain \s39\li360\sa100\keepn \b\f5\fs20 Visual Priority
\par \pard\plain \s55 \f5\fs10 {\cchs256 
\par }\pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 If you want to use the Visual Priority function, you have to place {\cchs256 an Application object in }your{\cchs256  project}.{\cchs256 
\par }If the application is in {\cchs256 visual priority mode}, the application refreshes the screen when it calls the {\uldb\cf11 Update Windows}{\v\cf0 idx_update_windows}{\field\flddirty{\*\fldinst {\cf0  macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst  {\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst  ADDIN {{\*\datafield 6964785f7570646174655f77696e646f7773}}}{\fldrslt }}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\cf0  }
function. If the application is in function priority mode, the application refreshes the screen when it finishes processing each function chain.{\cchs256  }An application in {\cchs256 visual priority mode }processes its function chains {\cchs256 
more slowly than }an application in {\cchs256 functi}o{\cchs256 n priority mode}, so it should only be used when refreshing the screen is more important than how fast the function chains are being processed. To increase the speed of the application, call 
{\cchs256 the }{\uldb\cf11 Function Priority}{\v\cf0 idx_function_priority}{\field\flddirty{\*\fldinst {\cf0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst  {\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst  ADDIN {
{\*\datafield 6964785f66756e6374696f6e5f7072696f72697479}}}{\fldrslt }}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\cf0  }{\cchs256 function as soon as }the application doesn't have to be in {\cchs256 visual priority mode.}
\par \pard\plain \s30\sb20\sa40\keepn \b\f5 \page {\cs28\fs16\up6 {\*\bkmkstart idx_volume_cd}{\*\bkmkend idx_volume_cd}#{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 #} idx_volume_cd}} {\cs28\fs16\up6 ${\footnote \pard\plain \s29 \f5\fs20 {
\cs28\fs16\up6 $} Parameters & Flows}} {\cs28\fs16\up6 +{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 +} brws3:0085}} {\cs28\fs16\up6 K{\footnote \pard\plain \s29 \f5\fs20 {\cs28\fs16\up6 K} Volume CD?}} {\cs28\fs16\up6 !{\footnote \pard\plain 
\s29 \f5\fs20 {\cs28\fs16\up6 !}     EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_application_alm_functions')')}} Volume CD? - Macintosh
\par \pard\plain \s39\li360\sa100\keepn \b\f5\fs20 Application ALM{\field\flddirty{\*\fldinst  ADDIN {{\*\datafield 6964785f616374696f6e5f766f6c756d655f6364}}}{\fldrslt }}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}
\par \pard\plain \s55 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 Indicates {\cchs256 whether the specified volume is a CD-ROM.} If you want to know whether an unmounted device is a CD-ROM, use the SCSI ID parameter.{\cchs256 
\par }\pard \s15\li360\sa60\nowidctlpar 
\par \pard\plain \s39\li360\sa100 \b\f5\fs20 {\cf5 \{bmc graphics\\f_volume.bmp\}}{\cf1  }
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 
\par \pard\plain \s47\sb40\sa40 \b\f5\fs20 {\cchs256 Input Parameters
\par }\pard\plain \s44\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Vol Name}\tab (Text/Optional){\cchs256 
\par }\pard\plain \s45\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies the volume}'s{\cchs256  name. The Vol Name parameter is case sensitive.
\par }\pard\plain \s44\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 SCSI ID}\tab (Number/Optional){\cchs256 
\par }\pard\plain \s45\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Specifies the SCSI ID of }an unmounted{\cchs256  volume or device.The number }has to be {\cchs256 between 0 and 6. SCSI ID 7} is used by the CPU{\cchs256 . The SCSI IS is not the same as the 
}volume's {\cchs256 index number.}
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 NOTE: Although you can use either the Vol Name parameter or the SCSI ID parameter, you have to use one or the other. The volume name appears under the volume icon on the desktop.
\par \pard\plain \s46\ri432\sb40\sa40 \b\f5\fs20 {\cchs256 Flows
\par }\pard\plain \s40\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 CD
\par }\pard\plain \s41\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed if the specified volume is a CD-ROM.
\par }\pard\plain \s40\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Not CD
\par }\pard\plain \s41\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed if the specified volume is not a CD-ROM.
\par }}