{\rtf1\ansi \deff5\deflang1033{\fonttbl{\f0\froman\fcharset0\fprq2 Tms Rmn;}{\f1\froman\fcharset2\fprq2 Symbol;}{\f2\fswiss\fcharset0\fprq2 Helv;}{\f3\fmodern\fcharset0\fprq1 Courier;}
{\f4\froman\fcharset0\fprq2 Times New Roman;}{\f5\fswiss\fcharset0\fprq2 Arial;}{\f6\froman\fcharset0\fprq2 MS Serif;}{\f7\fswiss\fcharset0\fprq2 MS Sans Serif;}{\f8\froman\fcharset0\fprq2 Times;}{\f9\fswiss\fcharset0\fprq2 Helvetica;}
{\f10\fswiss\fcharset0\fprq2 System;}{\f11\fmodern\fcharset0\fprq1 Courier New;}{\f12\fnil\fcharset2\fprq2 Wingdings;}{\f13\fnil\fcharset0\fprq2 WP OverflowSet;}{\f14\fscript\fcharset0\fprq2 Brush738 BT;}{\f15\fscript\fcharset0\fprq2 Blackletter686 BT;}
{\f16\froman\fcharset0\fprq2 Arrus Blk BT;}{\f17\froman\fcharset2\fprq2 MT Extra;}{\f18\fmodern\fcharset2\fprq1 MS LineDraw;}{\f19\fdecor\fcharset0\fprq2 Algerian;}{\f20\fswiss\fcharset0\fprq2 Arial Rounded MT Bold;}
{\f21\froman\fcharset0\fprq2 Bookman Old Style;}{\f22\fdecor\fcharset0\fprq2 Braggadocio;}{\f23\fswiss\fcharset0\fprq2 Britannic Bold;}{\f24\fscript\fcharset0\fprq2 Brush Script MT;}{\f25\fswiss\fcharset0\fprq2 Century Gothic;}
{\f26\fdecor\fcharset0\fprq2 Colonna MT;}{\f27\fdecor\fcharset0\fprq2 Desdemona;}{\f28\froman\fcharset0\fprq2 Footlight MT Light;}{\f29\fswiss\fcharset0\fprq2 Impact;}{\f30\fdecor\fcharset0\fprq2 Kino MT;}{\f31\froman\fcharset0\fprq2 Wide Latin;}
{\f32\fscript\fcharset0\fprq2 Matura MT Script Capitals;}{\f33\fdecor\fcharset0\fprq2 Playbill;}{\f34\fswiss\fcharset2\fprq2 WP Phonetic;}{\f35\fnil\fcharset2\fprq2 WP MathExtendedB;}{\f36\fmodern\fcharset0\fprq1 WP BoxDrawing;}
{\f37\fnil\fcharset2\fprq2 WP IconicSymbolsB;}{\f38\fnil\fcharset2\fprq2 WP Greek Helve;}{\f39\fnil\fcharset2\fprq2 WP MathExtendedA;}{\f40\froman\fcharset2\fprq2 WP CyrillicA;}{\f41\fnil\fcharset2\fprq2 WP Japanese;}{\f42\fnil\fcharset2\fprq2 WP MathB;}
{\f43\fnil\fcharset2\fprq2 WP IconicSymbolsA;}{\f44\fnil\fcharset2\fprq2 WP Arabic Sihafa;}{\f45\froman\fcharset2\fprq2 WP MultinationalA Roman;}{\f46\fnil\fcharset0\fprq2 WP CyrillicB;}{\f47\fnil\fcharset2\fprq2 WP MultinationalB Roman;}
{\f48\fmodern\fcharset2\fprq1 WP Greek Courier;}{\f49\fnil\fcharset2\fprq2 WP MathA;}{\f50\fnil\fcharset2\fprq2 WP ArabicScript Sihafa;}{\f51\fnil\fcharset2\fprq2 WP Greek Century;}{\f52\fnil\fcharset2\fprq2 WP TypographicSymbols;}
{\f53\fnil\fcharset2\fprq2 WP Hebrew David;}{\f54\fnil\fcharset2\fprq2 WP MultinationalA Helve;}{\f55\fnil\fcharset2\fprq2 WP MultinationalB Helve;}{\f56\fmodern\fcharset2\fprq1 WP MultinationalA Courier;}
{\f57\fmodern\fcharset2\fprq1 WP MultinationalB Courier;}{\f58\fscript\fcharset0\fprq2 Ribbon131 Bd BT;}{\f59\froman\fcharset0\fprq2 Humanst521 Lt BT;}{\f60\froman\fcharset0\fprq2 GeoSlab703 Lt BT;}{\f61\fswiss\fcharset0\fprq2 Swis721 BlkEx BT;}
{\f62\fswiss\fcharset0\fprq2 Humanst521 Cn BT;}{\f63\fdecor\fcharset0\fprq2 Onyx BT;}{\f64\fdecor\fcharset0\fprq2 CaslonOpnface BT;}{\f65\fswiss\fcharset0\fprq2 EngraversGothic BT;}{\f66\fscript\fcharset0\fprq2 ShelleyVolante BT;}
{\f67\froman\fcharset0\fprq2 BernhardMod BT;}{\f68\froman\fcharset0\fprq2 Arrus BT;}{\f69\fscript\fcharset0\fprq2 OzHandicraft BT;}{\f70\fswiss\fcharset0\fprq2 AvantGarde;}{\f71\froman\fcharset0\fprq2 Bookman;}
{\f72\fswiss\fcharset0\fprq2 Helvetica-Narrow;}{\f73\froman\fcharset0\fprq2 NewCenturySchlbk;}{\f74\froman\fcharset0\fprq2 Palatino;}{\f75\fscript\fcharset0\fprq2 ZapfChancery;}{\f76\fdecor\fcharset2\fprq2 ZapfDingbats;}
{\f77\froman\fcharset255\fprq2 Roman;}{\f78\fscript\fcharset255\fprq2 Script;}{\f79\fmodern\fcharset255\fprq2 Modern;}{\f80\fswiss\fcharset0\fprq1 MS Dialog;}{\f81\fnil\fcharset0\fprq1 Small Fonts;}{\f82\fswiss\fcharset0\fprq0 BI Helvetica BoldOblique;}
{\f83\fnil\fcharset0\fprq0 AGaramond;}{\f84\fswiss\fcharset0\fprq0 B Helvetica Bold;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;
\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\f5\fs20 \snext0 Normal;}{
\s1\sb240\sa60\keepn \b\f5\fs28\kerning28 \sbasedon0\snext15 heading 1;}{\s2\sb240\sa60\keepn \b\f5 \sbasedon0\snext15 heading 2;}{\s3\sb240\sa60\keepn \b\f5 \sbasedon0\snext15 heading 3;}{\s4\sb240\sa60\keepn \b\f5 \sbasedon0\snext15 heading 4;}{\*\cs10 
\additive Default Paragraph Font;}{\s15\li360\sa60\nowidctlpar \f5\fs20\cf1 \snext15 Body;}{\s16\tqc\tx4320\tqr\tx8640 \f5\fs20 \sbasedon0\snext16 header;}{\s17\li360\sb120\sa40\nowidctlpar \f5\fs20\cf1 \sbasedon44\snext0 Signal Name;}{
\s18\fi-360\li720\sa60\nowidctlpar \f5\fs20\cf1 \sbasedon15\snext18 Body - Bullet;}{\s19\li720\sa60\nowidctlpar \f5\fs20\cf1 \sbasedon45\snext17 Signal Text;}{\s20\fi-360\li720\sa60\nowidctlpar{\*\pn \pnlvl12\pnf1\pnstart1\pnindent360\pnhang
{\pntxtb \'b7}}\f5\fs20\cf1 \sbasedon15\snext20 Body - Indent;}{\s21\fi-360\li720\sa60\nowidctlpar{\*\pn \pnlvl10\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}\f5\fs20\cf1 \sbasedon20\snext21 Instructions;}{\s22\tqc\tx4320\tqr\tx8640 \f5\fs20 
\sbasedon0\snext22 footer;}{\*\cs23 \additive\f5 \sbasedon10 page number;}{\s24\sa144\keep \f82\fs36\cf1 \sbasedon0\snext0 Header 2;}{\s25\sa60\keep \f83\fs22 \sbasedon15\snext25 Side-Bar;}{\s26\keep \f84\fs28 \sbasedon0\snext26 Header 3;}{
\s27\ri144\sa60\keep \f83\fs22 \sbasedon15\snext27 Sidebar;}{\s28\li72\keep \f84\fs28 \sbasedon0\snext28 Header 32;}{\s29\fi-360\li720\sa60\nowidctlpar\tx360\tx1224\tx1440 \f5\fs20\cf1 \sbasedon18\snext29 Body - Left;}{\s30\ri432\sb40\sa40 \b\f5\fs20 
\sbasedon47\snext30 Platform;}{\s31\li720\ri720\tldot\tx8280\tqr\tx8640 \f5\fs20\cf8 \sbasedon0\snext0 toc 2;}{\*\cs32 \additive\f5\fs16\up6 \sbasedon10 footnote reference;}{\s33 \f5\fs20 \sbasedon0\snext33 footnote text;}{\s34\sb20\sa40 \b\f5 
\sbasedon0\snext0 Help Topic Heading;}{\s35 \b\f5 \sbasedon0\snext35 Help See Also;}{\*\cs36 \additive\f5\super \sbasedon10 endnote reference;}{\s37 \b\f5 \sbasedon0\snext0 Help Popup Heading;}{\s38\sa60\tx720\tx1260 \b\f5\fs20 \sbasedon0\snext0 
Topic Section;}{\s39\sb80 \f11 \sbasedon0\snext0 Function Syntax;}{\s40\sa120\tx2880 \f5\fs16 \sbasedon0\snext40 Topic Wizard Line 2;}{\s41\sb20\sa40\tx720\tx1260 \b\f5\fs32 \sbasedon34\snext41 new 2;}{\s42\li360\ri20 \f5\fs20 \sbasedon0\snext0 
hlpbrz_toc;}{\s43\li360\sa100 \b\f5\fs20 \sbasedon0\snext43 HelpBreeze TOC;}{\s44\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 \sbasedon15\snext0 Flow Name;}{\s45\li720\sa60\nowidctlpar \f5\fs20\cf1 \sbasedon15\snext44 Flow Text;}{\s46\ri432\sb40\sa40 
\b\f5\fs20 \sbasedon30\snext46 ALM;}{\s47\ri432\sb40\sa40 \b\f5\fs20 \sbasedon0\snext15 Action;}{\s48\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 \sbasedon44\snext0 Input Name;}{\s49\li720\sa60\nowidctlpar \f5\fs20\cf1 \sbasedon45\snext48 Input Text;}{
\s50\sb40\sa40 \b\f5\fs20 \sbasedon47\snext50 Usage;}{\s51\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 \sbasedon44\snext0 Output Name;}{\s52\li720\sa60\nowidctlpar \f5\fs20\cf1 \sbasedon45\snext51 Output Text;}{\s53\sb40\sa40 \b\f5\fs20 \sbasedon50\snext53 
Caution;}{\s54\ri432\sb40\sa40 \b\f5\fs20 \sbasedon47\snext54 Flows;}{\s55\sb40\sa40 \b\f5\fs20 \sbasedon47\snext55 Input Parameters;}{\s56\ri432\sb40\sa40 \b\f5\fs20 \sbasedon47\snext56 Output Parameters;}{\s57\li1400\tqr\tldot\tx8640 \f5\fs20 
\sbasedon0\snext0 toc 8;}{\s58\li360 \b\f5\fs20\uldb\cf11 \sbasedon43\snext58 Function Table;}{\s59 \f5\fs10 \sbasedon0\snext59 Space After;}}{\info{\title Introduction to the Button ALM:}{\author Kathy Schofield}
{\doccomm <project = o:\\help\\button\\awusbutn.hpj>}{\operator Kathy Schofield}{\creatim\yr1995\mo8\dy15\hr10\min8}{\revtim\yr1995\mo8\dy15\hr10\min8}{\version3}{\edmins8}{\nofpages32}{\nofwords3086}{\nofchars17593}{\vern49203}}
\widowctrl\ftnbj\aenddoc\linkstyles\formshade \fet0{\*\template E:\\WINWORD\\TEMPLATE\\hlpbrz6.dot}\sectd \linex0\endnhere {\header \pard\plain \s16\tqc\tx4320\tqr\tx8640 \f5\fs20 {\field{\*\fldinst {\cs23  DATE  \\l }}{\fldrslt {\cs23 3/31/95}}}{\cs23 
\tab \tab }{\field{\*\fldinst {\cs23  TIME }}{\fldrslt {\cs23 4:12 PM}}}
\par }{\footer \pard\plain \s22\qc\tqc\tx4320\tqr\tx8640 \f5\fs20 {\field{\*\fldinst {\cs23  PAGE }}{\fldrslt {\cs23 22}}}
\par }{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5
\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang
{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \s34\sb20\sa40\keepn \b\f5 {\cs32\fs16\up6 #{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 #} idx_contents}}{\*\bkmkstart idx_contents}
{\*\bkmkend idx_contents} {\cs32\fs16\up6 ${\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 $} Button ALM Contents}} {\cs32\fs16\up6 K{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 K} Contents}} {\cs32\fs16\up6 !{\footnote \pard\plain \s33 
\f5\fs20 {\cs32\fs16\up6 !}    DB(`btn_up')}} Contents
\par \pard\plain \s43\li360\sa100 \b\f5\fs20 
\par {\uldb\cf11 Introduction to the Button ALM}{\v idx_introduction_to_the_button_alm}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {
\cf1  ADDIN }{\cf1 {\*\datafield 6964785f696e74726f64756374696f6e5f746f5f7468655f627574746f6e5f616c6d}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par {\uldb\cf11 Editing the Button Object}{\v idx_editing_the_button_object}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1 
 ADDIN }{\cf1 {\*\datafield 6964785f65646974696e675f7468655f627574746f6e5f6f626a656374}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par {\uldb\cf11 Button Object Signals}{\v idx_button_object_signals}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 
{\*\datafield 6964785f627574746f6e5f6f626a6563745f7369676e616c73}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par {\uldb\cf11 Button Functions}{\v idx_button_alm_functions}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 
{\*\datafield 6964785f627574746f6e5f616c6d5f66756e6374696f6e73}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \pard\plain \s34\sb20\sa40\keepn \b\f5 \page {\cs32\fs16\up6 {\*\bkmkstart idx_introduction_to_the_button_alm}{\*\bkmkend idx_introduction_to_the_button_alm}#{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 #} idx_introduction_to_the_button_alm}} {
\cs32\fs16\up6 ${\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 $} Introduction to the Button ALM}} {\cs32\fs16\up6 +{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 +} top1:0005}} {\cs32\fs16\up6 K{\footnote \pard\plain \s33 \f5\fs20 {
\cs32\fs16\up6 K} Introduction to the Button ALM}} {\cs32\fs16\up6 !{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 !}    EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_contents')')}} Introduction
\par \pard\plain \s43\li360\sa100\keepn \b\f5\fs20 {\uldb\cf11 Object Editing}{\v  idx_editing_the_button_object}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f65646974696e675f7468655f627574746f6e5f6f626a656374}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}\tab \tab {\uldb\cf11 Signals}{\v 
 idx_button_object_signals}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 
6964785f627574746f6e5f6f626a6563745f7369676e616c73}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}\tab \tab {\uldb\cf11 Functions}{\v  idx_button_alm_functions}{\field\flddirty{\*\fldinst  macrobutton NextField 
}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f627574746f6e5f616c6d5f66756e6374696f6e73}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1 
 macrobutton NextField }}{\fldrslt }}
\par \pard \s43\li360\sa100 
\par {\uldb\cf11 Button Assignments}{\v idx_button_assignments}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 
{\*\datafield 6964785f627574746f6e5f61737369676e6d656e7473}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par {\uldb\cf11 Buttons As Flags}{\v idx_buttons_as_flags}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 
{\*\datafield 6964785f627574746f6e735f61735f666c616773}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cf0 The Button}{\i\cf0  }{\cf0 object lets you design customized buttons for an application. The following styles are supported: 
\par }\tab standard push buttons
\par \tab checkbox buttons
\par \tab radio buttons
\par \tab bitmap buttons (Windows)
\par \tab icon buttons (Macintosh)
\par \tab transparent buttons
\par \tab six different embossed buttons (Macintosh)
\par You can occasionally pass Button objects to Text functions, and sometimes you can pass Text objects to Button functions. The transferred data depends on the Button's style. Checkbox and radio buttons transfer their state, which is an "X" if the button is 
selected and nothing if it is deselected.
\par \pard\plain \s34\sb20\sa40\keepn \b\f5 \page {\cs32\fs16\up6 {\*\bkmkstart idx_button_assignments}{\*\bkmkend idx_button_assignments}#{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 #} idx_button_assignments}} {\cs32\fs16\up6 ${\footnote \pard\plain 
\s33 \f5\fs20 {\cs32\fs16\up6 $} Button Assignments}} {\cs32\fs16\up6 +{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 +} brws3:0000}} {\cs32\fs16\up6 K{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 K} Introduction to the Button ALM}} {
\cs32\fs16\up6 !{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 !}   EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_introduction_to_the_button_alm')')}} Button Assignments
\par \pard\plain \s59 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 Sometimes you can assign checkbox and radio Button objects to other objects. Specifically, you can package them in a {\uldb\cf11 Bundle object}{\v\cf0 idx_introduction_to_the_bundle_alm@awusbndl.hlp}
{\field{\*\fldinst {\cf0  macrobutton NextField }}{\fldrslt }}{\field{\*\fldinst  {\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field{\*\fldinst  ADDIN {{\*\datafield 6964785f696e74726f64756374696f6e5f746f5f7468655f62756e646c655f616c6d5f6177757362}}
}{\fldrslt }}{\field{\*\fldinst  macrobutton NextField }{\fldrslt }}{\cf0  }or store them as fields in [J]Database and {\uldb\cf11 File objects}{\v\cf0 idx_introduction_to_the_file_alm@awusfile.hlp}{\field{\*\fldinst {\cf0  macrobutton NextField }
}{\fldrslt }}{\field{\*\fldinst  {\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field{\*\fldinst  ADDIN {{\*\datafield 6964785f696e74726f64756374696f6e5f746f5f7468655f66696c655f616c6d5f6177757366696c}}}{\fldrslt }}{\field{\*\fldinst  macrobutton NextField 
}{\fldrslt }}. You can also use the {\uldb\cf11 Assign}{\v\cf0 idx_assign@awusgnrl.hlp}{\field{\*\fldinst {\cf0  macrobutton NextField }}{\fldrslt }}{\field{\*\fldinst  {\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field{\*\fldinst  ADDIN {{\*\datafield 
6964785f61737369676e5f61777573676e726c5f686c70}}}{\fldrslt }}{\field{\*\fldinst  macrobutton NextField }{\fldrslt }}{\cf0  }
function to replace one checkbox or radio button with another one. When a checkbox or radio button is saved to a database record or a File object, or when one button is assigned to another one, its selection status (selected or deselected) is transferred.
 Other button types transfer their titles when assigned.
\par \pard\plain \s34\sb20\sa40\keepn \b\f5 \page {\cs32\fs16\up6 {\*\bkmkstart idx_buttons_as_flags}{\*\bkmkend idx_buttons_as_flags}#{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 #} idx_buttons_as_flags}} {\cs32\fs16\up6 ${\footnote \pard\plain \s33 
\f5\fs20 {\cs32\fs16\up6 $} Buttons As Flags}} {\cs32\fs16\up6 +{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 +} brws3:0005}} {\cs32\fs16\up6 K{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 K} Introduction to the Button ALM}} {\cs32\fs16\up6 
!{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 !}   EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_introduction_to_the_button_alm')')}} Buttons As Flags
\par \pard\plain \s59 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cf0 A not-so-obvious use of the Button object is as a }{\i\cf0 flag}{\cf0 \emdash 
an indicator that says something about the state of other objects or the program at a given moment. (You can also use the [J]Flag object to do the same thing.)
\par }
Assume you were creating a database application, you had to know whether you were currently browsing the entire file or the results of the last find, and you wanted to use the Button object to check the current state. You could select a checkbox button wh
en the application was browsing the entire file, then deselect the button whenever the application was browsing the results of a find. To determine the current browsing mode, you could test whether the button was selected or not by using the {\uldb\cf11 
Button Set?}{\v\cf0 idx_button_set}{\field{\*\fldinst {\cf0  macrobutton NextField }}{\fldrslt }}{\field{\*\fldinst  {\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field{\*\fldinst  ADDIN {{\*\datafield 6964785f627574746f6e5f736574}}}{\fldrslt }}
{\field{\*\fldinst  macrobutton NextField }{\fldrslt }}{\cf0  }function. The two signals issued by the Button Set? function would then allow you to call a separate function chain for either outcome.
\par \pard\plain \s34\sb20\sa40\keepn \b\f5 \page {\cs32\fs16\up6 {\*\bkmkstart idx_editing_the_button_object}{\*\bkmkend idx_editing_the_button_object}#{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 #} idx_editing_the_button_object}} {\cs32\fs16\up6 $
{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 $} List of,}} {\cs32\fs16\up6 +{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 +} top1:0010}} {\cs32\fs16\up6 K{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 K} Editing the Button Object}} {
\cs32\fs16\up6 !{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 !}   EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_contents')')}} Editing the Button Object
\par \pard\plain \s43\li360\sa100 \b\f5\fs20 
\par {\uldb\cf11 Naming a Button}{\v  idx_naming_a_button}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 
{\*\datafield 6964785f6e616d696e675f615f627574746f6e}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par {\uldb\cf11 Creating an Accelerator Key (Windows)}{\v  idx_creating_an_accelerator_key__windows}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f6372656174696e675f616e5f616363656c657261746f725f6b65795f5f77696e646f7773}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par {\uldb\cf11 Creating a Command Key (Macintosh)}{\v  idx_creating_a_command_key__macintosh}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f6372656174696e675f615f636f6d6d616e645f6b65795f5f6d6163696e746f7368}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par {\uldb\cf11 Specifying a Button Type}{\v  idx_specifying_a_button_type}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN 
}{\cf1 {\*\datafield 6964785f73706563696679696e675f615f627574746f6e5f74797065}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par {\uldb\cf11 Specifying Button States}{\v  idx_specifying_button_states}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN 
}{\cf1 {\*\datafield 6964785f73706563696679696e675f627574746f6e5f737461746573}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par {\uldb\cf11 Specifying Button Options}{\v  idx_specifying_button_options}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1 
 ADDIN }{\cf1 {\*\datafield 6964785f73706563696679696e675f627574746f6e5f6f7074696f6e73}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par {\uldb\cf11 Creating Bitmap Buttons (Windows)}{\v  idx_creating_bitmap_buttons}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {
\cf1  ADDIN }{\cf1 {\*\datafield 6964785f6372656174696e675f6269746d61705f627574746f6e73}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par {\uldb\cf11 Creating Icon Buttons (Macintosh)}{\v  idx_creating_icon_buttons}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1 
 ADDIN }{\cf1 {\*\datafield 6964785f6372656174696e675f69636f6e5f627574746f6e73}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par {\uldb\cf11 Creating Transparent Buttons}{\v  idx_creating_invisible_buttons}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1 
 ADDIN }{\cf1 {\*\datafield 6964785f6372656174696e675f696e76697369626c655f627574746f6e73}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par {\uldb\cf11 Setting Attributes}{\v  idx_setting_attributes}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 
{\*\datafield 6964785f73657474696e675f61747472696275746573}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \pard\plain \s34\sb20\sa40\keepn \b\f5 \page {\cs32\fs16\up6 {\*\bkmkstart idx_naming_a_button}{\*\bkmkend idx_naming_a_button}#{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 #} idx_naming_a_button}} {\cs32\fs16\up6 ${\footnote \pard\plain \s33 
\f5\fs20 {\cs32\fs16\up6 $} Naming a Button}} {\cs32\fs16\up6 +{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 +} brws4:0005}} {\cs32\fs16\up6 K{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 K} Editing the Button Object}} {\cs32\fs16\up6 !
{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 !}    EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_editing_the_button_object')')}} Naming a Button
\par \pard\plain \s59 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 To name a button, type its name in the Title field.
\par \pard\plain \s34\sb20\sa40\keepn \b\f5 \page {\cs32\fs16\up6 {\*\bkmkstart idx_creating_an_accelerator_key__windows}{\*\bkmkend idx_creating_an_accelerator_key__windows}#{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 #}
 idx_creating_an_accelerator_key__windows}} {\cs32\fs16\up6 ${\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 $} Creating an Accelerator Key (Windows)}} {\cs32\fs16\up6 +{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 +} brws4:0010}} {
\cs32\fs16\up6 K{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 K} Editing the Button Object}} {\cs32\fs16\up6 !{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 !}   EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_editing_the_button_object')')}}
 Creating an Accelerator Key (Windows)
\par \pard\plain \s59 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 Buttons, like a menu items, can have an accelerator-key equivalent as an alternative to clicking the button.
\par To create an accelerator key, enter the name of the button in the Title field and type an ampersand (&) in front of the character you want to designate as the accelerator. For example, typing "&Save" creates a button named Save and an "S" accelerator key.
 Within the application, the letter "S" in "Save" would be underlined. 
\par \pard\plain \s34\sb20\sa40\keepn \b\f5 \page {\cs32\fs16\up6 {\*\bkmkstart idx_creating_a_command_key__macintosh}{\*\bkmkend idx_creating_a_command_key__macintosh}#{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 #}
 idx_creating_a_command_key__macintosh}} {\cs32\fs16\up6 ${\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 $} Creating a Command Key (Macintosh)}} {\cs32\fs16\up6 +{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 +} brws4:0015}} {\cs32\fs16\up6 K
{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 K} Editing the Button Object}} {\cs32\fs16\up6 !{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 !}   EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_editing_the_button_object')')}}
 Creating a Command Key (Macintosh)
\par \pard\plain \s59 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 All of the button styles can have command-key equivalents. Push button, checkbox
, and radio buttons show the Command-key symbol on the menu at run time; invisible buttons and icon buttons don't, but they do display a round bullet in front of the letter. To create a command key, enter the character you want to use in the Command Key f
ield.
\par \pard\plain \s34\sb20\sa40\keepn \b\f5 \page {\cs32\fs16\up6 {\*\bkmkstart idx_specifying_a_button_type}{\*\bkmkend idx_specifying_a_button_type}#{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 #} idx_specifying_a_button_type}} {\cs32\fs16\up6 $
{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 $} Specifying a Button Type}} {\cs32\fs16\up6 +{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 +} brws4:0020}} {\cs32\fs16\up6 K{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 K}
 Editing the Button Object}} {\cs32\fs16\up6 !{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 !}   EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_editing_the_button_object')')}} Specifying a Button Type
\par \pard\plain \s59 \f5\fs10 
\par \pard\plain \s30\ri432\sb40\sa40 \b\f5\fs20 Windows
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 To specify a button type, select its radio button. 
\par Push buttons, radio buttons, and checkboxes are standard button types. {\uldb\cf11 Bitmap buttons}{\v\cf0 idx_creating_bitmap_buttons}{\field\flddirty{\*\fldinst {\cf0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst  {\cf6 macrobutton DoJ
ump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst  ADDIN {{\*\datafield 6964785f6372656174696e675f6269746d61705f627574746f6e73}}}{\fldrslt }}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\cf0  }and {\uldb\cf11 Transparent buttons}{
\v\cf0 idx_creating_invisible_buttons}{\field\flddirty{\*\fldinst {\cf0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst  {\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst  ADDIN {{\*\datafield 
6964785f6372656174696e675f696e76697369626c655f627574746f6e73}}}{\fldrslt }}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\cf0  }are unique to AppWare, so they are discussed under separate headings.
\par \pard\plain \s30\ri432\sb40\sa40 \b\f5\fs20 Macintosh
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\uldb\cf11 Icon buttons}{\v\cf0 idx_creating_icon_buttons}{\field\flddirty{\*\fldinst {\cf0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst  {\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}
{\field\flddirty{\*\fldinst  ADDIN {{\*\datafield 6964785f6372656174696e675f69636f6e5f627574746f6e73}}}{\fldrslt }}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\cf0  }are also unique to AppWare.
\par \pard\plain \s34\sb20\sa40\keepn \b\f5 \page {\cs32\fs16\up6 {\*\bkmkstart idx_specifying_button_options}{\*\bkmkend idx_specifying_button_options}#{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 #} idx_specifying_button_options}} {\cs32\fs16\up6 $
{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 $} Specifying Button Options}} {\cs32\fs16\up6 +{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 +} brws4:0025}} {\cs32\fs16\up6 K{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 K}
 Editing the Button Object}} {\cs32\fs16\up6 !{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_editing_the_button_object')')}} Specifying Button Options
\par \pard\plain \s59 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 The following options are available for buttons: 
\par Enabled
\par \pard\plain \s20\fi-360\li720\sa60\nowidctlpar\tx360 \f5\fs20\cf1 \tab Enabled buttons are active by default. The name of a disabled button is grayed out. 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 Selected
\par \pard\plain \s20\fi-360\li720\sa60\nowidctlpar\tx360 \f5\fs20\cf1 \tab The Selected checkbox is enabled in the Options box if you select a radio or checkbox button. If you select this checkbox, the button will be selected by default at run time. 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 Inverts
\par \pard\plain \s20\fi-360\li720\sa60\nowidctlpar\tx360 \f5\fs20\cf1 \tab The Inverts checkbox is displayed in Options box if you select a transparent button. It causes a transparent button to be inverted when pressed.
\par \pard\plain \s34\sb20\sa40\keepn \b\f5 \page {\cs32\fs16\up6 {\*\bkmkstart idx_specifying_button_states}{\*\bkmkend idx_specifying_button_states}#{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 #} idx_specifying_button_states}} {\cs32\fs16\up6 $
{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 $} Specifying Button States}} {\cs32\fs16\up6 +{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 +} brws4:0022}} {\cs32\fs16\up6 K{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 K}
 Editing the Button Object}} {\cs32\fs16\up6 !{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 !} EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_editing_the_button_object')')}} Specifying Button States
\par \pard\plain \s59 \f5\fs10 
\par \pard\plain \s30\ri432\sb40\sa40 \b\f5\fs20 Windows
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 There are three button states:
\par Normal
\par \tab The button is activated when the user clicks it.
\par Default
\par \tab The button is activated when the user presses the Enter key.
\par Cancel
\par \tab The button is activated when the user presses the Escape key.
\par \pard\plain \s30\ri432\sb40\sa40 \b\f5\fs20 Macintosh
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 Default buttons are also activated by pressing the Return key. Cancel buttons are also activated by pressing the Command and period key combination.
\par \pard\plain \s34\sb20\sa40\keepn \b\f5 \page {\cs32\fs16\up6 {\*\bkmkstart idx_creating_bitmap_buttons}{\*\bkmkend idx_creating_bitmap_buttons}#{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 #} idx_creating_bitmap_buttons}} {\cs32\fs16\up6 $
{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 $} Creating Bitmap Buttons (Windows)}} {\cs32\fs16\up6 +{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 +} brws4:0030}} {\cs32\fs16\up6 K{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 K}
 Creating Bitmap Buttons;Editing the Button Object}} {\cs32\fs16\up6 !{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 !}    EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_editing_the_button_object')')}} Creating Bitmap Buttons (Windows)
\par \pard\plain \s43\li360\sa100 \b\f5\fs20 
\par {\uldb\cf11 Specifying a Bitmap Button State}{\v  idx_specifying_a_bitmap_button_state}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f73706563696679696e675f615f6269746d61705f627574746f6e5f7374617465}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par {\uldb\cf11 Bitmap Button States}{\v  idx_bitmap_button_states}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 
{\*\datafield 6964785f6269746d61705f627574746f6e5f737461746573}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par {\uldb\cf11 Pasting Bitmap Buttons}{\v  idx_pasting_bitmap_buttons}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{
\cf1 {\*\datafield 6964785f70617374696e675f6269746d61705f627574746f6e73}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par {\uldb\cf11 Loading .BMP Files}{\v  idx_loading__bmp_files}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 
{\*\datafield 6964785f6c6f6164696e675f5f626d705f66696c6573}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par {\uldb\cf11 Specifying a Display Mode}{\v  idx_specifying_a_display_mode}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1 
 ADDIN }{\cf1 {\*\datafield 6964785f73706563696679696e675f615f646973706c61795f6d6f6465}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par {\uldb\cf11 Bitmap Button Display Modes}{\v  idx_bitmap_button_display_modes}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1 
 ADDIN }{\cf1 {\*\datafield 6964785f6269746d61705f627574746f6e5f646973706c61795f6d6f646573}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par {\uldb\cf11 Testing the Bitmap Button}{\v  idx_testing_the_bitmap_button}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1 
 ADDIN }{\cf1 {\*\datafield 6964785f74657374696e675f7468655f6269746d61705f627574746f6e}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cf0 To create a bitmap button:
\par }\pard\plain \s21\fi-360\li720\sa60\nowidctlpar\tx360 \f5\fs20\cf1 1.\tab Select Bitmap Button in the Type box.
\par \pard\plain \s20\fi-360\li720\sa60\nowidctlpar\tx360 \f5\fs20\cf1 \tab The push button named Bitmap will be enabled on the right side of the dialog.
\par \pard\plain \s21\fi-360\li720\sa60\nowidctlpar\tx360 \f5\fs20\cf1 2.\tab Click Bitmap.
\par \pard\plain \s20\fi-360\li720\sa60\nowidctlpar\tx360 \f5\fs20\cf1 \tab The Bitmap Button dialog appears. The dialog allows you to paste or load a .BMP file as a button.
\par \pard\plain \s34\sb20\sa40\keepn \b\f5 \page {\cs32\fs16\up6 {\*\bkmkstart idx_specifying_a_bitmap_button_state}{\*\bkmkend idx_specifying_a_bitmap_button_state}#{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 #} idx_specifying_a_bitmap_button_state}
} {\cs32\fs16\up6 ${\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 $} Specifying a Bitmap Button State}} {\cs32\fs16\up6 +{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 +} brws6:0005}} {\cs32\fs16\up6 K{\footnote \pard\plain \s33 \f5\fs20 {
\cs32\fs16\up6 K} Creating Bitmap Buttons}} {\cs32\fs16\up6 !{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 !}  EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_creating_bitmap_buttons')')}} Specifying a Bitmap Button State
\par \pard\plain \s59 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 You can load or paste separate pictures for each of the {\uldb\cf11 button's states}{\v\cf0 idx_bitmap_button_states}{\field\flddirty{\*\fldinst {\cf0  macrobutton NextField }}{\fldrslt }}
{\field\flddirty{\*\fldinst  {\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst  ADDIN {{\*\datafield 6964785f6269746d61705f627574746f6e5f737461746573}}}{\fldrslt }}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\cf0 
 }(i.e. Normal, Focused, Pressed, and Disabled). To specify a {\cf0 button state}, click the one you want.
\par \pard\plain \s34\sb20\sa40\keepn \b\f5 \page {\cs32\fs16\up6 {\*\bkmkstart idx_bitmap_button_states}{\*\bkmkend idx_bitmap_button_states}#{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 #} idx_bitmap_button_states}} {\cs32\fs16\up6 ${\footnote 
\pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 $} Bitmap Button States}} {\cs32\fs16\up6 +{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 +} brws6:0010}} {\cs32\fs16\up6 K{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 K} Creating Bitmap Buttons}} {
\cs32\fs16\up6 !{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 !}   EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_creating_bitmap_buttons')')}} Bitmap Button States
\par \pard\plain \s59 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 There are four bitmap button states:
\par \pard\plain \s29\fi-360\li720\sa60\nowidctlpar\tx360\tx1224\tx1440 \f5\fs20\cf1 Normal\line The button's appearance when it is enabled, but without focus.
\par Focused\line 
The button's appearance when it is the active window item. Buttons are activatable like other window items such as editable fields, lists, pictures, and tables; this means you can tab to them. When you tab to a button, it becomes the active window
 item and is said to receive {\i focus}. A button with focus temporarily becomes the default button and is activated when the Enter key is pressed.
\par {\pntext\tab}\pard\plain \s20\fi-360\li720\sa60\nowidctlpar{\*\pn \pnlvlcont\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\f5\fs20\cf1 NOTE: Buttons other than the default button can also respond to the Enter key when they have {\cf0 focus}.
\par \pard\plain \s29\fi-360\li720\sa60\nowidctlpar\tx360\tx1224\tx1440 \f5\fs20\cf1 Pressed\line The button's appearance when it is activated by the mouse or the Enter key.
\par Disabled\line The button's appearance when it is disabled.
\par \pard\plain \s34\sb20\sa40\keepn \b\f5 \page {\cs32\fs16\up6 {\*\bkmkstart idx_pasting_bitmap_buttons}{\*\bkmkend idx_pasting_bitmap_buttons}#{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 #} idx_pasting_bitmap_buttons}} {\cs32\fs16\up6 ${\footnote 
\pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 $} Pasting Bitmap Buttons}} {\cs32\fs16\up6 +{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 +} brws6:0015}} {\cs32\fs16\up6 K{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 K} Creating Bitmap Buttons}} 
{\cs32\fs16\up6 !{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 !}  EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_creating_bitmap_buttons')')}} Pasting Bitmap Buttons
\par \pard\plain \s59 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 You can have a separate image for each button state by pasting 
images from the clipboard. Buttons typically have both a normal and a pressed state, but every state doesn't need a separate image. To paste pictures from the Clipboard:
\par \pard\plain \s21\fi-360\li720\sa60\nowidctlpar\tx360 \f5\fs20\cf1 1.\tab Copy the image onto the clipboard.
\par \pard \s21\fi-360\li720\sa60\nowidctlpar 2.\tab Select the button state that is to display the image.
\par \pard \s21\fi-360\li720\sa60\nowidctlpar\tx360 3.\tab Click the Paste button.
\par 4.\tab Repeat Steps 1-3 for each image you want displayed. 
\par \pard\plain \s34\sb20\sa40\keepn \b\f5 \page {\cs32\fs16\up6 {\*\bkmkstart idx_loading__bmp_files}{\*\bkmkend idx_loading__bmp_files}#{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 #} idx_loading__bmp_files}} {\cs32\fs16\up6 ${\footnote \pard\plain 
\s33 \f5\fs20 {\cs32\fs16\up6 $} Loading .BMP Files}} {\cs32\fs16\up6 +{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 +} brws6:0020}} {\cs32\fs16\up6 K{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 K} Creating Bitmap Buttons}} {\cs32\fs16\up6 
!{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 !}  EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_creating_bitmap_buttons')')}} Loading .BMP Files
\par \pard\plain \s59 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 
You can have a separate image for each button state by loading the images from a .BMP (bitmap) file. Buttons typically have both a normal and a pressed state, but every state doesn't need a separate image. To load a .BMP file:
\par \pard\plain \s21\fi-360\li720\sa60\nowidctlpar \f5\fs20\cf1 1.\tab Select the button state that is to display the image.
\par \pard \s21\fi-360\li720\sa60\nowidctlpar\tx360 2.\tab Click the Load button.
\par \pard\plain \s20\fi-360\li720\sa60\nowidctlpar\tx360 \f5\fs20\cf1 \tab The Load Bitmap dialog appears. The dialog allows you to choose a .BMP file.
\par \pard\plain \s21\fi-360\li720\sa60\nowidctlpar\tx360 \f5\fs20\cf1 3.\tab Choose the .BMP file you want to use for this button.
\par 4.\tab Repeat Steps 1-3 for each image you want displayed. 
\par \pard\plain \s34\sb20\sa40\keepn \b\f5 \page {\cs32\fs16\up6 {\*\bkmkstart idx_specifying_a_display_mode}{\*\bkmkend idx_specifying_a_display_mode}#{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 #} idx_specifying_a_display_mode}} {\cs32\fs16\up6 $
{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 $} Specifying a Display Mode}} {\cs32\fs16\up6 +{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 +} brws6:0025}} {\cs32\fs16\up6 K{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 K}
 Creating Bitmap Buttons}} {\cs32\fs16\up6 !{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 !}  EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_creating_bitmap_buttons')')}} Specifying a Display Mode
\par \pard\plain \s59 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 Bitmap buttons support three {\uldb\cf11 display modes}{\v\cf0 idx_bitmap_button_display_modes}{\field\flddirty{\*\fldinst {\cf0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst  {\cf6 
macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst  ADDIN {{\*\datafield 6964785f6269746d61705f627574746f6e5f646973706c61795f6d6f646573}}}{\fldrslt }}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}
. To specify one, select it from the Display mode box.
\par \pard\plain \s34\sb20\sa40\keepn \b\f5 \page {\cs32\fs16\up6 {\*\bkmkstart idx_bitmap_button_display_modes}{\*\bkmkend idx_bitmap_button_display_modes}#{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 #} idx_bitmap_button_display_modes}} {
\cs32\fs16\up6 ${\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 $} Bitmap Button Display Modes}} {\cs32\fs16\up6 +{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 +} brws6:0030}} {\cs32\fs16\up6 K{\footnote \pard\plain \s33 \f5\fs20 {
\cs32\fs16\up6 K} Creating Bitmap Buttons}} {\cs32\fs16\up6 !{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 !}   EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_creating_bitmap_buttons')')}} Bitmap Button Display Modes
\par \pard\plain \s59 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 Bitmap buttons support three display modes:
\par \pard\plain \s29\fi-360\li720\sa60\nowidctlpar\tx360\tx1224\tx1440 \f5\fs20\cf1 Size to Fit\line Resizes the image to fill the window's entire Button object rectangle.
\par Crop\line Crops any part of the image that extends beyond the bottom, right edges of the Button object's rectangle.
\par Proportional\line Scales the image within the Button object's rectangle to maintain the original proportions of the image.
\par \pard\plain \s34\sb20\sa40\keepn \b\f5 \page {\cs32\fs16\up6 {\*\bkmkstart idx_testing_the_bitmap_button}{\*\bkmkend idx_testing_the_bitmap_button}#{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 #} idx_testing_the_bitmap_button}} {\cs32\fs16\up6 $
{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 $} Testing the Bitmap Button}} {\cs32\fs16\up6 +{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 +} brws6:0035}} {\cs32\fs16\up6 K{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 K}
 Creating Bitmap Buttons}} {\cs32\fs16\up6 !{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 !}  EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_creating_bitmap_buttons')')}} Testing the Bitmap Button
\par \pard\plain \s59 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 You can test the bitmap button when you return to the Button editing dialog. To see how a bitmap button will look when pushed during run time, click the Test Button field.
\par The colors in 256-color bitmaps appear slightly different at run time than they do at design time.
\par \pard\plain \s34\sb20\sa40\keepn \b\f5 \page {\cs32\fs16\up6 {\*\bkmkstart idx_creating_icon_buttons}{\*\bkmkend idx_creating_icon_buttons}#{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 #} idx_creating_icon_buttons}} {\cs32\fs16\up6 ${\footnote 
\pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 $} Creating Icon Buttons (Macintosh)}} {\cs32\fs16\up6 +{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 +} brws4:0035}} {\cs32\fs16\up6 K{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 K}
 Editing the Button Object}} {\cs32\fs16\up6 !{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 !}   EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_editing_the_button_object')')}} Creating Icon Buttons (Macintosh)
\par \pard\plain \s59 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 To create an icon button:
\par \pard\plain \s21\fi-360\li720\sa60\nowidctlpar\tx360 \f5\fs20\cf1 1.\tab Select the icon button style from the Type box.
\par 2.\tab Click the Load/Edit button.
\par \pard\plain \s20\fi-360\li720\sa60\nowidctlpar\tx360 \f5\fs20\cf1 \tab 
The Button Icon Construction dialog opens. It contains two fat-bits editing boxes that show an enlarged view of the icon button. Design the icon in the box on the left. Each square (that is, bit) in the box represents one pixel. If you click a white bit,
 it becomes a black bit and vice versa. 
\par \pard\plain \s21\fi-360\li720\sa60\nowidctlpar\tx360 \f5\fs20\cf1 3.\tab Generate the mask by clicking the mask button.
\par \pard\plain \s20\fi-360\li720\sa60\nowidctlpar\tx360 \f5\fs20\cf1 \tab The mask appears in the editing box on the right.
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 To clear an icon, click the Clear button. 
\par If you don't want to create an icon button, you can load an icon resource from another application or from an icon resource file. To load an icon resource:
\par \pard\plain \s21\fi-360\li720\sa60\nowidctlpar\tx360 \f5\fs20\cf1 1.\tab Click the Load/Edit button.
\par \pard\plain \s20\fi-360\li720\sa60\nowidctlpar\tx360 \f5\fs20\cf1 \tab 
The Button Icon Construction dialog opens. It has two buttons, labeled Load ICON and Load ICN#, that allow you to load an icon. If you load an ICON resource, you only get the icon resource. You have to generate its mask by clicking the mask button. If yo
u load an ICN# resource, you get the icon resource and its mask. 
\par \pard\plain \s21\fi-360\li720\sa60\nowidctlpar\tx360 \f5\fs20\cf1 2.\tab Click Load ICON or LOAD ICN#.
\par \pard\plain \s20\fi-360\li720\sa60\nowidctlpar\tx360 \f5\fs20\cf1 \tab A standard file dialog appears.
\par \pard\plain \s21\fi-360\li720\sa60\nowidctlpar\tx360 \f5\fs20\cf1 3.\tab Find and select the file that contains the icon you want to load. (The file can be an application.)
\par 4.\tab Click the Open button.
\par \pard\plain \s20\fi-360\li720\sa60\nowidctlpar\tx360 \f5\fs20\cf1 \tab The Resources in File dialog opens. It lists ID numbers for the file's icon resources. Each number represents one icon resource. 
\par \pard\plain \s21\fi-360\li720\sa60\nowidctlpar\tx360 \f5\fs20\cf1 5.\tab Find and select an icon ID.
\par \pard\plain \s20\fi-360\li720\sa60\nowidctlpar\tx360 \f5\fs20\cf1 \tab The icon is loaded into the editor. 
\par \pard\plain \s34\sb20\sa40\keepn \b\f5 \page {\cs32\fs16\up6 {\*\bkmkstart idx_creating_invisible_buttons}{\*\bkmkend idx_creating_invisible_buttons}#{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 #} idx_creating_invisible_buttons}} {\cs32\fs16\up6 
${\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 $} Creating Transparent Buttons}} {\cs32\fs16\up6 +{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 +} brws4:0040}} {\cs32\fs16\up6 K{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 K}
 Editing the Button Object}} {\cs32\fs16\up6 !{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 !}     EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_editing_the_button_object')')}} Creating Transparent Buttons
\par \pard\plain \s59 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 Transparent buttons work like other buttons. They are most commonly used to make buttons out of other objects, such as pictures. 
\par For example, if your application includes a startup splash window, you might want to let your user close the window by clicking in it. One way to do this is to place a transparent button over the image in the window and use the Pressed button signal to ca
ll the Close Window function. When the user clicks in the window, the button is pressed, the signal is issued, and the window is closed. All the user sees is that clicking closes the window. 
\par To create a transparent button:
\par \pard\plain \s21\fi-360\li720\sa60\nowidctlpar\tx360 \f5\fs20\cf1 {\cf0 1.\tab Create a button, but don't name it. 
\par 2.\tab Select Transparent Button in the Type box. 
\par }\pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 You can make transparent buttons invert whatever is underneath them by selecting the Inverts checkbox in the Options box.
\par \pard\plain \s34\sb20\sa40\keepn \b\f5 \page {\cs32\fs16\up6 {\*\bkmkstart idx_setting_attributes}{\*\bkmkend idx_setting_attributes}#{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 #} idx_setting_attributes}} {\cs32\fs16\up6 ${\footnote \pard\plain 
\s33 \f5\fs20 {\cs32\fs16\up6 $} Setting Attributes}} {\cs32\fs16\up6 +{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 +} brws4:0045}} {\cs32\fs16\up6 K{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 K} Editing the Button Object}} {
\cs32\fs16\up6 !{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 !}   EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_editing_the_button_object')')}} Setting Attributes
\par \pard\plain \s59 \f5\fs10 
\par \pard\plain \s30\ri432\sb40\sa40 \b\f5\fs20 Windows
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 To open the Edit Font dialog, click the Font button. The Edit Font dialog allows you to set the font, style, size, and color of the button title.
\par \pard\plain \s30\ri432\sb40\sa40 \b\f5\fs20 Macintosh
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 You can change the font, size, or style of a button title for buttons types other than the default push button, checkboxes, or radio buttons. Open the Font dialog by clicking the Font button.
\par \pard \s15\li360\sa60\nowidctlpar If the default push button type is selected, the Color options in the Font dialog 
are enabled. These options lets you change the color of a button's text, frame, and fill. To set the color for a button's text and frame, click the Text & Frame button. To set a button's fill color, cl
ick the Fill button. Both buttons open a standard color wheel.
\par \pard\plain \s34\sb20\sa40\keepn \b\f5 \page {\cs32\fs16\up6 {\*\bkmkstart idx_button_object_signals}{\*\bkmkend idx_button_object_signals}#{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 #} idx_button_object_signals}} {\cs32\fs16\up6 ${\footnote 
\pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 $} Button Object Signals}} {\cs32\fs16\up6 +{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 +} top1:0015}} {\cs32\fs16\up6 K{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 K} Button Object Signals}} {
\cs32\fs16\up6 !{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 !}   EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_contents')')}} Button Object Signals
\par \pard\plain \s17\li360\sb120\sa40\nowidctlpar \f5\fs20\cf1 Pressed
\par \pard\plain \s19\li720\sa60\nowidctlpar \f5\fs20\cf1 Issued when the user presses and releases the mouse button while the mouse is inside an active button.
\par \pard\plain \s17\li360\sb120\sa40\nowidctlpar \f5\fs20\cf1 Touched
\par \pard\plain \s19\li720\sa60\nowidctlpar \f5\fs20\cf1 
Issued when the user presses the mouse button while the mouse is inside an active button. Touched differs from Pressed in that the Button object issues it immediately, regardless of whether the mouse button has been released.
\par \pard\plain \s17\li360\sb120\sa40\nowidctlpar \f5\fs20\cf1 While Down
\par \pard\plain \s19\li720\sa60\nowidctlpar \f5\fs20\cf1 Issued repeatedly as long as the user holds the mouse button down inside an active button.
\par \pard\plain \s17\li360\sb120\sa40\nowidctlpar \f5\fs20\cf1 Toggled Off
\par \pard\plain \s19\li720\sa60\nowidctlpar \f5\fs20\cf1 Issued when the user deselects an active radio or checkbox button.
\par \pard\plain \s17\li360\sb120\sa40\nowidctlpar \f5\fs20\cf1 Toggled On
\par \pard\plain \s19\li720\sa60\nowidctlpar \f5\fs20\cf1 Issued when the user selects an active radio or checkbox button.
\par \pard\plain \s17\li360\sb120\sa40\nowidctlpar \f5\fs20\cf1 Mouse Released
\par \pard\plain \s19\li720\sa60\nowidctlpar \f5\fs20\cf1 Issued when the user presses the mouse button inside an active button, then releases it. No attention is paid to whether the mouse button was released while it was still inside the button.
\par \pard\plain \s17\li360\sb120\sa40\nowidctlpar \f5\fs20\cf1 Double Clicked
\par \pard\plain \s19\li720\sa60\nowidctlpar \f5\fs20\cf1 Issued when the user clicks twice inside an active button.
\par \pard\plain \s34\sb20\sa40\keepn \b\f5 \page {\cs32\fs16\up6 {\*\bkmkstart idx_button_alm_functions}{\*\bkmkend idx_button_alm_functions}#{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 #} idx_button_alm_functions}} {\cs32\fs16\up6 ${\footnote 
\pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 $} List of,}} {\cs32\fs16\up6 +{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 +} top1:0020}} {\cs32\fs16\up6 K{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 K} Button Functions}} {\cs32\fs16\up6 !
{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 !}    EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_contents')')}} Button Functions
\par \pard\plain \s43\li360\sa100 \b\f5\fs20 
\par \trowd \trqc\trgaph108\trleft-108 \cellx3132\cellx6372 \pard\plain \s58\li360\intbl \b\f5\fs20\uldb\cf11 \{bmc graphics\\i_btst.bmp\}{\v idx_button_set}{\field\flddirty{\*\fldinst {\b0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {
\b0\cf1  }{\b0\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\b0\ulnone\cf1   }Button Set?{\v idx_button_set}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f627574746f6e5f736574}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \cell \{bmc graphics\\i_bgtt.bmp\}{\v idx_get_title}{\field\flddirty{\*\fldinst {\b0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\b0\cf1  }{\b0\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\b0\ulnone\cf1   }Get Title{\v idx_get_title}
{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f6765745f7469746c65}}}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \cell \pard\plain \intbl \f5\fs20 \row \trowd \trqc\trgaph108\trleft-108 \cellx3132\cellx6372 \pard\plain \s58\li360\intbl \b\f5\fs20\uldb\cf11 \{bmc graphics\\i_bclr.bmp\}{\v idx_clear_button}{\field\flddirty{\*\fldinst {\b0  macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\b0\cf1  }{\b0\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\b0\ulnone\cf1   }Clear Button{\v idx_clear_button}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{
\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f636c6561725f627574746f6e}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \cell \{bmc graphics\\i_bset.bmp\}{\v idx_set_button}{\field\flddirty{\*\fldinst {\b0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\b0\cf1  }{\b0\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\b0\ulnone\cf1   }Set Button{\v idx_set_button
}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f7365745f627574746f6e}}}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \cell \pard\plain \intbl \f5\fs20 \row \pard\plain \s58\li360\intbl \b\f5\fs20\uldb\cf11 \{bmc graphics\\i_bdsb.bmp\}{\v idx_disable_button}{\field\flddirty{\*\fldinst {\b0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\b0\cf1  }{
\b0\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\b0\ulnone\cf1   }Disable Button{\v idx_disable_button}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f64697361626c655f627574746f6e}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \cell \{bmc graphics\\i_bstt.bmp\}{\v idx_set_title}{\field\flddirty{\*\fldinst {\b0  macrobutton NextField }}{\fldrslt }}{\field\flddirty{\*\fldinst {\b0\cf1  }{\b0\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\b0\ulnone\cf1   }Set Title{\v idx_set_title}
{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f7365745f7469746c65}}}{\fldrslt }}
{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \cell \pard\plain \intbl \f5\fs20 \row \trowd \trqc\trgaph108\trleft-108 \cellx3132\cellx6372 \pard\plain \s58\li360\intbl \b\f5\fs20\uldb\cf11 \{bmc graphics\\i_benb.bmp\}{\v idx_enable_button}{\field\flddirty{\*\fldinst {\b0  macrobutton NextField }
}{\fldrslt }}{\field\flddirty{\*\fldinst {\b0\cf1  }{\b0\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\b0\ulnone\cf1   }Enable Button{\v idx_enable_button}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{
\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f656e61626c655f627574746f6e}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \cell \cell \pard\plain \intbl \f5\fs20 \row \pard\plain \s34\sb20\sa40\keepn \b\f5 \page {\cs32\fs16\up6 {\*\bkmkstart idx_button_set}{\*\bkmkend idx_button_set}#{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 #} idx_button_set}} {\cs32\fs16\up6 $
{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 $} Parameters & Flows}} {\cs32\fs16\up6 +{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 +} brws5:0000}} {\cs32\fs16\up6 K{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 K} Button Set?}} {
\cs32\fs16\up6 !{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 !}    EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_button_alm_functions')')}} Button Set?
\par \pard\plain \s43\li360\sa100\keepn \b\f5\fs20 Button {\cchs256 ALM}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f616374696f6e5f627574746f6e5f736574}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }
}{\fldrslt }}
\par \pard\plain \s59 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Checks a radio or checkbox button for }a{\cchs256  selection mark and issues }a {\cchs256 signal }to {\cchs256 indicate whether the selection mark is present.}
 (The button is set when it is selected.){\cchs256 
\par }NOTE: {\cchs256 If you specify an}y button type other than a radio or checkbox button, {\cchs256 the }output flow{\cchs256  is unpredictable.} For example, you shouldn't use this function for a push button.{\cchs256 
\par }
\par \pard\plain \s43\li360\sa100 \b\f5\fs20 {\cf5 \{bmc graphics\\f_btst.bmp\}}{\cf1  }
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 
\par }\pard\plain \s55\sb40\sa40 \b\f5\fs20 Input Parameters{\cchs256 
\par }\pard\plain \s48\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Button}\tab (Button/Required){\cchs256 
\par }\pard\plain \s49\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Identifies the radio or checkbox button to }be {\cchs256 check}ed{\cchs256  for the selection mark.
\par }\pard\plain \s54\ri432\sb40\sa40 \b\f5\fs20 Flows{\cchs256 
\par }\pard\plain \s44\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Set
\par }\pard\plain \s45\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed if the }button has been selected.{\cchs256 
\par }\pard\plain \s44\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Not set
\par }\pard\plain \s45\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed if the }button hasn't been set{\cchs256 . }The application also follows this flow if {\cchs256 the Button }object {\cchs256 isn't a check}box{\cchs256  or radio button.}
\par \pard\plain \s34\sb20\sa40\keepn \b\f5 \page {\cs32\fs16\up6 {\*\bkmkstart idx_clear_button}{\*\bkmkend idx_clear_button}#{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 #} idx_clear_button}} {\cs32\fs16\up6 ${\footnote \pard\plain \s33 \f5\fs20 {
\cs32\fs16\up6 $} Parameters & Flows}} {\cs32\fs16\up6 +{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 +} brws5:0005}} {\cs32\fs16\up6 K{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 K} Clear Button}} {\cs32\fs16\up6 !{\footnote \pard\plain 
\s33 \f5\fs20 {\cs32\fs16\up6 !}    EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_button_alm_functions')')}} Clear Button
\par \pard\plain \s43\li360\sa100\keepn \b\f5\fs20 Button ALM{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f616374696f6e5f636c6561725f627574746f6e}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}

\par \pard\plain \s59 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Removes }a{\cchs256  selection mark from a radio or checkbox button.
\par }NOTE: {\cchs256 If the button }doesn't have a{\cchs256  selection mark} or is anything other than a radio or checkbox button{\cchs256 , the function does nothing.
\par }
\par \pard\plain \s43\li360\sa100 \b\f5\fs20 {\cf5 \{bmc graphics\\f_bclr.bmp\}}{\cf1  }
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 
\par \pard\plain \s55\sb40\sa40 \b\f5\fs20 Input Parameters{\cchs256 
\par }\pard\plain \s48\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Button}\tab (Button/Required){\cchs256 
\par }\pard\plain \s49\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Identifies the button }whose selection mark is to be cleared. {\cchs256 The input accepts Button objects of all types, }but {\cchs256 the function only affects radio and checkbox buttons.

\par }\pard\plain \s54\ri432\sb40\sa40 \b\f5\fs20 Flows{\cchs256 
\par }\pard\plain \s44\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Done
\par }\pard\plain \s45\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed after the selection mark for }a{\cchs256  button }has been{\cchs256  cleared.}
\par \pard\plain \s34\sb20\sa40\keepn \b\f5 \page {\cs32\fs16\up6 {\*\bkmkstart idx_disable_button}{\*\bkmkend idx_disable_button}#{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 #} idx_disable_button}} {\cs32\fs16\up6 ${\footnote \pard\plain \s33 
\f5\fs20 {\cs32\fs16\up6 $} Parameters & Flows}} {\cs32\fs16\up6 +{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 +} brws5:0010}} {\cs32\fs16\up6 K{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 K} Disable Button}} {\cs32\fs16\up6 !{\footnote 
\pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 !}    EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_button_alm_functions')')}} Disable Button
\par \pard\plain \s43\li360\sa100\keepn \b\f5\fs20 Button {\cchs256 ALM}{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f616374696f6e5f64697361626c655f627574746f6e}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }
}{\fldrslt }}\tab \tab {\uldb\cf11 Usage}{\v  idx_usage_disable_button}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  }{\cf6 macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  ADDIN 
}{\cf1 {\*\datafield 6964785f75736167655f64697361626c655f627574746f6e}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \pard\plain \s59 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Disables a button.
\par }
\par \pard\plain \s43\li360\sa100 \b\f5\fs20 {\cf5 \{bmc graphics\\f_bdsb.bmp\}}{\cf1  }
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 
\par }\pard\plain \s55\sb40\sa40 \b\f5\fs20 Input Parameters{\cchs256 
\par }\pard\plain \s48\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Button
\par }\pard\plain \s49\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Identifies the button to }be {\cchs256 disable}d{\cchs256 . Type: Button (Required).
\par }\pard\plain \s54\ri432\sb40\sa40 \b\f5\fs20 Flows{\cchs256 
\par }\pard\plain \s44\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Done
\par }\pard\plain \s45\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed after }a{\cchs256  button }has been{\cchs256  disabled.}
\par \pard\plain \s34\sb20\sa40\keepn \b\f5 \page {\cs32\fs16\up6 {\*\bkmkstart idx_usage_disable_button}{\*\bkmkend idx_usage_disable_button}#{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 #} idx_usage_disable_button}} {\cs32\fs16\up6 ${\footnote 
\pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 $} Usage}} {\cs32\fs16\up6 +{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 +} func3:0010}} {\cs32\fs16\up6 K{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 K} Disable Button}} {\cs32\fs16\up6 !
{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 !}   EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_disable_button')')}} Usage
\par \pard\plain \s43\li360\sa100\keepn \b\f5\fs20 Disable Button
\par \pard\plain \s59 \f5\fs10 {\cchs256 
\par }\pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 Disabled buttons don't issue signals, so m{\cchs256 ouse clicks have no effect on }them.{\cchs256  This function }disables{\cchs256  }all {\cchs256 button} type{\cchs256 s.
\par }NOTE: You can also enable and disable buttons {\cchs256 at startup. See }{\uldb\cf11 Specifying Button Options}{\v\cf0 idx_specifying_button_options}{\field{\*\fldinst {\cf0  macrobutton NextField }}{\fldrslt }}{\field{\*\fldinst  {\cf6 
macrobutton DoJump2 <+>}}{\fldrslt }}{\field{\*\fldinst  ADDIN {{\*\datafield 6964785f73706563696679696e675f627574746f6e5f6f7074696f6e73}}}{\fldrslt }}{\field{\*\fldinst  macrobutton NextField }{\fldrslt }}{\cf0  }{\cchs256 for }more{\cchs256  details.

\par }\pard\plain \s34\sb20\sa40\keepn \b\f5 \page {\cs32\fs16\up6 {\*\bkmkstart idx_enable_button}{\*\bkmkend idx_enable_button}#{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 #} idx_enable_button}} {\cs32\fs16\up6 ${\footnote \pard\plain \s33 \f5\fs20 
{\cs32\fs16\up6 $} Parameters & Flows}} {\cs32\fs16\up6 +{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 +} brws5:0015}} {\cs32\fs16\up6 K{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 K} Enable Button}} {\cs32\fs16\up6 !{\footnote \pard\plain 
\s33 \f5\fs20 {\cs32\fs16\up6 !}    EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_button_alm_functions')')}} Enable Button
\par \pard\plain \s43\li360\sa100\keepn \b\f5\fs20 Button ALM{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f616374696f6e5f656e61626c655f627574746f6e}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}

\par \pard\plain \s59 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Enables a button.
\par }NOTE: You can also enable and disable buttons {\cchs256 at startup. See }{\uldb\cf11 Specifying Button Options}{\v\cf0 idx_specifying_button_options}{\field{\*\fldinst {\cf0  macrobutton NextField }}{\fldrslt }}{\field{\*\fldinst  {\cf6 
macrobutton DoJump2 <+>}}{\fldrslt }}{\field\flddirty{\*\fldinst  ADDIN {{\*\datafield 6964785f73706563696679696e675f627574746f6e5f7374796c6573}}}{\fldrslt }}{\field\flddirty{\*\fldinst  macrobutton NextField }{\fldrslt }}{\cf0  }{\cchs256 for }more{
\cchs256  details.
\par }
\par \pard\plain \s43\li360\sa100 \b\f5\fs20 {\cf5 \{bmc graphics\\f_benb.bmp\}}{\cf1  }
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 
\par }\pard\plain \s55\sb40\sa40 \b\f5\fs20 Input Parameters{\cchs256 
\par }\pard\plain \s48\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Button}\tab (Button/Required){\cchs256 
\par }\pard\plain \s49\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Identifies the button to} be{\cchs256  enable}d{\cchs256 .
\par }\pard\plain \s54\ri432\sb40\sa40 \b\f5\fs20 Flows{\cchs256 
\par }\pard\plain \s44\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Done
\par }\pard\plain \s45\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed after }a{\cchs256  button }has been{\cchs256  enabled.}
\par \pard\plain \s34\sb20\sa40\keepn \b\f5 \page {\cs32\fs16\up6 {\*\bkmkstart idx_get_title}{\*\bkmkend idx_get_title}#{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 #} idx_get_title}} {\cs32\fs16\up6 ${\footnote \pard\plain \s33 \f5\fs20 {
\cs32\fs16\up6 $} Parameters & Flows}} {\cs32\fs16\up6 +{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 +} brws5:0020}} {\cs32\fs16\up6 K{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 K} Get Title}} {\cs32\fs16\up6 !{\footnote \pard\plain \s33 
\f5\fs20 {\cs32\fs16\up6 !}    EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_button_alm_functions')')}} Get Title
\par \pard\plain \s43\li360\sa100\keepn \b\f5\fs20 Button ALM{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f616374696f6e5f6765745f7469746c65}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \pard\plain \s59 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Returns the }title{\cchs256  of a button.
\par }NOTE: The function doesn't return a title if there isn't one. For example, icon, bitmap, and invisible buttons don't have titles.{\cchs256 
\par }
\par \pard\plain \s43\li360\sa100 \b\f5\fs20 {\cf5 \{bmc graphics\\f_bgtt.bmp\}}{\cf1  }
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 
\par \pard\plain \s55\sb40\sa40 \b\f5\fs20 Input Parameters{\cchs256 
\par }\pard\plain \s48\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Button}\tab (Button/Required){\cchs256 
\par }\pard\plain \s49\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Identifies the button whose title is to be retrieved.
\par }\pard\plain \s56\ri432\sb40\sa40 \b\f5\fs20 Output Parameters{\cchs256 
\par }\pard\plain \s51\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Title}\tab (Text/Required){\cchs256 
\par }\pard\plain \s52\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Returns the button title.
\par }\pard\plain \s54\ri432\sb40\sa40 \b\f5\fs20 Flows{\cchs256 
\par }\pard\plain \s44\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Done
\par }\pard\plain \s45\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed after the button title }has been{\cchs256  returned.}
\par \pard\plain \s34\sb20\sa40\keepn \b\f5 \page {\cs32\fs16\up6 {\*\bkmkstart idx_set_button}{\*\bkmkend idx_set_button}#{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 #} idx_set_button}} {\cs32\fs16\up6 ${\footnote \pard\plain \s33 \f5\fs20 {
\cs32\fs16\up6 $} Parameters & Flows}} {\cs32\fs16\up6 +{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 +} brws5:0025}} {\cs32\fs16\up6 K{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 K} Set Button}} {\cs32\fs16\up6 !{\footnote \pard\plain 
\s33 \f5\fs20 {\cs32\fs16\up6 !}    EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_button_alm_functions')')}} Set Button
\par \pard\plain \s43\li360\sa100\keepn \b\f5\fs20 Button ALM{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f616374696f6e5f7365745f627574746f6e}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \pard\plain \s59 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Sets the selection mark for a radio or checkbox button.
\par }NOTE: {\cchs256 If the button }is anything other than a radio or checkbox button{\cchs256 , the function does nothing.
\par }
\par \pard\plain \s43\li360\sa100 \b\f5\fs20 {\cf5 \{bmc graphics\\f_bset.bmp\}}{\cf1  }
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 
\par }\pard\plain \s55\sb40\sa40 \b\f5\fs20 Input Parameters{\cchs256 
\par }\pard\plain \s48\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Button}\tab (Button/Required){\cchs256 
\par }\pard\plain \s49\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Identifies the radio or checkbox button to} be{\cchs256  set.
\par }\pard\plain \s54\ri432\sb40\sa40 \b\f5\fs20 Flows{\cchs256 
\par }\pard\plain \s44\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Done
\par }\pard\plain \s45\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed after the selection mark for }a{\cchs256  button }has been{\cchs256  set.}
\par \pard\plain \s34\sb20\sa40\keepn \b\f5 \page {\cs32\fs16\up6 {\*\bkmkstart idx_set_title}{\*\bkmkend idx_set_title}#{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 #} idx_set_title}} {\cs32\fs16\up6 ${\footnote \pard\plain \s33 \f5\fs20 {
\cs32\fs16\up6 $} Parameters & Flows}} {\cs32\fs16\up6 +{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 +} brws5:0030}} {\cs32\fs16\up6 K{\footnote \pard\plain \s33 \f5\fs20 {\cs32\fs16\up6 K} Set Title}} {\cs32\fs16\up6 !{\footnote \pard\plain \s33 
\f5\fs20 {\cs32\fs16\up6 !}    EB(`btn_up'); CBB(`btn_up', `JI(`', `idx_button_alm_functions')')}} Set Title
\par \pard\plain \s43\li360\sa100\keepn \b\f5\fs20 Button ALM{\field\flddirty{\*\fldinst {\cf1  ADDIN }{\cf1 {\*\datafield 6964785f616374696f6e5f7365745f7469746c65}}}{\fldrslt }}{\field\flddirty{\*\fldinst {\cf1  macrobutton NextField }}{\fldrslt }}
\par \pard\plain \s59 \f5\fs10 
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Renames a button.
\par }\pard \s15\li360\sa60\nowidctlpar 
\par \pard\plain \s43\li360\sa100 \b\f5\fs20 {\cf5 \{bmc graphics\\f_bstt.bmp\}}{\cf1  }
\par \pard\plain \s15\li360\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 
\par }\pard\plain \s55\sb40\sa40 \b\f5\fs20 Input Parameters{\cchs256 
\par }\pard\plain \s48\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Button}\tab (Button/Required){\cchs256 
\par }\pard\plain \s49\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Identifies the button to} be{\cchs256  rename}d{\cchs256 .
\par }\pard\plain \s48\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Title}\tab (Text/Required){\cchs256 
\par }\pard\plain \s49\li720\sa60\nowidctlpar \f5\fs20\cf1 Contains{\cchs256  the new button title.
\par }\pard\plain \s54\ri432\sb40\sa40 \b\f5\fs20 Flows{\cchs256 
\par }\pard\plain \s44\li360\sb40\sa20\nowidctlpar \f5\fs20\cf1 {\cchs256 Done
\par }\pard\plain \s45\li720\sa60\nowidctlpar \f5\fs20\cf1 {\cchs256 Followed after }a{\cchs256  button }has been renamed.
\par }